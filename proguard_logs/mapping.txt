android.support.v4.app.ActionBarDrawerToggle -> android.support.v4.app.a:
    android.support.v4.app.ActionBarDrawerToggle$ActionBarDrawerToggleImpl IMPL -> a
    android.app.Activity mActivity -> b
    android.support.v4.app.ActionBarDrawerToggle$Delegate mActivityImpl -> c
    android.support.v4.widget.DrawerLayout mDrawerLayout -> d
    boolean mDrawerIndicatorEnabled -> e
    android.graphics.drawable.Drawable mThemeImage -> f
    android.graphics.drawable.Drawable mDrawerImage -> g
    android.support.v4.app.ActionBarDrawerToggle$SlideDrawable mSlider -> h
    int mDrawerImageResource -> i
    int mOpenDrawerContentDescRes -> j
    int mCloseDrawerContentDescRes -> k
    java.lang.Object mSetIndicatorInfo -> l
    void syncState() -> a
    void onConfigurationChanged(android.content.res.Configuration) -> a
    boolean onOptionsItemSelected(android.view.MenuItem) -> a
    void onDrawerSlide(android.view.View,float) -> a
    void onDrawerOpened(android.view.View) -> a
    void onDrawerClosed(android.view.View) -> b
    void onDrawerStateChanged(int) -> a
    android.graphics.drawable.Drawable getThemeUpIndicator() -> b
    void setActionBarUpIndicator(android.graphics.drawable.Drawable,int) -> a
    void setActionBarDescription(int) -> b
android.support.v4.app.ActionBarDrawerToggle$1 -> android.support.v4.app.b:
android.support.v4.app.ActionBarDrawerToggle$ActionBarDrawerToggleImpl -> android.support.v4.app.c:
    android.graphics.drawable.Drawable getThemeUpIndicator(android.app.Activity) -> a
    java.lang.Object setActionBarUpIndicator(java.lang.Object,android.app.Activity,android.graphics.drawable.Drawable,int) -> a
    java.lang.Object setActionBarDescription(java.lang.Object,android.app.Activity,int) -> a
android.support.v4.app.ActionBarDrawerToggle$ActionBarDrawerToggleImplBase -> android.support.v4.app.d:
    android.graphics.drawable.Drawable getThemeUpIndicator(android.app.Activity) -> a
    java.lang.Object setActionBarUpIndicator(java.lang.Object,android.app.Activity,android.graphics.drawable.Drawable,int) -> a
    java.lang.Object setActionBarDescription(java.lang.Object,android.app.Activity,int) -> a
android.support.v4.app.ActionBarDrawerToggle$ActionBarDrawerToggleImplHC -> android.support.v4.app.e:
    android.graphics.drawable.Drawable getThemeUpIndicator(android.app.Activity) -> a
    java.lang.Object setActionBarUpIndicator(java.lang.Object,android.app.Activity,android.graphics.drawable.Drawable,int) -> a
    java.lang.Object setActionBarDescription(java.lang.Object,android.app.Activity,int) -> a
android.support.v4.app.ActionBarDrawerToggle$Delegate -> android.support.v4.app.f:
    android.graphics.drawable.Drawable getThemeUpIndicator() -> a
    void setActionBarUpIndicator(android.graphics.drawable.Drawable,int) -> a
    void setActionBarDescription(int) -> a
android.support.v4.app.ActionBarDrawerToggle$DelegateProvider -> android.support.v4.app.g:
    android.support.v4.app.ActionBarDrawerToggle$Delegate getDrawerToggleDelegate() -> b_
android.support.v4.app.ActionBarDrawerToggle$SlideDrawable -> android.support.v4.app.h:
    android.graphics.drawable.Drawable mWrapped -> a
    float mOffset -> b
    float mOffsetBy -> c
    android.graphics.Rect mTmpRect -> d
    void setOffset(float) -> a
    float getOffset() -> a
    void setOffsetBy(float) -> b
    void draw(android.graphics.Canvas) -> draw
    void setChangingConfigurations(int) -> setChangingConfigurations
    int getChangingConfigurations() -> getChangingConfigurations
    void setDither(boolean) -> setDither
    void setFilterBitmap(boolean) -> setFilterBitmap
    void setAlpha(int) -> setAlpha
    void setColorFilter(android.graphics.ColorFilter) -> setColorFilter
    void setColorFilter(int,android.graphics.PorterDuff$Mode) -> setColorFilter
    void clearColorFilter() -> clearColorFilter
    boolean isStateful() -> isStateful
    boolean setState(int[]) -> setState
    int[] getState() -> getState
    android.graphics.drawable.Drawable getCurrent() -> getCurrent
    boolean setVisible(boolean,boolean) -> setVisible
    int getOpacity() -> getOpacity
    android.graphics.Region getTransparentRegion() -> getTransparentRegion
    boolean onStateChange(int[]) -> onStateChange
    void onBoundsChange(android.graphics.Rect) -> onBoundsChange
    int getIntrinsicWidth() -> getIntrinsicWidth
    int getIntrinsicHeight() -> getIntrinsicHeight
    int getMinimumWidth() -> getMinimumWidth
    int getMinimumHeight() -> getMinimumHeight
    boolean getPadding(android.graphics.Rect) -> getPadding
    android.graphics.drawable.Drawable$ConstantState getConstantState() -> getConstantState
    void invalidateDrawable(android.graphics.drawable.Drawable) -> invalidateDrawable
    void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long) -> scheduleDrawable
    void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable) -> unscheduleDrawable
android.support.v4.app.ActionBarDrawerToggleHoneycomb -> android.support.v4.app.i:
    int[] THEME_ATTRS -> a
    java.lang.Object setActionBarUpIndicator(java.lang.Object,android.app.Activity,android.graphics.drawable.Drawable,int) -> a
    java.lang.Object setActionBarDescription(java.lang.Object,android.app.Activity,int) -> a
    android.graphics.drawable.Drawable getThemeUpIndicator(android.app.Activity) -> a
android.support.v4.app.ActionBarDrawerToggleHoneycomb$SetIndicatorInfo -> android.support.v4.app.j:
    java.lang.reflect.Method setHomeAsUpIndicator -> a
    java.lang.reflect.Method setHomeActionContentDescription -> b
    android.widget.ImageView upIndicatorView -> c
android.support.v4.app.ActivityCompat -> android.support.v4.app.k:
    boolean invalidateOptionsMenu(android.app.Activity) -> a
    void finishAffinity(android.app.Activity) -> b
android.support.v4.app.ActivityCompatHoneycomb -> android.support.v4.app.l:
    void invalidateOptionsMenu(android.app.Activity) -> a
android.support.v4.app.ActivityCompatJB -> android.support.v4.app.m:
    void finishAffinity(android.app.Activity) -> a
android.support.v4.app.BackStackRecord -> android.support.v4.app.n:
    android.support.v4.app.FragmentManagerImpl mManager -> a
    android.support.v4.app.BackStackRecord$Op mHead -> b
    android.support.v4.app.BackStackRecord$Op mTail -> c
    int mNumOp -> d
    int mEnterAnim -> e
    int mExitAnim -> f
    int mPopEnterAnim -> g
    int mPopExitAnim -> h
    int mTransition -> i
    int mTransitionStyle -> j
    boolean mAddToBackStack -> k
    boolean mAllowAddToBackStack -> l
    java.lang.String mName -> m
    boolean mCommitted -> n
    int mIndex -> o
    int mBreadCrumbTitleRes -> p
    java.lang.CharSequence mBreadCrumbTitleText -> q
    int mBreadCrumbShortTitleRes -> r
    java.lang.CharSequence mBreadCrumbShortTitleText -> s
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    void dump(java.lang.String,java.io.PrintWriter,boolean) -> a
    void addOp(android.support.v4.app.BackStackRecord$Op) -> a
    android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String) -> a
    android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment,java.lang.String) -> a
    void doAddOp(int,android.support.v4.app.Fragment,java.lang.String,int) -> a
    android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment,java.lang.String) -> b
    android.support.v4.app.FragmentTransaction remove(android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentTransaction detach(android.support.v4.app.Fragment) -> b
    android.support.v4.app.FragmentTransaction attach(android.support.v4.app.Fragment) -> c
    android.support.v4.app.FragmentTransaction addToBackStack(java.lang.String) -> a
    android.support.v4.app.FragmentTransaction disallowAddToBackStack() -> a
    void bumpBackStackNesting(int) -> a
    int commit() -> b
    int commitAllowingStateLoss() -> c
    int commitInternal(boolean) -> a
    void run() -> run
    void popFromBackStack(boolean) -> b
    java.lang.String getName() -> d
    boolean isEmpty() -> e
android.support.v4.app.BackStackRecord$Op -> android.support.v4.app.o:
    android.support.v4.app.BackStackRecord$Op next -> a
    android.support.v4.app.BackStackRecord$Op prev -> b
    int cmd -> c
    android.support.v4.app.Fragment fragment -> d
    int enterAnim -> e
    int exitAnim -> f
    int popEnterAnim -> g
    int popExitAnim -> h
    java.util.ArrayList removed -> i
android.support.v4.app.BackStackState -> android.support.v4.app.BackStackState:
    int[] mOps -> a
    int mTransition -> b
    int mTransitionStyle -> c
    java.lang.String mName -> d
    int mIndex -> e
    int mBreadCrumbTitleRes -> f
    java.lang.CharSequence mBreadCrumbTitleText -> g
    int mBreadCrumbShortTitleRes -> h
    java.lang.CharSequence mBreadCrumbShortTitleText -> i
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.support.v4.app.BackStackRecord instantiate(android.support.v4.app.FragmentManagerImpl) -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.BackStackState$1 -> android.support.v4.app.p:
    android.support.v4.app.BackStackState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.BackStackState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.DialogFragment -> android.support.v4.app.q:
    int mStyle -> a
    int mTheme -> b
    boolean mCancelable -> c
    boolean mShowsDialog -> d
    int mBackStackId -> e
    android.app.Dialog mDialog -> f
    boolean mViewDestroyed -> g
    boolean mDismissed -> h
    boolean mShownByMe -> i
    void show(android.support.v4.app.FragmentManager,java.lang.String) -> a
    void dismissInternal(boolean) -> a
    int getTheme() -> a
    void setCancelable(boolean) -> b
    void onAttach(android.app.Activity) -> a
    void onDetach() -> b
    void onCreate(android.os.Bundle) -> a
    android.view.LayoutInflater getLayoutInflater(android.os.Bundle) -> b
    android.app.Dialog onCreateDialog(android.os.Bundle) -> c
    void onCancel(android.content.DialogInterface) -> onCancel
    void onDismiss(android.content.DialogInterface) -> onDismiss
    void onActivityCreated(android.os.Bundle) -> d
    void onStart() -> c
    void onSaveInstanceState(android.os.Bundle) -> e
    void onStop() -> d
    void onDestroyView() -> e
android.support.v4.app.Fragment -> android.support.v4.app.Fragment:
    java.util.HashMap sClassMap -> a
    int mState -> j
    android.view.View mAnimatingAway -> k
    int mStateAfterAnimating -> l
    android.os.Bundle mSavedFragmentState -> m
    android.util.SparseArray mSavedViewState -> n
    int mIndex -> o
    java.lang.String mWho -> p
    android.os.Bundle mArguments -> q
    android.support.v4.app.Fragment mTarget -> r
    int mTargetIndex -> s
    int mTargetRequestCode -> t
    boolean mAdded -> u
    boolean mRemoving -> v
    boolean mResumed -> w
    boolean mFromLayout -> x
    boolean mInLayout -> y
    boolean mRestored -> z
    int mBackStackNesting -> A
    android.support.v4.app.FragmentManagerImpl mFragmentManager -> B
    android.support.v4.app.FragmentActivity mActivity -> C
    android.support.v4.app.FragmentManagerImpl mChildFragmentManager -> D
    android.support.v4.app.Fragment mParentFragment -> E
    int mFragmentId -> F
    int mContainerId -> G
    java.lang.String mTag -> H
    boolean mHidden -> I
    boolean mDetached -> J
    boolean mRetainInstance -> K
    boolean mRetaining -> L
    boolean mHasMenu -> M
    boolean mMenuVisible -> N
    boolean mCalled -> O
    int mNextAnim -> P
    android.view.ViewGroup mContainer -> Q
    android.view.View mView -> R
    android.view.View mInnerView -> S
    boolean mDeferStart -> T
    boolean mUserVisibleHint -> U
    android.support.v4.app.LoaderManagerImpl mLoaderManager -> V
    boolean mLoadersStarted -> W
    boolean mCheckedForLoaderManager -> X
    android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String) -> a
    android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle) -> a
    void restoreViewState(android.os.Bundle) -> f
    void setIndex(int,android.support.v4.app.Fragment) -> a
    boolean isInBackStack() -> f
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void setArguments(android.os.Bundle) -> g
    android.os.Bundle getArguments() -> g
    android.support.v4.app.FragmentActivity getActivity() -> h
    android.content.res.Resources getResources() -> i
    java.lang.String getString(int) -> a
    android.support.v4.app.FragmentManager getFragmentManager() -> j
    boolean isAdded() -> k
    boolean isDetached() -> l
    boolean isResumed() -> m
    boolean isVisible() -> n
    boolean isHidden() -> o
    void onHiddenChanged(boolean) -> c
    void setRetainInstance(boolean) -> d
    void setHasOptionsMenu(boolean) -> e
    void setMenuVisibility(boolean) -> f
    void setUserVisibleHint(boolean) -> g
    void startActivity(android.content.Intent) -> a
    void onActivityResult(int,int,android.content.Intent) -> a
    android.view.LayoutInflater getLayoutInflater(android.os.Bundle) -> b
    void onInflate(android.app.Activity,android.util.AttributeSet,android.os.Bundle) -> a
    void onAttach(android.app.Activity) -> a
    android.view.animation.Animation onCreateAnimation(int,boolean,int) -> a
    void onCreate(android.os.Bundle) -> a
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    void onViewCreated(android.view.View,android.os.Bundle) -> a
    android.view.View getView() -> p
    void onActivityCreated(android.os.Bundle) -> d
    void onViewStateRestored(android.os.Bundle) -> h
    void onStart() -> c
    void onResume() -> q
    void onSaveInstanceState(android.os.Bundle) -> e
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onPause() -> r
    void onStop() -> d
    void onLowMemory() -> onLowMemory
    void onDestroyView() -> e
    void onDestroy() -> s
    void initState() -> t
    void onDetach() -> b
    void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    void onPrepareOptionsMenu(android.view.Menu) -> a
    void onDestroyOptionsMenu() -> u
    boolean onOptionsItemSelected(android.view.MenuItem) -> a
    void onOptionsMenuClosed(android.view.Menu) -> b
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> b
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    void instantiateChildFragmentManager() -> v
    void performCreate(android.os.Bundle) -> i
    android.view.View performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> b
    void performActivityCreated(android.os.Bundle) -> j
    void performStart() -> w
    void performResume() -> x
    void performConfigurationChanged(android.content.res.Configuration) -> a
    void performLowMemory() -> y
    boolean performCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> b
    boolean performPrepareOptionsMenu(android.view.Menu) -> c
    boolean performOptionsItemSelected(android.view.MenuItem) -> c
    boolean performContextItemSelected(android.view.MenuItem) -> d
    void performOptionsMenuClosed(android.view.Menu) -> d
    void performSaveInstanceState(android.os.Bundle) -> k
    void performPause() -> z
    void performStop() -> A
    void performReallyStop() -> B
    void performDestroyView() -> C
    void performDestroy() -> D
android.support.v4.app.Fragment$1 -> android.support.v4.app.r:
    android.support.v4.app.Fragment this$0 -> a
    android.view.View findViewById(int) -> a
android.support.v4.app.Fragment$InstantiationException -> android.support.v4.app.s:
android.support.v4.app.Fragment$SavedState -> android.support.v4.app.Fragment$SavedState:
    android.os.Bundle mState -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.Fragment$SavedState$1 -> android.support.v4.app.t:
    android.support.v4.app.Fragment$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.Fragment$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentActivity -> android.support.v4.app.u:
    android.os.Handler mHandler -> a
    android.support.v4.app.FragmentManagerImpl mFragments -> b
    android.support.v4.app.FragmentContainer mContainer -> c
    boolean mCreated -> d
    boolean mResumed -> e
    boolean mStopped -> f
    boolean mReallyStopped -> g
    boolean mRetaining -> h
    boolean mOptionsMenuInvalidated -> i
    boolean mCheckedForLoaderManager -> j
    boolean mLoadersStarted -> k
    java.util.HashMap mAllLoaderManagers -> l
    android.support.v4.app.LoaderManagerImpl mLoaderManager -> m
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onBackPressed() -> onBackPressed
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreatePanelMenu(int,android.view.Menu) -> onCreatePanelMenu
    android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet) -> onCreateView
    void onDestroy() -> onDestroy
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void onLowMemory() -> onLowMemory
    boolean onMenuItemSelected(int,android.view.MenuItem) -> onMenuItemSelected
    void onPanelClosed(int,android.view.Menu) -> onPanelClosed
    void onPause() -> onPause
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onResume() -> onResume
    void onPostResume() -> onPostResume
    void onResumeFragments() -> a_
    boolean onPreparePanel(int,android.view.View,android.view.Menu) -> onPreparePanel
    java.lang.Object onRetainNonConfigurationInstance() -> onRetainNonConfigurationInstance
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onStart() -> onStart
    void onStop() -> onStop
    java.lang.Object onRetainCustomNonConfigurationInstance() -> c
    void supportInvalidateOptionsMenu() -> d
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
    java.lang.String viewToString(android.view.View) -> a
    void dumpViewHierarchy(java.lang.String,java.io.PrintWriter,android.view.View) -> a
    void doReallyStop(boolean) -> a
    void onReallyStop() -> e
    void onAttachFragment(android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentManager getSupportFragmentManager() -> f
    void startActivityForResult(android.content.Intent,int) -> startActivityForResult
    void startActivityFromFragment(android.support.v4.app.Fragment,android.content.Intent,int) -> a
    void invalidateSupportFragment(java.lang.String) -> a
    android.support.v4.app.LoaderManagerImpl getLoaderManager(java.lang.String,boolean,boolean) -> a
android.support.v4.app.FragmentActivity$1 -> android.support.v4.app.v:
    android.support.v4.app.FragmentActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
android.support.v4.app.FragmentActivity$2 -> android.support.v4.app.w:
    android.support.v4.app.FragmentActivity this$0 -> a
    android.view.View findViewById(int) -> a
android.support.v4.app.FragmentActivity$FragmentTag -> android.support.v4.app.x:
    int[] Fragment -> a
android.support.v4.app.FragmentActivity$NonConfigurationInstances -> android.support.v4.app.y:
    java.lang.Object activity -> a
    java.lang.Object custom -> b
    java.util.HashMap children -> c
    java.util.ArrayList fragments -> d
    java.util.HashMap loaders -> e
android.support.v4.app.FragmentContainer -> android.support.v4.app.z:
    android.view.View findViewById(int) -> a
android.support.v4.app.FragmentManager -> android.support.v4.app.aa:
    android.support.v4.app.FragmentTransaction beginTransaction() -> a
    boolean executePendingTransactions() -> b
    android.support.v4.app.Fragment findFragmentByTag(java.lang.String) -> a
    void popBackStack(java.lang.String,int) -> a
    void popBackStack(int,int) -> a
android.support.v4.app.FragmentManager$OnBackStackChangedListener -> android.support.v4.app.ab:
    void onBackStackChanged() -> a
android.support.v4.app.FragmentManagerImpl -> android.support.v4.app.ac:
    boolean DEBUG -> a
    boolean HONEYCOMB -> b
    java.util.ArrayList mPendingActions -> c
    java.lang.Runnable[] mTmpActions -> d
    boolean mExecutingActions -> e
    java.util.ArrayList mActive -> f
    java.util.ArrayList mAdded -> g
    java.util.ArrayList mAvailIndices -> h
    java.util.ArrayList mBackStack -> i
    java.util.ArrayList mCreatedMenus -> j
    java.util.ArrayList mBackStackIndices -> k
    java.util.ArrayList mAvailBackStackIndices -> l
    java.util.ArrayList mBackStackChangeListeners -> m
    int mCurState -> n
    android.support.v4.app.FragmentActivity mActivity -> o
    android.support.v4.app.FragmentContainer mContainer -> p
    android.support.v4.app.Fragment mParent -> q
    boolean mNeedMenuInvalidate -> r
    boolean mStateSaved -> s
    boolean mDestroyed -> t
    java.lang.String mNoTransactionsBecause -> u
    boolean mHavePendingDeferredStart -> v
    android.os.Bundle mStateBundle -> w
    android.util.SparseArray mStateArray -> x
    java.lang.Runnable mExecCommit -> y
    android.view.animation.Interpolator DECELERATE_QUINT -> z
    android.view.animation.Interpolator DECELERATE_CUBIC -> A
    android.view.animation.Interpolator ACCELERATE_QUINT -> B
    android.view.animation.Interpolator ACCELERATE_CUBIC -> C
    void throwException(java.lang.RuntimeException) -> a
    android.support.v4.app.FragmentTransaction beginTransaction() -> a
    boolean executePendingTransactions() -> b
    boolean popBackStackImmediate() -> c
    void popBackStack(java.lang.String,int) -> a
    void popBackStack(int,int) -> a
    void putFragment(android.os.Bundle,java.lang.String,android.support.v4.app.Fragment) -> a
    android.support.v4.app.Fragment getFragment(android.os.Bundle,java.lang.String) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    android.view.animation.Animation makeOpenCloseAnimation(android.content.Context,float,float,float,float) -> a
    android.view.animation.Animation makeFadeAnimation(android.content.Context,float,float) -> a
    android.view.animation.Animation loadAnimation(android.support.v4.app.Fragment,int,boolean,int) -> a
    void performPendingDeferredStart(android.support.v4.app.Fragment) -> a
    void moveToState(android.support.v4.app.Fragment,int,int,int,boolean) -> a
    void moveToState(android.support.v4.app.Fragment) -> b
    void moveToState(int,boolean) -> a
    void moveToState(int,int,int,boolean) -> a
    void startPendingDeferredFragments() -> d
    void makeActive(android.support.v4.app.Fragment) -> c
    void makeInactive(android.support.v4.app.Fragment) -> d
    void addFragment(android.support.v4.app.Fragment,boolean) -> a
    void removeFragment(android.support.v4.app.Fragment,int,int) -> a
    void hideFragment(android.support.v4.app.Fragment,int,int) -> b
    void showFragment(android.support.v4.app.Fragment,int,int) -> c
    void detachFragment(android.support.v4.app.Fragment,int,int) -> d
    void attachFragment(android.support.v4.app.Fragment,int,int) -> e
    android.support.v4.app.Fragment findFragmentById(int) -> a
    android.support.v4.app.Fragment findFragmentByTag(java.lang.String) -> a
    void checkStateLoss() -> t
    void enqueueAction(java.lang.Runnable,boolean) -> a
    int allocBackStackIndex(android.support.v4.app.BackStackRecord) -> a
    void setBackStackIndex(int,android.support.v4.app.BackStackRecord) -> a
    void freeBackStackIndex(int) -> b
    boolean execPendingActions() -> e
    void reportBackStackChanged() -> f
    void addBackStackState(android.support.v4.app.BackStackRecord) -> b
    boolean popBackStackState(android.os.Handler,java.lang.String,int,int) -> a
    java.util.ArrayList retainNonConfig() -> g
    void saveFragmentViewState(android.support.v4.app.Fragment) -> e
    android.os.Bundle saveFragmentBasicState(android.support.v4.app.Fragment) -> f
    android.os.Parcelable saveAllState() -> h
    void restoreAllState(android.os.Parcelable,java.util.ArrayList) -> a
    void attachActivity(android.support.v4.app.FragmentActivity,android.support.v4.app.FragmentContainer,android.support.v4.app.Fragment) -> a
    void noteStateNotSaved() -> i
    void dispatchCreate() -> j
    void dispatchActivityCreated() -> k
    void dispatchStart() -> l
    void dispatchResume() -> m
    void dispatchPause() -> n
    void dispatchStop() -> o
    void dispatchReallyStop() -> p
    void dispatchDestroyView() -> q
    void dispatchDestroy() -> r
    void dispatchConfigurationChanged(android.content.res.Configuration) -> a
    void dispatchLowMemory() -> s
    boolean dispatchCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    boolean dispatchPrepareOptionsMenu(android.view.Menu) -> a
    boolean dispatchOptionsItemSelected(android.view.MenuItem) -> a
    boolean dispatchContextItemSelected(android.view.MenuItem) -> b
    void dispatchOptionsMenuClosed(android.view.Menu) -> b
    int reverseTransit(int) -> c
    int transitToStyleIndex(int,boolean) -> b
android.support.v4.app.FragmentManagerImpl$1 -> android.support.v4.app.ad:
    android.support.v4.app.FragmentManagerImpl this$0 -> a
    void run() -> run
android.support.v4.app.FragmentManagerImpl$3 -> android.support.v4.app.ae:
    java.lang.String val$name -> a
    int val$flags -> b
    android.support.v4.app.FragmentManagerImpl this$0 -> c
    void run() -> run
android.support.v4.app.FragmentManagerImpl$4 -> android.support.v4.app.af:
    int val$id -> a
    int val$flags -> b
    android.support.v4.app.FragmentManagerImpl this$0 -> c
    void run() -> run
android.support.v4.app.FragmentManagerImpl$5 -> android.support.v4.app.ag:
    android.support.v4.app.Fragment val$fragment -> a
    android.support.v4.app.FragmentManagerImpl this$0 -> b
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
android.support.v4.app.FragmentManagerState -> android.support.v4.app.FragmentManagerState:
    android.support.v4.app.FragmentState[] mActive -> a
    int[] mAdded -> b
    android.support.v4.app.BackStackState[] mBackStack -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.FragmentManagerState$1 -> android.support.v4.app.ah:
    android.support.v4.app.FragmentManagerState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentManagerState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentPagerAdapter -> android.support.v4.app.ai:
    android.support.v4.app.FragmentManager mFragmentManager -> a
    android.support.v4.app.FragmentTransaction mCurTransaction -> b
    android.support.v4.app.Fragment mCurrentPrimaryItem -> c
    android.support.v4.app.Fragment getItem(int) -> a
    void startUpdate(android.view.ViewGroup) -> a
    java.lang.Object instantiateItem(android.view.ViewGroup,int) -> a
    void destroyItem(android.view.ViewGroup,int,java.lang.Object) -> a
    void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object) -> b
    void finishUpdate(android.view.ViewGroup) -> b
    boolean isViewFromObject(android.view.View,java.lang.Object) -> a
    android.os.Parcelable saveState() -> a
    void restoreState(android.os.Parcelable,java.lang.ClassLoader) -> a
    long getItemId(int) -> b
    java.lang.String makeFragmentName(int,long) -> a
android.support.v4.app.FragmentState -> android.support.v4.app.FragmentState:
    java.lang.String mClassName -> a
    int mIndex -> b
    boolean mFromLayout -> c
    int mFragmentId -> d
    int mContainerId -> e
    java.lang.String mTag -> f
    boolean mRetainInstance -> g
    boolean mDetached -> h
    android.os.Bundle mArguments -> i
    android.os.Bundle mSavedFragmentState -> j
    android.support.v4.app.Fragment mInstance -> k
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.support.v4.app.Fragment instantiate(android.support.v4.app.FragmentActivity,android.support.v4.app.Fragment) -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.FragmentState$1 -> android.support.v4.app.aj:
    android.support.v4.app.FragmentState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentTabHost -> android.support.v4.app.FragmentTabHost:
    java.util.ArrayList mTabs -> a
    android.content.Context mContext -> b
    android.support.v4.app.FragmentManager mFragmentManager -> c
    int mContainerId -> d
    android.widget.TabHost$OnTabChangeListener mOnTabChangeListener -> e
    android.support.v4.app.FragmentTabHost$TabInfo mLastTab -> f
    boolean mAttached -> g
    void setup() -> setup
    void setOnTabChangedListener(android.widget.TabHost$OnTabChangeListener) -> setOnTabChangedListener
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void onTabChanged(java.lang.String) -> onTabChanged
    android.support.v4.app.FragmentTransaction doTabChanged(java.lang.String,android.support.v4.app.FragmentTransaction) -> a
android.support.v4.app.FragmentTabHost$1 -> android.support.v4.app.ak:
android.support.v4.app.FragmentTabHost$SavedState -> android.support.v4.app.FragmentTabHost$SavedState:
    java.lang.String curTab -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
android.support.v4.app.FragmentTabHost$SavedState$1 -> android.support.v4.app.al:
    android.support.v4.app.FragmentTabHost$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentTabHost$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentTabHost$TabInfo -> android.support.v4.app.am:
    java.lang.String tag -> a
    java.lang.Class clss -> b
    android.os.Bundle args -> c
    android.support.v4.app.Fragment fragment -> d
    android.support.v4.app.Fragment access$102(android.support.v4.app.FragmentTabHost$TabInfo,android.support.v4.app.Fragment) -> a
    android.support.v4.app.Fragment access$100(android.support.v4.app.FragmentTabHost$TabInfo) -> a
    java.lang.String access$200(android.support.v4.app.FragmentTabHost$TabInfo) -> b
    java.lang.Class access$300(android.support.v4.app.FragmentTabHost$TabInfo) -> c
    android.os.Bundle access$400(android.support.v4.app.FragmentTabHost$TabInfo) -> d
android.support.v4.app.FragmentTransaction -> android.support.v4.app.an:
    android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String) -> a
    android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment,java.lang.String) -> a
    android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment,java.lang.String) -> b
    android.support.v4.app.FragmentTransaction remove(android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentTransaction detach(android.support.v4.app.Fragment) -> b
    android.support.v4.app.FragmentTransaction attach(android.support.v4.app.Fragment) -> c
    boolean isEmpty() -> e
    android.support.v4.app.FragmentTransaction addToBackStack(java.lang.String) -> a
    android.support.v4.app.FragmentTransaction disallowAddToBackStack() -> a
    int commit() -> b
    int commitAllowingStateLoss() -> c
android.support.v4.app.ListFragment -> android.support.v4.app.ao:
    android.os.Handler mHandler -> i
    java.lang.Runnable mRequestFocus -> Y
    android.widget.AdapterView$OnItemClickListener mOnClickListener -> Z
    android.widget.ListAdapter mAdapter -> a
    android.widget.ListView mList -> b
    android.view.View mEmptyView -> c
    android.widget.TextView mStandardEmptyView -> d
    android.view.View mProgressContainer -> e
    android.view.View mListContainer -> f
    java.lang.CharSequence mEmptyText -> g
    boolean mListShown -> h
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    void onViewCreated(android.view.View,android.os.Bundle) -> a
    void onDestroyView() -> e
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> a
    void setListAdapter(android.widget.ListAdapter) -> a
    android.widget.ListView getListView() -> a
    void setEmptyText(java.lang.CharSequence) -> a
    void setListShown(boolean) -> a
    void setListShownNoAnimation(boolean) -> b
    void setListShown(boolean,boolean) -> a
    void ensureList() -> E
android.support.v4.app.ListFragment$1 -> android.support.v4.app.ap:
    android.support.v4.app.ListFragment this$0 -> a
    void run() -> run
android.support.v4.app.ListFragment$2 -> android.support.v4.app.aq:
    android.support.v4.app.ListFragment this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
android.support.v4.app.LoaderManager -> android.support.v4.app.ar:
    boolean hasRunningLoaders() -> a
android.support.v4.app.LoaderManager$LoaderCallbacks -> android.support.v4.app.as:
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    void onLoaderReset(android.support.v4.content.Loader) -> a
android.support.v4.app.LoaderManagerImpl -> android.support.v4.app.at:
    boolean DEBUG -> a
    android.support.v4.util.SparseArrayCompat mLoaders -> b
    android.support.v4.util.SparseArrayCompat mInactiveLoaders -> c
    java.lang.String mWho -> d
    android.support.v4.app.FragmentActivity mActivity -> e
    boolean mStarted -> f
    boolean mRetaining -> g
    void updateActivity(android.support.v4.app.FragmentActivity) -> a
    void doStart() -> b
    void doStop() -> c
    void doRetain() -> d
    void finishRetain() -> e
    void doReportNextStart() -> f
    void doReportStart() -> g
    void doDestroy() -> h
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    boolean hasRunningLoaders() -> a
android.support.v4.app.LoaderManagerImpl$LoaderInfo -> android.support.v4.app.au:
    int mId -> a
    android.os.Bundle mArgs -> b
    android.support.v4.app.LoaderManager$LoaderCallbacks mCallbacks -> c
    android.support.v4.content.Loader mLoader -> d
    boolean mHaveData -> e
    boolean mDeliveredData -> f
    java.lang.Object mData -> g
    boolean mStarted -> h
    boolean mRetaining -> i
    boolean mRetainingStarted -> j
    boolean mReportNextStart -> k
    boolean mDestroyed -> l
    boolean mListenerRegistered -> m
    android.support.v4.app.LoaderManagerImpl$LoaderInfo mPendingLoader -> n
    android.support.v4.app.LoaderManagerImpl this$0 -> o
    void start() -> a
    void retain() -> b
    void finishRetain() -> c
    void reportStart() -> d
    void stop() -> e
    void destroy() -> f
    void callOnLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
android.support.v4.app.NavUtils -> android.support.v4.app.av:
    android.support.v4.app.NavUtils$NavUtilsImpl IMPL -> a
    boolean shouldUpRecreateTask(android.app.Activity,android.content.Intent) -> a
    void navigateUpTo(android.app.Activity,android.content.Intent) -> b
    android.content.Intent getParentActivityIntent(android.app.Activity) -> a
    android.content.Intent getParentActivityIntent(android.content.Context,android.content.ComponentName) -> a
    java.lang.String getParentActivityName(android.app.Activity) -> b
    java.lang.String getParentActivityName(android.content.Context,android.content.ComponentName) -> b
android.support.v4.app.NavUtils$NavUtilsImpl -> android.support.v4.app.aw:
    android.content.Intent getParentActivityIntent(android.app.Activity) -> a
    boolean shouldUpRecreateTask(android.app.Activity,android.content.Intent) -> a
    void navigateUpTo(android.app.Activity,android.content.Intent) -> b
    java.lang.String getParentActivityName(android.content.Context,android.content.pm.ActivityInfo) -> a
android.support.v4.app.NavUtils$NavUtilsImplBase -> android.support.v4.app.ax:
    android.content.Intent getParentActivityIntent(android.app.Activity) -> a
    boolean shouldUpRecreateTask(android.app.Activity,android.content.Intent) -> a
    void navigateUpTo(android.app.Activity,android.content.Intent) -> b
    java.lang.String getParentActivityName(android.content.Context,android.content.pm.ActivityInfo) -> a
android.support.v4.app.NavUtils$NavUtilsImplJB -> android.support.v4.app.ay:
    android.content.Intent getParentActivityIntent(android.app.Activity) -> a
    android.content.Intent superGetParentActivityIntent(android.app.Activity) -> b
    boolean shouldUpRecreateTask(android.app.Activity,android.content.Intent) -> a
    void navigateUpTo(android.app.Activity,android.content.Intent) -> b
    java.lang.String getParentActivityName(android.content.Context,android.content.pm.ActivityInfo) -> a
android.support.v4.app.NavUtilsJB -> android.support.v4.app.az:
    android.content.Intent getParentActivityIntent(android.app.Activity) -> a
    boolean shouldUpRecreateTask(android.app.Activity,android.content.Intent) -> a
    void navigateUpTo(android.app.Activity,android.content.Intent) -> b
    java.lang.String getParentActivityName(android.content.pm.ActivityInfo) -> a
android.support.v4.app.NoSaveStateFrameLayout -> android.support.v4.app.ba:
    android.view.ViewGroup wrap(android.view.View) -> a
    void dispatchSaveInstanceState(android.util.SparseArray) -> dispatchSaveInstanceState
    void dispatchRestoreInstanceState(android.util.SparseArray) -> dispatchRestoreInstanceState
android.support.v4.app.NotificationCompat -> android.support.v4.app.bb:
    android.support.v4.app.NotificationCompat$NotificationCompatImpl IMPL -> a
    android.support.v4.app.NotificationCompat$NotificationCompatImpl access$000() -> a
android.support.v4.app.NotificationCompat$Action -> android.support.v4.app.bc:
    int icon -> a
    java.lang.CharSequence title -> b
    android.app.PendingIntent actionIntent -> c
android.support.v4.app.NotificationCompat$BigPictureStyle -> android.support.v4.app.bd:
    android.graphics.Bitmap mPicture -> a
    android.graphics.Bitmap mBigLargeIcon -> b
    boolean mBigLargeIconSet -> c
android.support.v4.app.NotificationCompat$BigTextStyle -> android.support.v4.app.be:
    java.lang.CharSequence mBigText -> a
android.support.v4.app.NotificationCompat$Builder -> android.support.v4.app.bf:
    android.content.Context mContext -> a
    java.lang.CharSequence mContentTitle -> b
    java.lang.CharSequence mContentText -> c
    android.app.PendingIntent mContentIntent -> d
    android.app.PendingIntent mFullScreenIntent -> e
    android.widget.RemoteViews mTickerView -> f
    android.graphics.Bitmap mLargeIcon -> g
    java.lang.CharSequence mContentInfo -> h
    int mNumber -> i
    int mPriority -> j
    boolean mUseChronometer -> k
    android.support.v4.app.NotificationCompat$Style mStyle -> l
    java.lang.CharSequence mSubText -> m
    int mProgressMax -> n
    int mProgress -> o
    boolean mProgressIndeterminate -> p
    java.util.ArrayList mActions -> q
    android.app.Notification mNotification -> r
    android.support.v4.app.NotificationCompat$Builder setSmallIcon(int) -> a
    android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent) -> a
    android.support.v4.app.NotificationCompat$Builder setOngoing(boolean) -> a
    android.support.v4.app.NotificationCompat$Builder setAutoCancel(boolean) -> b
    void setFlag(int,boolean) -> a
    android.app.Notification build() -> a
android.support.v4.app.NotificationCompat$InboxStyle -> android.support.v4.app.bg:
    java.util.ArrayList mTexts -> a
android.support.v4.app.NotificationCompat$NotificationCompatImpl -> android.support.v4.app.bh:
    android.app.Notification build(android.support.v4.app.NotificationCompat$Builder) -> a
android.support.v4.app.NotificationCompat$NotificationCompatImplBase -> android.support.v4.app.bi:
    android.app.Notification build(android.support.v4.app.NotificationCompat$Builder) -> a
android.support.v4.app.NotificationCompat$NotificationCompatImplHoneycomb -> android.support.v4.app.bj:
    android.app.Notification build(android.support.v4.app.NotificationCompat$Builder) -> a
android.support.v4.app.NotificationCompat$NotificationCompatImplIceCreamSandwich -> android.support.v4.app.bk:
    android.app.Notification build(android.support.v4.app.NotificationCompat$Builder) -> a
android.support.v4.app.NotificationCompat$NotificationCompatImplJellybean -> android.support.v4.app.bl:
    android.app.Notification build(android.support.v4.app.NotificationCompat$Builder) -> a
android.support.v4.app.NotificationCompat$Style -> android.support.v4.app.bm:
    java.lang.CharSequence mBigContentTitle -> d
    java.lang.CharSequence mSummaryText -> e
    boolean mSummaryTextSet -> f
android.support.v4.app.NotificationCompatHoneycomb -> android.support.v4.app.bn:
    android.app.Notification add(android.content.Context,android.app.Notification,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,android.widget.RemoteViews,int,android.app.PendingIntent,android.app.PendingIntent,android.graphics.Bitmap) -> a
android.support.v4.app.NotificationCompatIceCreamSandwich -> android.support.v4.app.bo:
    android.app.Notification add(android.content.Context,android.app.Notification,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,android.widget.RemoteViews,int,android.app.PendingIntent,android.app.PendingIntent,android.graphics.Bitmap,int,int,boolean) -> a
android.support.v4.app.NotificationCompatJellybean -> android.support.v4.app.bp:
    android.app.Notification$Builder b -> a
    void addAction(int,java.lang.CharSequence,android.app.PendingIntent) -> a
    void addBigTextStyle(java.lang.CharSequence,boolean,java.lang.CharSequence,java.lang.CharSequence) -> a
    void addBigPictureStyle(java.lang.CharSequence,boolean,java.lang.CharSequence,android.graphics.Bitmap,android.graphics.Bitmap,boolean) -> a
    void addInboxStyle(java.lang.CharSequence,boolean,java.lang.CharSequence,java.util.ArrayList) -> a
    android.app.Notification build() -> a
android.support.v4.app.SuperNotCalledException -> android.support.v4.app.bq:
android.support.v4.app.TaskStackBuilder -> android.support.v4.app.br:
    android.support.v4.app.TaskStackBuilder$TaskStackBuilderImpl IMPL -> a
    java.util.ArrayList mIntents -> b
    android.content.Context mSourceContext -> c
    android.support.v4.app.TaskStackBuilder create(android.content.Context) -> a
    android.support.v4.app.TaskStackBuilder addNextIntent(android.content.Intent) -> a
    android.support.v4.app.TaskStackBuilder addParentStack(android.app.Activity) -> a
    android.support.v4.app.TaskStackBuilder addParentStack(android.content.ComponentName) -> a
    java.util.Iterator iterator() -> iterator
    void startActivities() -> a
    void startActivities(android.os.Bundle) -> a
android.support.v4.app.TaskStackBuilder$SupportParentable -> android.support.v4.app.bs:
    android.content.Intent getSupportParentActivityIntent() -> c_
android.support.v4.app.TaskStackBuilder$TaskStackBuilderImpl -> android.support.v4.app.bt:
android.support.v4.app.TaskStackBuilder$TaskStackBuilderImplBase -> android.support.v4.app.bu:
android.support.v4.app.TaskStackBuilder$TaskStackBuilderImplHoneycomb -> android.support.v4.app.bv:
android.support.v4.content.ContextCompat -> android.support.v4.a.a:
    boolean startActivities(android.content.Context,android.content.Intent[],android.os.Bundle) -> a
android.support.v4.content.ContextCompatHoneycomb -> android.support.v4.a.b:
    void startActivities(android.content.Context,android.content.Intent[]) -> a
android.support.v4.content.ContextCompatJellybean -> android.support.v4.a.c:
    void startActivities(android.content.Context,android.content.Intent[],android.os.Bundle) -> a
android.support.v4.content.IntentCompat -> android.support.v4.a.d:
    android.support.v4.content.IntentCompat$IntentCompatImpl IMPL -> a
    android.content.Intent makeMainActivity(android.content.ComponentName) -> a
android.support.v4.content.IntentCompat$IntentCompatImpl -> android.support.v4.a.e:
    android.content.Intent makeMainActivity(android.content.ComponentName) -> a
android.support.v4.content.IntentCompat$IntentCompatImplBase -> android.support.v4.a.f:
    android.content.Intent makeMainActivity(android.content.ComponentName) -> a
android.support.v4.content.IntentCompat$IntentCompatImplHC -> android.support.v4.a.g:
    android.content.Intent makeMainActivity(android.content.ComponentName) -> a
android.support.v4.content.IntentCompat$IntentCompatImplIcsMr1 -> android.support.v4.a.h:
android.support.v4.content.IntentCompatHoneycomb -> android.support.v4.a.i:
    android.content.Intent makeMainActivity(android.content.ComponentName) -> a
android.support.v4.content.Loader -> android.support.v4.a.j:
    int mId -> a
    android.support.v4.content.Loader$OnLoadCompleteListener mListener -> b
    boolean mStarted -> c
    boolean mAbandoned -> d
    boolean mReset -> e
    boolean mContentChanged -> f
    boolean mProcessingChange -> g
    void registerListener(int,android.support.v4.content.Loader$OnLoadCompleteListener) -> a
    void unregisterListener(android.support.v4.content.Loader$OnLoadCompleteListener) -> a
    void startLoading() -> a
    void onStartLoading() -> b
    void stopLoading() -> c
    void onStopLoading() -> d
    void reset() -> e
    void onReset() -> f
    java.lang.String dataToString(java.lang.Object) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
android.support.v4.content.Loader$OnLoadCompleteListener -> android.support.v4.a.k:
android.support.v4.content.LocalBroadcastManager -> android.support.v4.a.l:
    android.content.Context mAppContext -> a
    java.util.HashMap mReceivers -> b
    java.util.HashMap mActions -> c
    java.util.ArrayList mPendingBroadcasts -> d
    android.os.Handler mHandler -> e
    java.lang.Object mLock -> f
    android.support.v4.content.LocalBroadcastManager mInstance -> g
    android.support.v4.content.LocalBroadcastManager getInstance(android.content.Context) -> a
    void registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter) -> a
    void unregisterReceiver(android.content.BroadcastReceiver) -> a
    boolean sendBroadcast(android.content.Intent) -> a
    void executePendingBroadcasts() -> a
    void access$000(android.support.v4.content.LocalBroadcastManager) -> a
android.support.v4.content.LocalBroadcastManager$1 -> android.support.v4.a.m:
    android.support.v4.content.LocalBroadcastManager this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
android.support.v4.content.LocalBroadcastManager$BroadcastRecord -> android.support.v4.a.n:
    android.content.Intent intent -> a
    java.util.ArrayList receivers -> b
android.support.v4.content.LocalBroadcastManager$ReceiverRecord -> android.support.v4.a.o:
    android.content.IntentFilter filter -> a
    android.content.BroadcastReceiver receiver -> b
    boolean broadcasting -> c
    java.lang.String toString() -> toString
android.support.v4.internal.view.SupportMenu -> android.support.v4.b.a.a:
android.support.v4.internal.view.SupportMenuItem -> android.support.v4.b.a.b:
    void setShowAsAction(int) -> setShowAsAction
    android.view.MenuItem setActionView(android.view.View) -> setActionView
    android.view.MenuItem setActionView(int) -> setActionView
    android.view.View getActionView() -> getActionView
    android.support.v4.internal.view.SupportMenuItem setSupportActionProvider(android.support.v4.view.ActionProvider) -> a
    boolean expandActionView() -> expandActionView
    boolean collapseActionView() -> collapseActionView
    boolean isActionViewExpanded() -> isActionViewExpanded
android.support.v4.internal.view.SupportSubMenu -> android.support.v4.b.a.c:
android.support.v4.os.ParcelableCompat -> android.support.v4.c.a:
    android.os.Parcelable$Creator newCreator(android.support.v4.os.ParcelableCompatCreatorCallbacks) -> a
android.support.v4.os.ParcelableCompat$CompatCreator -> android.support.v4.c.b:
    android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.os.ParcelableCompatCreatorCallbacks -> android.support.v4.c.c:
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> a
    java.lang.Object[] newArray(int) -> a
android.support.v4.os.ParcelableCompatCreatorHoneycombMR2 -> android.support.v4.c.d:
    android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.os.ParcelableCompatCreatorHoneycombMR2Stub -> android.support.v4.c.e:
    android.os.Parcelable$Creator instantiate(android.support.v4.os.ParcelableCompatCreatorCallbacks) -> a
android.support.v4.util.DebugUtils -> android.support.v4.d.a:
    void buildShortClassTag(java.lang.Object,java.lang.StringBuilder) -> a
android.support.v4.util.LogWriter -> android.support.v4.d.b:
    java.lang.String mTag -> a
    java.lang.StringBuilder mBuilder -> b
    void close() -> close
    void flush() -> flush
    void write(char[],int,int) -> write
    void flushBuilder() -> a
android.support.v4.util.SparseArrayCompat -> android.support.v4.d.c:
    java.lang.Object DELETED -> a
    boolean mGarbage -> b
    int[] mKeys -> c
    java.lang.Object[] mValues -> d
    int mSize -> e
    void gc() -> c
    int size() -> a
    int keyAt(int) -> a
    java.lang.Object valueAt(int) -> b
    void clear() -> b
    int idealByteArraySize(int) -> c
    int idealIntArraySize(int) -> d
android.support.v4.view.AccessibilityDelegateCompat -> android.support.v4.view.a:
    android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateImpl IMPL -> b
    java.lang.Object DEFAULT_DELEGATE -> c
    java.lang.Object mBridge -> a
    java.lang.Object getBridge() -> a
    void sendAccessibilityEvent(android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> d
    void onInitializeAccessibilityNodeInfo(android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> a
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(android.view.View) -> a
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl -> android.support.v4.view.b:
    java.lang.Object newAccessiblityDelegateDefaultImpl() -> a
    java.lang.Object newAccessiblityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompat) -> a
    boolean dispatchPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(java.lang.Object,android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> a
    void onPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(java.lang.Object,android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(java.lang.Object,android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> d
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl$1 -> android.support.v4.view.c:
    android.support.v4.view.AccessibilityDelegateCompat val$compat -> a
    android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl this$0 -> b
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(android.view.View,java.lang.Object) -> a
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> d
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateImpl -> android.support.v4.view.d:
    java.lang.Object newAccessiblityDelegateDefaultImpl() -> a
    java.lang.Object newAccessiblityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompat) -> a
    boolean dispatchPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(java.lang.Object,android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> a
    void onPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(java.lang.Object,android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(java.lang.Object,android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> d
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(java.lang.Object,android.view.View) -> a
    boolean performAccessibilityAction(java.lang.Object,android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateJellyBeanImpl -> android.support.v4.view.e:
    java.lang.Object newAccessiblityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompat) -> a
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(java.lang.Object,android.view.View) -> a
    boolean performAccessibilityAction(java.lang.Object,android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateJellyBeanImpl$1 -> android.support.v4.view.f:
    android.support.v4.view.AccessibilityDelegateCompat val$compat -> a
    android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateJellyBeanImpl this$0 -> b
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(android.view.View,java.lang.Object) -> a
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> d
    java.lang.Object getAccessibilityNodeProvider(android.view.View) -> a
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateStubImpl -> android.support.v4.view.g:
    java.lang.Object newAccessiblityDelegateDefaultImpl() -> a
    java.lang.Object newAccessiblityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompat) -> a
    boolean dispatchPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(java.lang.Object,android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> a
    void onPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(java.lang.Object,android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(java.lang.Object,android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> d
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(java.lang.Object,android.view.View) -> a
    boolean performAccessibilityAction(java.lang.Object,android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.AccessibilityDelegateCompatIcs -> android.support.v4.view.h:
    java.lang.Object newAccessibilityDelegateDefaultImpl() -> a
    java.lang.Object newAccessibilityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompatIcs$AccessibilityDelegateBridge) -> a
    boolean dispatchPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(java.lang.Object,android.view.View,java.lang.Object) -> a
    void onPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(java.lang.Object,android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(java.lang.Object,android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> d
android.support.v4.view.AccessibilityDelegateCompatIcs$1 -> android.support.v4.view.i:
    android.support.v4.view.AccessibilityDelegateCompatIcs$AccessibilityDelegateBridge val$bridge -> a
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onInitializeAccessibilityEvent
    void onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo) -> onInitializeAccessibilityNodeInfo
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onPopulateAccessibilityEvent
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> onRequestSendAccessibilityEvent
    void sendAccessibilityEvent(android.view.View,int) -> sendAccessibilityEvent
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> sendAccessibilityEventUnchecked
android.support.v4.view.AccessibilityDelegateCompatIcs$AccessibilityDelegateBridge -> android.support.v4.view.j:
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(android.view.View,java.lang.Object) -> a
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> d
android.support.v4.view.AccessibilityDelegateCompatJellyBean -> android.support.v4.view.k:
    java.lang.Object newAccessibilityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompatJellyBean$AccessibilityDelegateBridgeJellyBean) -> a
    java.lang.Object getAccessibilityNodeProvider(java.lang.Object,android.view.View) -> a
    boolean performAccessibilityAction(java.lang.Object,android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.AccessibilityDelegateCompatJellyBean$1 -> android.support.v4.view.l:
    android.support.v4.view.AccessibilityDelegateCompatJellyBean$AccessibilityDelegateBridgeJellyBean val$bridge -> a
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onInitializeAccessibilityEvent
    void onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo) -> onInitializeAccessibilityNodeInfo
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onPopulateAccessibilityEvent
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> onRequestSendAccessibilityEvent
    void sendAccessibilityEvent(android.view.View,int) -> sendAccessibilityEvent
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> sendAccessibilityEventUnchecked
    android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider(android.view.View) -> getAccessibilityNodeProvider
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle) -> performAccessibilityAction
android.support.v4.view.AccessibilityDelegateCompatJellyBean$AccessibilityDelegateBridgeJellyBean -> android.support.v4.view.m:
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(android.view.View,java.lang.Object) -> a
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> d
    java.lang.Object getAccessibilityNodeProvider(android.view.View) -> a
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.ActionProvider -> android.support.v4.view.n:
    android.content.Context mContext -> a
    android.support.v4.view.ActionProvider$SubUiVisibilityListener mSubUiVisibilityListener -> b
    android.support.v4.view.ActionProvider$VisibilityListener mVisibilityListener -> c
    android.content.Context getContext() -> a
    android.view.View onCreateActionView() -> b
    android.view.View onCreateActionView(android.view.MenuItem) -> a
    boolean overridesItemVisibility() -> c
    boolean isVisible() -> d
    void refreshVisibility() -> e
    boolean onPerformDefaultAction() -> f
    boolean hasSubMenu() -> g
    void onPrepareSubMenu(android.view.SubMenu) -> a
    void setSubUiVisibilityListener(android.support.v4.view.ActionProvider$SubUiVisibilityListener) -> a
    void setVisibilityListener(android.support.v4.view.ActionProvider$VisibilityListener) -> a
android.support.v4.view.ActionProvider$SubUiVisibilityListener -> android.support.v4.view.o:
android.support.v4.view.ActionProvider$VisibilityListener -> android.support.v4.view.p:
    void onActionProviderVisibilityChanged(boolean) -> a
android.support.v4.view.GravityCompat -> android.support.v4.view.q:
    android.support.v4.view.GravityCompat$GravityCompatImpl IMPL -> a
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompat$GravityCompatImpl -> android.support.v4.view.r:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompat$GravityCompatImplBase -> android.support.v4.view.s:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompat$GravityCompatImplJellybeanMr1 -> android.support.v4.view.t:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompatJellybeanMr1 -> android.support.v4.view.u:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.KeyEventCompat -> android.support.v4.view.v:
    android.support.v4.view.KeyEventCompat$KeyEventVersionImpl IMPL -> a
    boolean hasModifiers(android.view.KeyEvent,int) -> a
    boolean hasNoModifiers(android.view.KeyEvent) -> a
    void startTracking(android.view.KeyEvent) -> b
android.support.v4.view.KeyEventCompat$BaseKeyEventVersionImpl -> android.support.v4.view.w:
    int metaStateFilterDirectionalModifiers(int,int,int,int,int) -> a
    int normalizeMetaState(int) -> a
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompat$EclairKeyEventVersionImpl -> android.support.v4.view.x:
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompat$HoneycombKeyEventVersionImpl -> android.support.v4.view.y:
    int normalizeMetaState(int) -> a
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.KeyEventCompat$KeyEventVersionImpl -> android.support.v4.view.z:
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompatEclair -> android.support.v4.view.aa:
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompatHoneycomb -> android.support.v4.view.ab:
    int normalizeMetaState(int) -> a
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.MenuItemCompat -> android.support.v4.view.ac:
    android.support.v4.view.MenuItemCompat$MenuVersionImpl IMPL -> a
    void setShowAsAction(android.view.MenuItem,int) -> a
    android.view.MenuItem setActionView(android.view.MenuItem,android.view.View) -> a
    android.view.MenuItem setActionView(android.view.MenuItem,int) -> b
    android.view.View getActionView(android.view.MenuItem) -> a
    android.view.MenuItem setActionProvider(android.view.MenuItem,android.support.v4.view.ActionProvider) -> a
    boolean expandActionView(android.view.MenuItem) -> b
    boolean collapseActionView(android.view.MenuItem) -> c
    boolean isActionViewExpanded(android.view.MenuItem) -> d
android.support.v4.view.MenuItemCompat$BaseMenuVersionImpl -> android.support.v4.view.ad:
    void setShowAsAction(android.view.MenuItem,int) -> a
    android.view.MenuItem setActionView(android.view.MenuItem,android.view.View) -> a
    android.view.MenuItem setActionView(android.view.MenuItem,int) -> b
    android.view.View getActionView(android.view.MenuItem) -> a
    boolean expandActionView(android.view.MenuItem) -> b
    boolean collapseActionView(android.view.MenuItem) -> c
    boolean isActionViewExpanded(android.view.MenuItem) -> d
android.support.v4.view.MenuItemCompat$HoneycombMenuVersionImpl -> android.support.v4.view.ae:
    void setShowAsAction(android.view.MenuItem,int) -> a
    android.view.MenuItem setActionView(android.view.MenuItem,android.view.View) -> a
    android.view.MenuItem setActionView(android.view.MenuItem,int) -> b
    android.view.View getActionView(android.view.MenuItem) -> a
    boolean expandActionView(android.view.MenuItem) -> b
    boolean collapseActionView(android.view.MenuItem) -> c
    boolean isActionViewExpanded(android.view.MenuItem) -> d
android.support.v4.view.MenuItemCompat$IcsMenuVersionImpl -> android.support.v4.view.af:
    boolean expandActionView(android.view.MenuItem) -> b
    boolean collapseActionView(android.view.MenuItem) -> c
    boolean isActionViewExpanded(android.view.MenuItem) -> d
android.support.v4.view.MenuItemCompat$MenuVersionImpl -> android.support.v4.view.ag:
    void setShowAsAction(android.view.MenuItem,int) -> a
    android.view.MenuItem setActionView(android.view.MenuItem,android.view.View) -> a
    android.view.MenuItem setActionView(android.view.MenuItem,int) -> b
    android.view.View getActionView(android.view.MenuItem) -> a
    boolean expandActionView(android.view.MenuItem) -> b
    boolean collapseActionView(android.view.MenuItem) -> c
    boolean isActionViewExpanded(android.view.MenuItem) -> d
android.support.v4.view.MenuItemCompat$OnActionExpandListener -> android.support.v4.view.ah:
    boolean onMenuItemActionExpand(android.view.MenuItem) -> a
    boolean onMenuItemActionCollapse(android.view.MenuItem) -> b
android.support.v4.view.MenuItemCompatHoneycomb -> android.support.v4.view.ai:
    void setShowAsAction(android.view.MenuItem,int) -> a
    android.view.MenuItem setActionView(android.view.MenuItem,android.view.View) -> a
    android.view.MenuItem setActionView(android.view.MenuItem,int) -> b
    android.view.View getActionView(android.view.MenuItem) -> a
android.support.v4.view.MenuItemCompatIcs -> android.support.v4.view.aj:
    boolean expandActionView(android.view.MenuItem) -> a
    boolean collapseActionView(android.view.MenuItem) -> b
    boolean isActionViewExpanded(android.view.MenuItem) -> c
android.support.v4.view.MotionEventCompat -> android.support.v4.view.ak:
    android.support.v4.view.MotionEventCompat$MotionEventVersionImpl IMPL -> a
    int getActionMasked(android.view.MotionEvent) -> a
    int getActionIndex(android.view.MotionEvent) -> b
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> c
android.support.v4.view.MotionEventCompat$BaseMotionEventVersionImpl -> android.support.v4.view.al:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.MotionEventCompat$EclairMotionEventVersionImpl -> android.support.v4.view.am:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.MotionEventCompat$MotionEventVersionImpl -> android.support.v4.view.an:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.MotionEventCompatEclair -> android.support.v4.view.ao:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.PagerAdapter -> android.support.v4.view.ap:
    android.database.DataSetObservable mObservable -> a
    int getCount() -> b
    void startUpdate(android.view.ViewGroup) -> a
    java.lang.Object instantiateItem(android.view.ViewGroup,int) -> a
    void destroyItem(android.view.ViewGroup,int,java.lang.Object) -> a
    void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object) -> b
    void finishUpdate(android.view.ViewGroup) -> b
    void startUpdate(android.view.View) -> a
    java.lang.Object instantiateItem(android.view.View,int) -> a
    void destroyItem(android.view.View,int,java.lang.Object) -> a
    void setPrimaryItem(android.view.View,int,java.lang.Object) -> b
    void finishUpdate(android.view.View) -> b
    boolean isViewFromObject(android.view.View,java.lang.Object) -> a
    android.os.Parcelable saveState() -> a
    void restoreState(android.os.Parcelable,java.lang.ClassLoader) -> a
    int getItemPosition(java.lang.Object) -> a
    void registerDataSetObserver(android.database.DataSetObserver) -> a
    void unregisterDataSetObserver(android.database.DataSetObserver) -> b
    float getPageWidth(int) -> c
android.support.v4.view.VelocityTrackerCompat -> android.support.v4.view.aq:
    android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl IMPL -> a
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompat$BaseVelocityTrackerVersionImpl -> android.support.v4.view.ar:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompat$HoneycombVelocityTrackerVersionImpl -> android.support.v4.view.as:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl -> android.support.v4.view.at:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompatHoneycomb -> android.support.v4.view.au:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.ViewCompat -> android.support.v4.view.av:
    android.support.v4.view.ViewCompat$ViewCompatImpl IMPL -> a
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    int getImportantForAccessibility(android.view.View) -> c
    void setImportantForAccessibility(android.view.View,int) -> b
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> d
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> e
    android.view.ViewParent getParentForAccessibility(android.view.View) -> f
    boolean isOpaque(android.view.View) -> g
android.support.v4.view.ViewCompat$BaseViewCompatImpl -> android.support.v4.view.aw:
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    long getFrameTime() -> a
    int getImportantForAccessibility(android.view.View) -> c
    void setImportantForAccessibility(android.view.View,int) -> b
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> d
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> e
    android.view.ViewParent getParentForAccessibility(android.view.View) -> f
    boolean isOpaque(android.view.View) -> g
android.support.v4.view.ViewCompat$EclairMr1ViewCompatImpl -> android.support.v4.view.ax:
    boolean isOpaque(android.view.View) -> g
android.support.v4.view.ViewCompat$GBViewCompatImpl -> android.support.v4.view.ay:
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompat$HCViewCompatImpl -> android.support.v4.view.az:
    long getFrameTime() -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> d
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
android.support.v4.view.ViewCompat$ICSViewCompatImpl -> android.support.v4.view.ba:
    boolean canScrollHorizontally(android.view.View,int) -> a
    void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat) -> a
android.support.v4.view.ViewCompat$JBViewCompatImpl -> android.support.v4.view.bb:
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    int getImportantForAccessibility(android.view.View) -> c
    void setImportantForAccessibility(android.view.View,int) -> b
    android.view.ViewParent getParentForAccessibility(android.view.View) -> f
android.support.v4.view.ViewCompat$JbMr1ViewCompatImpl -> android.support.v4.view.bc:
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> e
android.support.v4.view.ViewCompat$ViewCompatImpl -> android.support.v4.view.bd:
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    int getImportantForAccessibility(android.view.View) -> c
    void setImportantForAccessibility(android.view.View,int) -> b
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> d
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> e
    android.view.ViewParent getParentForAccessibility(android.view.View) -> f
    boolean isOpaque(android.view.View) -> g
android.support.v4.view.ViewCompatEclairMr1 -> android.support.v4.view.be:
    boolean isOpaque(android.view.View) -> a
android.support.v4.view.ViewCompatGingerbread -> android.support.v4.view.bf:
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompatHC -> android.support.v4.view.bg:
    long getFrameTime() -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> a
android.support.v4.view.ViewCompatICS -> android.support.v4.view.bh:
    boolean canScrollHorizontally(android.view.View,int) -> a
    void setAccessibilityDelegate(android.view.View,java.lang.Object) -> a
android.support.v4.view.ViewCompatJB -> android.support.v4.view.bi:
    void postInvalidateOnAnimation(android.view.View) -> a
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    int getImportantForAccessibility(android.view.View) -> b
    void setImportantForAccessibility(android.view.View,int) -> a
    android.view.ViewParent getParentForAccessibility(android.view.View) -> c
android.support.v4.view.ViewCompatJellybeanMr1 -> android.support.v4.view.bj:
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> a
android.support.v4.view.ViewConfigurationCompat -> android.support.v4.view.bk:
    android.support.v4.view.ViewConfigurationCompat$ViewConfigurationVersionImpl IMPL -> a
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewConfigurationCompat$BaseViewConfigurationVersionImpl -> android.support.v4.view.bl:
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewConfigurationCompat$FroyoViewConfigurationVersionImpl -> android.support.v4.view.bm:
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewConfigurationCompat$ViewConfigurationVersionImpl -> android.support.v4.view.bn:
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewConfigurationCompatFroyo -> android.support.v4.view.bo:
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewGroupCompat -> android.support.v4.view.bp:
    android.support.v4.view.ViewGroupCompat$ViewGroupCompatImpl IMPL -> a
    void setMotionEventSplittingEnabled(android.view.ViewGroup,boolean) -> a
android.support.v4.view.ViewGroupCompat$ViewGroupCompatHCImpl -> android.support.v4.view.bq:
    void setMotionEventSplittingEnabled(android.view.ViewGroup,boolean) -> a
android.support.v4.view.ViewGroupCompat$ViewGroupCompatIcsImpl -> android.support.v4.view.br:
android.support.v4.view.ViewGroupCompat$ViewGroupCompatImpl -> android.support.v4.view.bs:
    void setMotionEventSplittingEnabled(android.view.ViewGroup,boolean) -> a
android.support.v4.view.ViewGroupCompat$ViewGroupCompatStubImpl -> android.support.v4.view.bt:
    void setMotionEventSplittingEnabled(android.view.ViewGroup,boolean) -> a
android.support.v4.view.ViewGroupCompatHC -> android.support.v4.view.bu:
    void setMotionEventSplittingEnabled(android.view.ViewGroup,boolean) -> a
android.support.v4.view.ViewPager -> android.support.v4.view.ViewPager:
    int[] LAYOUT_ATTRS -> a
    int mExpectedAdapterCount -> b
    java.util.Comparator COMPARATOR -> c
    android.view.animation.Interpolator sInterpolator -> d
    java.util.ArrayList mItems -> e
    android.support.v4.view.ViewPager$ItemInfo mTempItem -> f
    android.graphics.Rect mTempRect -> g
    android.support.v4.view.PagerAdapter mAdapter -> h
    int mCurItem -> i
    int mRestoredCurItem -> j
    android.os.Parcelable mRestoredAdapterState -> k
    java.lang.ClassLoader mRestoredClassLoader -> l
    android.widget.Scroller mScroller -> m
    android.support.v4.view.ViewPager$PagerObserver mObserver -> n
    int mPageMargin -> o
    android.graphics.drawable.Drawable mMarginDrawable -> p
    int mTopPageBounds -> q
    int mBottomPageBounds -> r
    float mFirstOffset -> s
    float mLastOffset -> t
    int mChildWidthMeasureSpec -> u
    int mChildHeightMeasureSpec -> v
    boolean mInLayout -> w
    boolean mScrollingCacheEnabled -> x
    boolean mPopulatePending -> y
    int mOffscreenPageLimit -> z
    boolean mIsBeingDragged -> A
    boolean mIsUnableToDrag -> B
    int mDefaultGutterSize -> C
    int mGutterSize -> D
    int mTouchSlop -> E
    float mLastMotionX -> F
    float mLastMotionY -> G
    float mInitialMotionX -> H
    float mInitialMotionY -> I
    int mActivePointerId -> J
    android.view.VelocityTracker mVelocityTracker -> K
    int mMinimumVelocity -> L
    int mMaximumVelocity -> M
    int mFlingDistance -> N
    int mCloseEnough -> O
    boolean mFakeDragging -> P
    android.support.v4.widget.EdgeEffectCompat mLeftEdge -> Q
    android.support.v4.widget.EdgeEffectCompat mRightEdge -> R
    boolean mFirstLayout -> S
    boolean mNeedCalculatePageOffsets -> T
    boolean mCalledSuper -> U
    int mDecorChildCount -> V
    android.support.v4.view.ViewPager$OnPageChangeListener mOnPageChangeListener -> W
    android.support.v4.view.ViewPager$OnPageChangeListener mInternalPageChangeListener -> Z
    android.support.v4.view.ViewPager$OnAdapterChangeListener mAdapterChangeListener -> aa
    android.support.v4.view.ViewPager$PageTransformer mPageTransformer -> ab
    java.lang.reflect.Method mSetChildrenDrawingOrderEnabled -> ac
    int mDrawingOrder -> ad
    java.util.ArrayList mDrawingOrderedChildren -> ae
    android.support.v4.view.ViewPager$ViewPositionComparator sPositionComparator -> af
    java.lang.Runnable mEndScrollRunnable -> ag
    int mScrollState -> ah
    void initViewPager() -> a
    void onDetachedFromWindow() -> onDetachedFromWindow
    void setScrollState(int) -> setScrollState
    void setAdapter(android.support.v4.view.PagerAdapter) -> setAdapter
    void removeNonDecorViews() -> g
    android.support.v4.view.PagerAdapter getAdapter() -> getAdapter
    void setOnAdapterChangeListener(android.support.v4.view.ViewPager$OnAdapterChangeListener) -> setOnAdapterChangeListener
    int getClientWidth() -> getClientWidth
    void setCurrentItem(int) -> setCurrentItem
    void setCurrentItem(int,boolean) -> a
    int getCurrentItem() -> getCurrentItem
    void setCurrentItemInternal(int,boolean,boolean) -> a
    void setCurrentItemInternal(int,boolean,boolean,int) -> a
    void scrollToItem(int,boolean,int,boolean) -> a
    void setOnPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener) -> setOnPageChangeListener
    void setChildrenDrawingOrderEnabledCompat(boolean) -> setChildrenDrawingOrderEnabledCompat
    int getChildDrawingOrder(int,int) -> getChildDrawingOrder
    int getOffscreenPageLimit() -> getOffscreenPageLimit
    void setOffscreenPageLimit(int) -> setOffscreenPageLimit
    void setPageMargin(int) -> setPageMargin
    int getPageMargin() -> getPageMargin
    void setPageMarginDrawable(android.graphics.drawable.Drawable) -> setPageMarginDrawable
    void setPageMarginDrawable(int) -> setPageMarginDrawable
    boolean verifyDrawable(android.graphics.drawable.Drawable) -> verifyDrawable
    void drawableStateChanged() -> drawableStateChanged
    float distanceInfluenceForSnapDuration(float) -> a
    void smoothScrollTo(int,int,int) -> a
    android.support.v4.view.ViewPager$ItemInfo addNewItem(int,int) -> a
    void dataSetChanged() -> b
    void populate() -> c
    void populate(int) -> a
    void sortChildDrawingOrder() -> h
    void calculatePageOffsets(android.support.v4.view.ViewPager$ItemInfo,int,android.support.v4.view.ViewPager$ItemInfo) -> a
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void addView(android.view.View,int,android.view.ViewGroup$LayoutParams) -> addView
    void removeView(android.view.View) -> removeView
    android.support.v4.view.ViewPager$ItemInfo infoForChild(android.view.View) -> a
    android.support.v4.view.ViewPager$ItemInfo infoForAnyChild(android.view.View) -> b
    android.support.v4.view.ViewPager$ItemInfo infoForPosition(int) -> b
    void onAttachedToWindow() -> onAttachedToWindow
    void onMeasure(int,int) -> onMeasure
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void recomputeScrollPosition(int,int,int,int) -> a
    void onLayout(boolean,int,int,int,int) -> onLayout
    void computeScroll() -> computeScroll
    boolean pageScrolled(int) -> d
    void onPageScrolled(int,float,int) -> a
    void completeScroll(boolean) -> a
    boolean isGutterDrag(float,float) -> a
    void enableLayers(boolean) -> b
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean performDrag(float) -> b
    android.support.v4.view.ViewPager$ItemInfo infoForCurrentScrollPosition() -> i
    int determineTargetPage(int,float,int,int) -> a
    void draw(android.graphics.Canvas) -> draw
    void onDraw(android.graphics.Canvas) -> onDraw
    void onSecondaryPointerUp(android.view.MotionEvent) -> a
    void endDrag() -> j
    void setScrollingCacheEnabled(boolean) -> setScrollingCacheEnabled
    boolean canScrollHorizontally(int) -> canScrollHorizontally
    boolean canScroll(android.view.View,boolean,int,int,int) -> a
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
    boolean executeKeyEvent(android.view.KeyEvent) -> a
    boolean arrowScroll(int) -> c
    android.graphics.Rect getChildRectInPagerCoordinates(android.graphics.Rect,android.view.View) -> a
    boolean pageLeft() -> d
    boolean pageRight() -> e
    void addFocusables(java.util.ArrayList,int,int) -> addFocusables
    void addTouchables(java.util.ArrayList) -> addTouchables
    boolean onRequestFocusInDescendants(int,android.graphics.Rect) -> onRequestFocusInDescendants
    boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    void access$000(android.support.v4.view.ViewPager,int) -> a
    android.support.v4.view.PagerAdapter access$200(android.support.v4.view.ViewPager) -> a
    int access$300(android.support.v4.view.ViewPager) -> b
    int[] access$400() -> f
android.support.v4.view.ViewPager$1 -> android.support.v4.view.bv:
    int compare(android.support.v4.view.ViewPager$ItemInfo,android.support.v4.view.ViewPager$ItemInfo) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
android.support.v4.view.ViewPager$2 -> android.support.v4.view.bw:
    float getInterpolation(float) -> getInterpolation
android.support.v4.view.ViewPager$3 -> android.support.v4.view.bx:
    android.support.v4.view.ViewPager this$0 -> a
    void run() -> run
android.support.v4.view.ViewPager$Decor -> android.support.v4.view.by:
android.support.v4.view.ViewPager$ItemInfo -> android.support.v4.view.bz:
    java.lang.Object object -> a
    int position -> b
    boolean scrolling -> c
    float widthFactor -> d
    float offset -> e
android.support.v4.view.ViewPager$LayoutParams -> android.support.v4.view.ca:
    boolean isDecor -> a
    int gravity -> b
    float widthFactor -> c
    boolean needsMeasure -> d
    int position -> e
    int childIndex -> f
android.support.v4.view.ViewPager$MyAccessibilityDelegate -> android.support.v4.view.cb:
    android.support.v4.view.ViewPager this$0 -> b
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> d
    void onInitializeAccessibilityNodeInfo(android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> a
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle) -> a
    boolean canScroll() -> b
android.support.v4.view.ViewPager$OnAdapterChangeListener -> android.support.v4.view.cc:
    void onAdapterChanged(android.support.v4.view.PagerAdapter,android.support.v4.view.PagerAdapter) -> a
android.support.v4.view.ViewPager$OnPageChangeListener -> android.support.v4.view.cd:
    void onPageScrolled(int,float,int) -> a
    void onPageSelected(int) -> a
    void onPageScrollStateChanged(int) -> b
android.support.v4.view.ViewPager$PageTransformer -> android.support.v4.view.ce:
    void transformPage(android.view.View,float) -> a
android.support.v4.view.ViewPager$PagerObserver -> android.support.v4.view.cf:
    android.support.v4.view.ViewPager this$0 -> a
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
android.support.v4.view.ViewPager$SavedState -> android.support.v4.view.ViewPager$SavedState:
    int position -> a
    android.os.Parcelable adapterState -> b
    java.lang.ClassLoader loader -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
android.support.v4.view.ViewPager$SavedState$1 -> android.support.v4.view.cg:
    android.support.v4.view.ViewPager$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> b
    android.support.v4.view.ViewPager$SavedState[] newArray(int) -> b
    java.lang.Object[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> a
android.support.v4.view.ViewPager$SimpleOnPageChangeListener -> android.support.v4.view.ch:
    void onPageScrolled(int,float,int) -> a
    void onPageSelected(int) -> a
    void onPageScrollStateChanged(int) -> b
android.support.v4.view.ViewPager$ViewPositionComparator -> android.support.v4.view.ci:
    int compare(android.view.View,android.view.View) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
android.support.v4.view.accessibility.AccessibilityNodeInfoCompat -> android.support.v4.view.a.a:
    android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoImpl IMPL -> a
    java.lang.Object mInfo -> b
    android.support.v4.view.accessibility.AccessibilityNodeInfoCompat wrapNonNullInstance(java.lang.Object) -> a
    java.lang.Object getInfo() -> a
    android.support.v4.view.accessibility.AccessibilityNodeInfoCompat obtain(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> a
    void setSource(android.view.View) -> a
    void addChild(android.view.View) -> b
    int getActions() -> b
    void addAction(int) -> a
    void setParent(android.view.View) -> c
    void getBoundsInParent(android.graphics.Rect) -> a
    void setBoundsInParent(android.graphics.Rect) -> b
    void getBoundsInScreen(android.graphics.Rect) -> c
    void setBoundsInScreen(android.graphics.Rect) -> d
    boolean isCheckable() -> c
    boolean isChecked() -> d
    boolean isFocusable() -> e
    void setFocusable(boolean) -> a
    boolean isFocused() -> f
    void setFocused(boolean) -> b
    boolean isVisibleToUser() -> g
    void setVisibleToUser(boolean) -> c
    boolean isAccessibilityFocused() -> h
    void setAccessibilityFocused(boolean) -> d
    boolean isSelected() -> i
    void setSelected(boolean) -> e
    boolean isClickable() -> j
    void setClickable(boolean) -> f
    boolean isLongClickable() -> k
    void setLongClickable(boolean) -> g
    boolean isEnabled() -> l
    void setEnabled(boolean) -> h
    boolean isPassword() -> m
    boolean isScrollable() -> n
    void setScrollable(boolean) -> i
    java.lang.CharSequence getPackageName() -> o
    void setPackageName(java.lang.CharSequence) -> a
    java.lang.CharSequence getClassName() -> p
    void setClassName(java.lang.CharSequence) -> b
    java.lang.CharSequence getText() -> q
    java.lang.CharSequence getContentDescription() -> r
    void setContentDescription(java.lang.CharSequence) -> c
    void recycle() -> s
    java.lang.String getViewIdResourceName() -> t
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    java.lang.String getActionSymbolicName(int) -> b
android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoIcsImpl -> android.support.v4.view.a.b:
    java.lang.Object obtain(java.lang.Object) -> a
    void addAction(java.lang.Object,int) -> a
    void addChild(java.lang.Object,android.view.View) -> a
    int getActions(java.lang.Object) -> b
    void getBoundsInParent(java.lang.Object,android.graphics.Rect) -> a
    void getBoundsInScreen(java.lang.Object,android.graphics.Rect) -> b
    java.lang.CharSequence getClassName(java.lang.Object) -> c
    java.lang.CharSequence getContentDescription(java.lang.Object) -> d
    java.lang.CharSequence getPackageName(java.lang.Object) -> e
    java.lang.CharSequence getText(java.lang.Object) -> f
    boolean isCheckable(java.lang.Object) -> g
    boolean isChecked(java.lang.Object) -> h
    boolean isClickable(java.lang.Object) -> i
    boolean isEnabled(java.lang.Object) -> j
    boolean isFocusable(java.lang.Object) -> k
    boolean isFocused(java.lang.Object) -> l
    boolean isLongClickable(java.lang.Object) -> m
    boolean isPassword(java.lang.Object) -> n
    boolean isScrollable(java.lang.Object) -> o
    boolean isSelected(java.lang.Object) -> p
    void setBoundsInParent(java.lang.Object,android.graphics.Rect) -> c
    void setBoundsInScreen(java.lang.Object,android.graphics.Rect) -> d
    void setClassName(java.lang.Object,java.lang.CharSequence) -> a
    void setClickable(java.lang.Object,boolean) -> a
    void setContentDescription(java.lang.Object,java.lang.CharSequence) -> b
    void setEnabled(java.lang.Object,boolean) -> b
    void setFocusable(java.lang.Object,boolean) -> c
    void setFocused(java.lang.Object,boolean) -> d
    void setLongClickable(java.lang.Object,boolean) -> e
    void setPackageName(java.lang.Object,java.lang.CharSequence) -> c
    void setParent(java.lang.Object,android.view.View) -> b
    void setScrollable(java.lang.Object,boolean) -> f
    void setSelected(java.lang.Object,boolean) -> g
    void setSource(java.lang.Object,android.view.View) -> c
    void recycle(java.lang.Object) -> q
android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoImpl -> android.support.v4.view.a.c:
    java.lang.Object obtain(java.lang.Object) -> a
    void setSource(java.lang.Object,android.view.View) -> c
    void addChild(java.lang.Object,android.view.View) -> a
    int getActions(java.lang.Object) -> b
    void addAction(java.lang.Object,int) -> a
    void setParent(java.lang.Object,android.view.View) -> b
    void getBoundsInParent(java.lang.Object,android.graphics.Rect) -> a
    void setBoundsInParent(java.lang.Object,android.graphics.Rect) -> c
    void getBoundsInScreen(java.lang.Object,android.graphics.Rect) -> b
    void setBoundsInScreen(java.lang.Object,android.graphics.Rect) -> d
    boolean isCheckable(java.lang.Object) -> g
    boolean isChecked(java.lang.Object) -> h
    boolean isFocusable(java.lang.Object) -> k
    void setFocusable(java.lang.Object,boolean) -> c
    boolean isFocused(java.lang.Object) -> l
    void setFocused(java.lang.Object,boolean) -> d
    boolean isVisibleToUser(java.lang.Object) -> r
    void setVisibleToUser(java.lang.Object,boolean) -> h
    boolean isAccessibilityFocused(java.lang.Object) -> s
    void setAccessibilityFocused(java.lang.Object,boolean) -> i
    boolean isSelected(java.lang.Object) -> p
    void setSelected(java.lang.Object,boolean) -> g
    boolean isClickable(java.lang.Object) -> i
    void setClickable(java.lang.Object,boolean) -> a
    boolean isLongClickable(java.lang.Object) -> m
    void setLongClickable(java.lang.Object,boolean) -> e
    boolean isEnabled(java.lang.Object) -> j
    void setEnabled(java.lang.Object,boolean) -> b
    boolean isPassword(java.lang.Object) -> n
    boolean isScrollable(java.lang.Object) -> o
    void setScrollable(java.lang.Object,boolean) -> f
    java.lang.CharSequence getPackageName(java.lang.Object) -> e
    void setPackageName(java.lang.Object,java.lang.CharSequence) -> c
    java.lang.CharSequence getClassName(java.lang.Object) -> c
    void setClassName(java.lang.Object,java.lang.CharSequence) -> a
    java.lang.CharSequence getText(java.lang.Object) -> f
    java.lang.CharSequence getContentDescription(java.lang.Object) -> d
    void setContentDescription(java.lang.Object,java.lang.CharSequence) -> b
    void recycle(java.lang.Object) -> q
    java.lang.String getViewIdResourceName(java.lang.Object) -> t
android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoJellybeanImpl -> android.support.v4.view.a.d:
    boolean isVisibleToUser(java.lang.Object) -> r
    void setVisibleToUser(java.lang.Object,boolean) -> h
    boolean isAccessibilityFocused(java.lang.Object) -> s
    void setAccessibilityFocused(java.lang.Object,boolean) -> i
android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoJellybeanMr2Impl -> android.support.v4.view.a.e:
    java.lang.String getViewIdResourceName(java.lang.Object) -> t
android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoStubImpl -> android.support.v4.view.a.f:
    java.lang.Object obtain(java.lang.Object) -> a
    void addAction(java.lang.Object,int) -> a
    void addChild(java.lang.Object,android.view.View) -> a
    int getActions(java.lang.Object) -> b
    void getBoundsInParent(java.lang.Object,android.graphics.Rect) -> a
    void getBoundsInScreen(java.lang.Object,android.graphics.Rect) -> b
    java.lang.CharSequence getClassName(java.lang.Object) -> c
    java.lang.CharSequence getContentDescription(java.lang.Object) -> d
    java.lang.CharSequence getPackageName(java.lang.Object) -> e
    java.lang.CharSequence getText(java.lang.Object) -> f
    boolean isCheckable(java.lang.Object) -> g
    boolean isChecked(java.lang.Object) -> h
    boolean isClickable(java.lang.Object) -> i
    boolean isEnabled(java.lang.Object) -> j
    boolean isFocusable(java.lang.Object) -> k
    boolean isFocused(java.lang.Object) -> l
    boolean isVisibleToUser(java.lang.Object) -> r
    boolean isAccessibilityFocused(java.lang.Object) -> s
    boolean isLongClickable(java.lang.Object) -> m
    boolean isPassword(java.lang.Object) -> n
    boolean isScrollable(java.lang.Object) -> o
    boolean isSelected(java.lang.Object) -> p
    void setBoundsInParent(java.lang.Object,android.graphics.Rect) -> c
    void setBoundsInScreen(java.lang.Object,android.graphics.Rect) -> d
    void setClassName(java.lang.Object,java.lang.CharSequence) -> a
    void setClickable(java.lang.Object,boolean) -> a
    void setContentDescription(java.lang.Object,java.lang.CharSequence) -> b
    void setEnabled(java.lang.Object,boolean) -> b
    void setFocusable(java.lang.Object,boolean) -> c
    void setFocused(java.lang.Object,boolean) -> d
    void setVisibleToUser(java.lang.Object,boolean) -> h
    void setAccessibilityFocused(java.lang.Object,boolean) -> i
    void setLongClickable(java.lang.Object,boolean) -> e
    void setPackageName(java.lang.Object,java.lang.CharSequence) -> c
    void setParent(java.lang.Object,android.view.View) -> b
    void setScrollable(java.lang.Object,boolean) -> f
    void setSelected(java.lang.Object,boolean) -> g
    void setSource(java.lang.Object,android.view.View) -> c
    void recycle(java.lang.Object) -> q
    java.lang.String getViewIdResourceName(java.lang.Object) -> t
android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs -> android.support.v4.view.a.g:
    java.lang.Object obtain(java.lang.Object) -> a
    void addAction(java.lang.Object,int) -> a
    void addChild(java.lang.Object,android.view.View) -> a
    int getActions(java.lang.Object) -> b
    void getBoundsInParent(java.lang.Object,android.graphics.Rect) -> a
    void getBoundsInScreen(java.lang.Object,android.graphics.Rect) -> b
    java.lang.CharSequence getClassName(java.lang.Object) -> c
    java.lang.CharSequence getContentDescription(java.lang.Object) -> d
    java.lang.CharSequence getPackageName(java.lang.Object) -> e
    java.lang.CharSequence getText(java.lang.Object) -> f
    boolean isCheckable(java.lang.Object) -> g
    boolean isChecked(java.lang.Object) -> h
    boolean isClickable(java.lang.Object) -> i
    boolean isEnabled(java.lang.Object) -> j
    boolean isFocusable(java.lang.Object) -> k
    boolean isFocused(java.lang.Object) -> l
    boolean isLongClickable(java.lang.Object) -> m
    boolean isPassword(java.lang.Object) -> n
    boolean isScrollable(java.lang.Object) -> o
    boolean isSelected(java.lang.Object) -> p
    void setBoundsInParent(java.lang.Object,android.graphics.Rect) -> c
    void setBoundsInScreen(java.lang.Object,android.graphics.Rect) -> d
    void setClassName(java.lang.Object,java.lang.CharSequence) -> a
    void setClickable(java.lang.Object,boolean) -> a
    void setContentDescription(java.lang.Object,java.lang.CharSequence) -> b
    void setEnabled(java.lang.Object,boolean) -> b
    void setFocusable(java.lang.Object,boolean) -> c
    void setFocused(java.lang.Object,boolean) -> d
    void setLongClickable(java.lang.Object,boolean) -> e
    void setPackageName(java.lang.Object,java.lang.CharSequence) -> c
    void setParent(java.lang.Object,android.view.View) -> b
    void setScrollable(java.lang.Object,boolean) -> f
    void setSelected(java.lang.Object,boolean) -> g
    void setSource(java.lang.Object,android.view.View) -> c
    void recycle(java.lang.Object) -> q
android.support.v4.view.accessibility.AccessibilityNodeInfoCompatJellyBean -> android.support.v4.view.a.h:
    boolean isVisibleToUser(java.lang.Object) -> a
    void setVisibleToUser(java.lang.Object,boolean) -> a
    boolean isAccessibilityFocused(java.lang.Object) -> b
    void setAccesibilityFocused(java.lang.Object,boolean) -> b
android.support.v4.view.accessibility.AccessibilityNodeInfoCompatJellybeanMr2 -> android.support.v4.view.a.i:
    java.lang.String getViewIdResourceName(java.lang.Object) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat -> android.support.v4.view.a.j:
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderImpl IMPL -> a
    java.lang.Object mProvider -> b
    java.lang.Object getProvider() -> a
    android.support.v4.view.accessibility.AccessibilityNodeInfoCompat createAccessibilityNodeInfo(int) -> a
    boolean performAction(int,int,android.os.Bundle) -> a
    java.util.List findAccessibilityNodeInfosByText(java.lang.String,int) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderImpl -> android.support.v4.view.a.k:
    java.lang.Object newAccessibilityNodeProviderBridge(android.support.v4.view.accessibility.AccessibilityNodeProviderCompat) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderJellyBeanImpl -> android.support.v4.view.a.l:
    java.lang.Object newAccessibilityNodeProviderBridge(android.support.v4.view.accessibility.AccessibilityNodeProviderCompat) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderJellyBeanImpl$1 -> android.support.v4.view.a.m:
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat val$compat -> a
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderJellyBeanImpl this$0 -> b
    boolean performAction(int,int,android.os.Bundle) -> a
    java.util.List findAccessibilityNodeInfosByText(java.lang.String,int) -> a
    java.lang.Object createAccessibilityNodeInfo(int) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderStubImpl -> android.support.v4.view.a.n:
    java.lang.Object newAccessibilityNodeProviderBridge(android.support.v4.view.accessibility.AccessibilityNodeProviderCompat) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean -> android.support.v4.view.a.o:
    java.lang.Object newAccessibilityNodeProviderBridge(android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$AccessibilityNodeInfoBridge) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$1 -> android.support.v4.view.a.p:
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$AccessibilityNodeInfoBridge val$bridge -> a
    android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int) -> createAccessibilityNodeInfo
    java.util.List findAccessibilityNodeInfosByText(java.lang.String,int) -> findAccessibilityNodeInfosByText
    boolean performAction(int,int,android.os.Bundle) -> performAction
android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$AccessibilityNodeInfoBridge -> android.support.v4.view.a.q:
    java.lang.Object createAccessibilityNodeInfo(int) -> a
    boolean performAction(int,int,android.os.Bundle) -> a
    java.util.List findAccessibilityNodeInfosByText(java.lang.String,int) -> a
android.support.v4.view.accessibility.AccessibilityRecordCompat -> android.support.v4.view.a.r:
    android.support.v4.view.accessibility.AccessibilityRecordCompat$AccessibilityRecordImpl IMPL -> a
    java.lang.Object mRecord -> b
    android.support.v4.view.accessibility.AccessibilityRecordCompat obtain() -> a
    void setScrollable(boolean) -> a
    void setItemCount(int) -> a
    void setFromIndex(int) -> b
    void setToIndex(int) -> c
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
android.support.v4.view.accessibility.AccessibilityRecordCompat$AccessibilityRecordIcsImpl -> android.support.v4.view.a.s:
    java.lang.Object obtain() -> a
    void setFromIndex(java.lang.Object,int) -> a
    void setItemCount(java.lang.Object,int) -> b
    void setScrollable(java.lang.Object,boolean) -> a
    void setToIndex(java.lang.Object,int) -> c
android.support.v4.view.accessibility.AccessibilityRecordCompat$AccessibilityRecordIcsMr1Impl -> android.support.v4.view.a.t:
android.support.v4.view.accessibility.AccessibilityRecordCompat$AccessibilityRecordImpl -> android.support.v4.view.a.u:
    java.lang.Object obtain() -> a
    void setScrollable(java.lang.Object,boolean) -> a
    void setItemCount(java.lang.Object,int) -> b
    void setFromIndex(java.lang.Object,int) -> a
    void setToIndex(java.lang.Object,int) -> c
android.support.v4.view.accessibility.AccessibilityRecordCompat$AccessibilityRecordJellyBeanImpl -> android.support.v4.view.a.v:
android.support.v4.view.accessibility.AccessibilityRecordCompat$AccessibilityRecordStubImpl -> android.support.v4.view.a.w:
    java.lang.Object obtain() -> a
    void setFromIndex(java.lang.Object,int) -> a
    void setItemCount(java.lang.Object,int) -> b
    void setScrollable(java.lang.Object,boolean) -> a
    void setToIndex(java.lang.Object,int) -> c
android.support.v4.view.accessibility.AccessibilityRecordCompatIcs -> android.support.v4.view.a.x:
    java.lang.Object obtain() -> a
    void setFromIndex(java.lang.Object,int) -> a
    void setItemCount(java.lang.Object,int) -> b
    void setScrollable(java.lang.Object,boolean) -> a
    void setToIndex(java.lang.Object,int) -> c
android.support.v4.widget.CursorAdapter -> android.support.v4.widget.a:
    boolean mDataValid -> a
    boolean mAutoRequery -> b
    android.database.Cursor mCursor -> c
    android.content.Context mContext -> d
    int mRowIDColumn -> e
    android.support.v4.widget.CursorAdapter$ChangeObserver mChangeObserver -> f
    android.database.DataSetObserver mDataSetObserver -> g
    android.support.v4.widget.CursorFilter mCursorFilter -> h
    android.widget.FilterQueryProvider mFilterQueryProvider -> i
    void init(android.content.Context,android.database.Cursor,int) -> a
    android.database.Cursor getCursor() -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    boolean hasStableIds() -> hasStableIds
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup) -> getDropDownView
    android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> a
    android.view.View newDropDownView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> b
    void bindView(android.view.View,android.content.Context,android.database.Cursor) -> a
    void changeCursor(android.database.Cursor) -> a
    android.database.Cursor swapCursor(android.database.Cursor) -> b
    java.lang.CharSequence convertToString(android.database.Cursor) -> c
    android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence) -> a
    android.widget.Filter getFilter() -> getFilter
    void onContentChanged() -> b
android.support.v4.widget.CursorAdapter$1 -> android.support.v4.widget.b:
android.support.v4.widget.CursorAdapter$ChangeObserver -> android.support.v4.widget.c:
    android.support.v4.widget.CursorAdapter this$0 -> a
    boolean deliverSelfNotifications() -> deliverSelfNotifications
    void onChange(boolean) -> onChange
android.support.v4.widget.CursorAdapter$MyDataSetObserver -> android.support.v4.widget.d:
    android.support.v4.widget.CursorAdapter this$0 -> a
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
android.support.v4.widget.CursorFilter -> android.support.v4.widget.e:
    android.support.v4.widget.CursorFilter$CursorFilterClient mClient -> a
    java.lang.CharSequence convertResultToString(java.lang.Object) -> convertResultToString
    android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence) -> performFiltering
    void publishResults(java.lang.CharSequence,android.widget.Filter$FilterResults) -> publishResults
android.support.v4.widget.CursorFilter$CursorFilterClient -> android.support.v4.widget.f:
    java.lang.CharSequence convertToString(android.database.Cursor) -> c
    android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence) -> a
    android.database.Cursor getCursor() -> a
    void changeCursor(android.database.Cursor) -> a
android.support.v4.widget.DrawerLayout -> android.support.v4.widget.DrawerLayout:
    int[] LAYOUT_ATTRS -> a
    int mMinDrawerMargin -> b
    int mScrimColor -> c
    float mScrimOpacity -> d
    android.graphics.Paint mScrimPaint -> e
    android.support.v4.widget.ViewDragHelper mLeftDragger -> f
    android.support.v4.widget.ViewDragHelper mRightDragger -> g
    android.support.v4.widget.DrawerLayout$ViewDragCallback mLeftCallback -> h
    android.support.v4.widget.DrawerLayout$ViewDragCallback mRightCallback -> i
    int mDrawerState -> j
    boolean mInLayout -> k
    boolean mFirstLayout -> l
    int mLockModeLeft -> m
    int mLockModeRight -> n
    boolean mDisallowInterceptRequested -> o
    boolean mChildrenCanceledTouch -> p
    android.support.v4.widget.DrawerLayout$DrawerListener mListener -> q
    float mInitialMotionX -> r
    float mInitialMotionY -> s
    android.graphics.drawable.Drawable mShadowLeft -> t
    android.graphics.drawable.Drawable mShadowRight -> u
    void setDrawerShadow(android.graphics.drawable.Drawable,int) -> a
    void setDrawerShadow(int,int) -> a
    void setScrimColor(int) -> setScrimColor
    void setDrawerListener(android.support.v4.widget.DrawerLayout$DrawerListener) -> setDrawerListener
    void setDrawerLockMode(int) -> setDrawerLockMode
    void setDrawerLockMode(int,int) -> b
    int getDrawerLockMode(android.view.View) -> a
    void updateDrawerState(int,int,android.view.View) -> a
    void dispatchOnDrawerClosed(android.view.View) -> b
    void dispatchOnDrawerOpened(android.view.View) -> c
    void dispatchOnDrawerSlide(android.view.View,float) -> a
    void setDrawerViewOffset(android.view.View,float) -> b
    float getDrawerViewOffset(android.view.View) -> d
    int getDrawerViewGravity(android.view.View) -> e
    boolean checkDrawerViewGravity(android.view.View,int) -> a
    android.view.View findOpenDrawer() -> a
    android.view.View findDrawerWithGravity(int) -> a
    java.lang.String gravityToString(int) -> b
    void onDetachedFromWindow() -> onDetachedFromWindow
    void onAttachedToWindow() -> onAttachedToWindow
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    void requestLayout() -> requestLayout
    void computeScroll() -> computeScroll
    boolean hasOpaqueBackground(android.view.View) -> l
    boolean drawChild(android.graphics.Canvas,android.view.View,long) -> drawChild
    boolean isContentView(android.view.View) -> f
    boolean isDrawerView(android.view.View) -> g
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void requestDisallowInterceptTouchEvent(boolean) -> requestDisallowInterceptTouchEvent
    void closeDrawers() -> b
    void closeDrawers(boolean) -> a
    void openDrawer(android.view.View) -> h
    void openDrawer(int) -> c
    void closeDrawer(android.view.View) -> i
    void closeDrawer(int) -> d
    boolean isDrawerOpen(android.view.View) -> j
    boolean isDrawerOpen(int) -> e
    boolean isDrawerVisible(android.view.View) -> k
    boolean isDrawerVisible(int) -> f
    boolean hasPeekingDrawer() -> e
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    boolean hasVisibleDrawer() -> f
    android.view.View findVisibleDrawer() -> g
    void cancelChildViewTouch() -> c
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    int[] access$100() -> d
android.support.v4.widget.DrawerLayout$AccessibilityDelegate -> android.support.v4.widget.g:
    android.graphics.Rect mTmpRect -> c
    android.support.v4.widget.DrawerLayout this$0 -> b
    void onInitializeAccessibilityNodeInfo(android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> a
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    boolean filter(android.view.View) -> b
    void copyNodeInfoNoChildren(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> a
android.support.v4.widget.DrawerLayout$DrawerListener -> android.support.v4.widget.h:
    void onDrawerSlide(android.view.View,float) -> a
    void onDrawerOpened(android.view.View) -> a
    void onDrawerClosed(android.view.View) -> b
    void onDrawerStateChanged(int) -> a
android.support.v4.widget.DrawerLayout$LayoutParams -> android.support.v4.widget.i:
    int gravity -> a
    float onScreen -> b
    boolean isPeeking -> c
    boolean knownOpen -> d
android.support.v4.widget.DrawerLayout$SavedState -> android.support.v4.widget.DrawerLayout$SavedState:
    int openDrawerGravity -> a
    int lockModeLeft -> b
    int lockModeRight -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.widget.DrawerLayout$SavedState$1 -> android.support.v4.widget.j:
    android.support.v4.widget.DrawerLayout$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.widget.DrawerLayout$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.widget.DrawerLayout$ViewDragCallback -> android.support.v4.widget.k:
    int mGravity -> b
    android.support.v4.widget.ViewDragHelper mDragger -> c
    java.lang.Runnable mPeekRunnable -> d
    android.support.v4.widget.DrawerLayout this$0 -> a
    void setDragger(android.support.v4.widget.ViewDragHelper) -> a
    void removeCallbacks() -> a
    boolean tryCaptureView(android.view.View,int) -> a
    void onViewDragStateChanged(int) -> a
    void onViewPositionChanged(android.view.View,int,int,int,int) -> a
    void onViewCaptured(android.view.View,int) -> b
    void closeOtherDrawer() -> b
    void onViewReleased(android.view.View,float,float) -> a
    void onEdgeTouched(int,int) -> a
    void peekDrawer() -> c
    boolean onEdgeLock(int) -> b
    void onEdgeDragStarted(int,int) -> b
    int getViewHorizontalDragRange(android.view.View) -> a
    int clampViewPositionHorizontal(android.view.View,int,int) -> a
    int clampViewPositionVertical(android.view.View,int,int) -> b
    void access$000(android.support.v4.widget.DrawerLayout$ViewDragCallback) -> a
android.support.v4.widget.DrawerLayout$ViewDragCallback$1 -> android.support.v4.widget.l:
    android.support.v4.widget.DrawerLayout$ViewDragCallback this$1 -> a
    void run() -> run
android.support.v4.widget.EdgeEffectCompat -> android.support.v4.widget.m:
    java.lang.Object mEdgeEffect -> a
    android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl IMPL -> b
    void setSize(int,int) -> a
    boolean isFinished() -> a
    void finish() -> b
    boolean onPull(float) -> a
    boolean onRelease() -> c
    boolean draw(android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$BaseEdgeEffectImpl -> android.support.v4.widget.n:
    java.lang.Object newEdgeEffect(android.content.Context) -> a
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectIcsImpl -> android.support.v4.widget.o:
    java.lang.Object newEdgeEffect(android.content.Context) -> a
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl -> android.support.v4.widget.p:
    java.lang.Object newEdgeEffect(android.content.Context) -> a
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompatIcs -> android.support.v4.widget.q:
    java.lang.Object newEdgeEffect(android.content.Context) -> a
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.ResourceCursorAdapter -> android.support.v4.widget.r:
    int mLayout -> j
    int mDropDownLayout -> k
    android.view.LayoutInflater mInflater -> l
    android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> a
    android.view.View newDropDownView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> b
android.support.v4.widget.ScrollerCompat -> android.support.v4.widget.s:
    java.lang.Object mScroller -> a
    android.support.v4.widget.ScrollerCompat$ScrollerCompatImpl IMPL -> b
    android.support.v4.widget.ScrollerCompat create(android.content.Context,android.view.animation.Interpolator) -> a
    boolean isFinished() -> a
    int getCurrX() -> b
    int getCurrY() -> c
    int getFinalX() -> d
    int getFinalY() -> e
    boolean computeScrollOffset() -> f
    void startScroll(int,int,int,int,int) -> a
    void abortAnimation() -> g
android.support.v4.widget.ScrollerCompat$ScrollerCompatImpl -> android.support.v4.widget.t:
    java.lang.Object createScroller(android.content.Context,android.view.animation.Interpolator) -> a
    boolean isFinished(java.lang.Object) -> a
    int getCurrX(java.lang.Object) -> b
    int getCurrY(java.lang.Object) -> c
    boolean computeScrollOffset(java.lang.Object) -> d
    void startScroll(java.lang.Object,int,int,int,int,int) -> a
    void abortAnimation(java.lang.Object) -> e
    int getFinalX(java.lang.Object) -> f
    int getFinalY(java.lang.Object) -> g
android.support.v4.widget.ScrollerCompat$ScrollerCompatImplBase -> android.support.v4.widget.u:
    java.lang.Object createScroller(android.content.Context,android.view.animation.Interpolator) -> a
    boolean isFinished(java.lang.Object) -> a
    int getCurrX(java.lang.Object) -> b
    int getCurrY(java.lang.Object) -> c
    boolean computeScrollOffset(java.lang.Object) -> d
    void startScroll(java.lang.Object,int,int,int,int,int) -> a
    void abortAnimation(java.lang.Object) -> e
    int getFinalX(java.lang.Object) -> f
    int getFinalY(java.lang.Object) -> g
android.support.v4.widget.ScrollerCompat$ScrollerCompatImplGingerbread -> android.support.v4.widget.v:
    java.lang.Object createScroller(android.content.Context,android.view.animation.Interpolator) -> a
    boolean isFinished(java.lang.Object) -> a
    int getCurrX(java.lang.Object) -> b
    int getCurrY(java.lang.Object) -> c
    boolean computeScrollOffset(java.lang.Object) -> d
    void startScroll(java.lang.Object,int,int,int,int,int) -> a
    void abortAnimation(java.lang.Object) -> e
    int getFinalX(java.lang.Object) -> f
    int getFinalY(java.lang.Object) -> g
android.support.v4.widget.ScrollerCompat$ScrollerCompatImplIcs -> android.support.v4.widget.w:
android.support.v4.widget.ScrollerCompatGingerbread -> android.support.v4.widget.x:
    java.lang.Object createScroller(android.content.Context,android.view.animation.Interpolator) -> a
    boolean isFinished(java.lang.Object) -> a
    int getCurrX(java.lang.Object) -> b
    int getCurrY(java.lang.Object) -> c
    boolean computeScrollOffset(java.lang.Object) -> d
    void startScroll(java.lang.Object,int,int,int,int,int) -> a
    void abortAnimation(java.lang.Object) -> e
    int getFinalX(java.lang.Object) -> f
    int getFinalY(java.lang.Object) -> g
android.support.v4.widget.SlidingPaneLayout -> android.support.v4.widget.SlidingPaneLayout:
    int mSliderFadeColor -> b
    int mCoveredFadeColor -> c
    android.graphics.drawable.Drawable mShadowDrawable -> d
    int mOverhangSize -> e
    boolean mCanSlide -> f
    android.view.View mSlideableView -> g
    float mSlideOffset -> h
    float mParallaxOffset -> i
    int mSlideRange -> j
    boolean mIsUnableToDrag -> k
    int mParallaxBy -> l
    float mInitialMotionX -> m
    float mInitialMotionY -> n
    android.support.v4.widget.SlidingPaneLayout$PanelSlideListener mPanelSlideListener -> o
    android.support.v4.widget.ViewDragHelper mDragHelper -> p
    boolean mPreservedOpenState -> q
    boolean mFirstLayout -> r
    android.graphics.Rect mTmpRect -> s
    java.util.ArrayList mPostedRunnables -> t
    android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImpl IMPL -> a
    void setParallaxDistance(int) -> setParallaxDistance
    int getParallaxDistance() -> getParallaxDistance
    void setSliderFadeColor(int) -> setSliderFadeColor
    int getSliderFadeColor() -> getSliderFadeColor
    void setCoveredFadeColor(int) -> setCoveredFadeColor
    int getCoveredFadeColor() -> getCoveredFadeColor
    void setPanelSlideListener(android.support.v4.widget.SlidingPaneLayout$PanelSlideListener) -> setPanelSlideListener
    void updateObscuredViewsVisibility(android.view.View) -> a
    void setAllChildrenVisible() -> a
    boolean viewIsOpaque(android.view.View) -> c
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void requestChildFocus(android.view.View,android.view.View) -> requestChildFocus
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean closePane(android.view.View,int) -> a
    boolean openPane(android.view.View,int) -> b
    boolean openPane() -> b
    boolean closePane() -> c
    boolean isOpen() -> d
    boolean isSlideable() -> e
    void dimChildView(android.view.View,float,int) -> a
    boolean drawChild(android.graphics.Canvas,android.view.View,long) -> drawChild
    void invalidateChildRegion(android.view.View) -> d
    boolean smoothSlideTo(float,int) -> a
    void computeScroll() -> computeScroll
    void setShadowDrawable(android.graphics.drawable.Drawable) -> setShadowDrawable
    void setShadowResource(int) -> setShadowResource
    void draw(android.graphics.Canvas) -> draw
    void parallaxOtherViews(float) -> a
    boolean isDimmed(android.view.View) -> b
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void access$900(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
    java.util.ArrayList access$1000(android.support.v4.widget.SlidingPaneLayout) -> a
android.support.v4.widget.SlidingPaneLayout$1 -> android.support.v4.widget.y:
android.support.v4.widget.SlidingPaneLayout$DisableLayerRunnable -> android.support.v4.widget.z:
    android.view.View mChildView -> a
    android.support.v4.widget.SlidingPaneLayout this$0 -> b
    void run() -> run
android.support.v4.widget.SlidingPaneLayout$LayoutParams -> android.support.v4.widget.aa:
    int[] ATTRS -> e
    float weight -> a
    boolean slideable -> b
    boolean dimWhenOffset -> c
    android.graphics.Paint dimPaint -> d
android.support.v4.widget.SlidingPaneLayout$PanelSlideListener -> android.support.v4.widget.ab:
android.support.v4.widget.SlidingPaneLayout$SavedState -> android.support.v4.widget.SlidingPaneLayout$SavedState:
    boolean isOpen -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.widget.SlidingPaneLayout$SavedState$1 -> android.support.v4.widget.ac:
    android.support.v4.widget.SlidingPaneLayout$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.widget.SlidingPaneLayout$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImpl -> android.support.v4.widget.ad:
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImplBase -> android.support.v4.widget.ae:
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImplJB -> android.support.v4.widget.af:
    java.lang.reflect.Method mGetDisplayList -> a
    java.lang.reflect.Field mRecreateDisplayList -> b
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImplJBMR1 -> android.support.v4.widget.ag:
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.ViewDragHelper -> android.support.v4.widget.ah:
    int mDragState -> a
    int mTouchSlop -> b
    int mActivePointerId -> c
    float[] mInitialMotionX -> d
    float[] mInitialMotionY -> e
    float[] mLastMotionX -> f
    float[] mLastMotionY -> g
    int[] mInitialEdgesTouched -> h
    int[] mEdgeDragsInProgress -> i
    int[] mEdgeDragsLocked -> j
    int mPointersDown -> k
    android.view.VelocityTracker mVelocityTracker -> l
    float mMaxVelocity -> m
    float mMinVelocity -> n
    int mEdgeSize -> o
    int mTrackingEdges -> p
    android.support.v4.widget.ScrollerCompat mScroller -> q
    android.support.v4.widget.ViewDragHelper$Callback mCallback -> r
    android.view.View mCapturedView -> s
    boolean mReleaseInProgress -> t
    android.view.ViewGroup mParentView -> u
    android.view.animation.Interpolator sInterpolator -> v
    java.lang.Runnable mSetIdleRunnable -> w
    android.support.v4.widget.ViewDragHelper create(android.view.ViewGroup,android.support.v4.widget.ViewDragHelper$Callback) -> a
    android.support.v4.widget.ViewDragHelper create(android.view.ViewGroup,float,android.support.v4.widget.ViewDragHelper$Callback) -> a
    void setMinVelocity(float) -> a
    int getViewDragState() -> a
    void setEdgeTrackingEnabled(int) -> a
    int getEdgeSize() -> b
    void captureChildView(android.view.View,int) -> a
    android.view.View getCapturedView() -> c
    int getTouchSlop() -> d
    void cancel() -> e
    void abort() -> f
    boolean smoothSlideViewTo(android.view.View,int,int) -> a
    boolean settleCapturedViewAt(int,int) -> a
    boolean forceSettleCapturedViewAt(int,int,int,int) -> a
    int computeSettleDuration(android.view.View,int,int,int,int) -> a
    int computeAxisDuration(int,int,int) -> a
    int clampMag(int,int,int) -> b
    float clampMag(float,float,float) -> a
    float distanceInfluenceForSnapDuration(float) -> b
    boolean continueSettling(boolean) -> a
    void dispatchViewReleased(float,float) -> a
    void clearMotionHistory() -> g
    void clearMotionHistory(int) -> e
    void ensureMotionHistorySizeForId(int) -> f
    void saveInitialMotion(float,float,int) -> a
    void saveLastMotion(android.view.MotionEvent) -> c
    boolean isPointerDown(int) -> b
    void setDragState(int) -> c
    boolean tryCaptureViewForDrag(android.view.View,int) -> b
    boolean shouldInterceptTouchEvent(android.view.MotionEvent) -> a
    void processTouchEvent(android.view.MotionEvent) -> b
    void reportNewEdgeDrags(float,float,int) -> b
    boolean checkNewEdgeDrag(float,float,int,int) -> a
    boolean checkTouchSlop(android.view.View,float,float) -> a
    boolean checkTouchSlop(int) -> d
    boolean checkTouchSlop(int,int) -> b
    void releaseViewForPointerUp() -> h
    void dragTo(int,int,int,int) -> b
    boolean isCapturedViewUnder(int,int) -> c
    boolean isViewUnder(android.view.View,int,int) -> b
    android.view.View findTopChildUnder(int,int) -> d
    int getEdgesTouched(int,int) -> e
android.support.v4.widget.ViewDragHelper$1 -> android.support.v4.widget.ai:
    float getInterpolation(float) -> getInterpolation
android.support.v4.widget.ViewDragHelper$2 -> android.support.v4.widget.aj:
    android.support.v4.widget.ViewDragHelper this$0 -> a
    void run() -> run
android.support.v4.widget.ViewDragHelper$Callback -> android.support.v4.widget.ak:
    void onViewDragStateChanged(int) -> a
    void onViewPositionChanged(android.view.View,int,int,int,int) -> a
    void onViewCaptured(android.view.View,int) -> b
    void onViewReleased(android.view.View,float,float) -> a
    void onEdgeTouched(int,int) -> a
    boolean onEdgeLock(int) -> b
    void onEdgeDragStarted(int,int) -> b
    int getOrderedChildIndex(int) -> c
    int getViewHorizontalDragRange(android.view.View) -> a
    int getViewVerticalDragRange(android.view.View) -> b
    boolean tryCaptureView(android.view.View,int) -> a
    int clampViewPositionHorizontal(android.view.View,int,int) -> a
    int clampViewPositionVertical(android.view.View,int,int) -> b
android.support.v7.app.ActionBar -> android.support.v7.a.a:
    void setSelectedNavigationItem(int) -> a
    void setTitle(java.lang.CharSequence) -> a
    void setDisplayHomeAsUpEnabled(boolean) -> a
    void setDisplayShowTitleEnabled(boolean) -> b
    void setNavigationMode(int) -> b
    int getDisplayOptions() -> a
    android.support.v7.app.ActionBar$Tab newTab() -> b
    void addTab(android.support.v7.app.ActionBar$Tab,boolean) -> a
    void setHomeButtonEnabled(boolean) -> c
    android.content.Context getThemedContext() -> c
android.support.v7.app.ActionBar$Callback -> android.support.v7.a.b:
    android.support.v4.app.FragmentManager getSupportFragmentManager() -> f
android.support.v7.app.ActionBar$LayoutParams -> android.support.v7.a.c:
    int gravity -> a
android.support.v7.app.ActionBar$OnNavigationListener -> android.support.v7.a.d:
    boolean onNavigationItemSelected(int,long) -> a
android.support.v7.app.ActionBar$Tab -> android.support.v7.a.e:
    int getPosition() -> a
    android.graphics.drawable.Drawable getIcon() -> b
    java.lang.CharSequence getText() -> c
    android.support.v7.app.ActionBar$Tab setText(int) -> a
    android.view.View getCustomView() -> d
    android.support.v7.app.ActionBar$Tab setTabListener(android.support.v7.app.ActionBar$TabListener) -> a
    void select() -> e
    java.lang.CharSequence getContentDescription() -> f
android.support.v7.app.ActionBar$TabListener -> android.support.v7.a.f:
    void onTabSelected(android.support.v7.app.ActionBar$Tab,android.support.v4.app.FragmentTransaction) -> a
    void onTabUnselected(android.support.v7.app.ActionBar$Tab,android.support.v4.app.FragmentTransaction) -> b
    void onTabReselected(android.support.v7.app.ActionBar$Tab,android.support.v4.app.FragmentTransaction) -> c
android.support.v7.app.ActionBarActivity -> android.support.v7.a.g:
    android.support.v7.app.ActionBarActivityDelegate mImpl -> n
    android.support.v7.app.ActionBar getSupportActionBar() -> g
    android.view.MenuInflater getMenuInflater() -> getMenuInflater
    void setContentView(int) -> setContentView
    void setContentView(android.view.View) -> setContentView
    void setContentView(android.view.View,android.view.ViewGroup$LayoutParams) -> setContentView
    void addContentView(android.view.View,android.view.ViewGroup$LayoutParams) -> addContentView
    void onCreate(android.os.Bundle) -> onCreate
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onStop() -> onStop
    void onPostResume() -> onPostResume
    android.view.View onCreatePanelView(int) -> onCreatePanelView
    boolean onMenuItemSelected(int,android.view.MenuItem) -> onMenuItemSelected
    void onTitleChanged(java.lang.CharSequence,int) -> onTitleChanged
    void supportInvalidateOptionsMenu() -> d
    void onSupportActionModeStarted(android.support.v7.view.ActionMode) -> a
    void onSupportActionModeFinished(android.support.v7.view.ActionMode) -> b
    boolean onCreatePanelMenu(int,android.view.Menu) -> onCreatePanelMenu
    boolean onPreparePanel(int,android.view.View,android.view.Menu) -> onPreparePanel
    void superSetContentView(int) -> a_
    void superSetContentView(android.view.View) -> a
    void superSetContentView(android.view.View,android.view.ViewGroup$LayoutParams) -> a
    void superAddContentView(android.view.View,android.view.ViewGroup$LayoutParams) -> b
    boolean superOnCreatePanelMenu(int,android.view.Menu) -> a
    boolean superOnPreparePanel(int,android.view.View,android.view.Menu) -> a
    boolean superOnMenuItemSelected(int,android.view.MenuItem) -> a
    void onBackPressed() -> onBackPressed
    void onCreateSupportNavigateUpTaskStack(android.support.v4.app.TaskStackBuilder) -> a
    void onPrepareSupportNavigateUpTaskStack(android.support.v4.app.TaskStackBuilder) -> b
    boolean onSupportNavigateUp() -> h
    android.content.Intent getSupportParentActivityIntent() -> c_
    boolean supportShouldUpRecreateTask(android.content.Intent) -> a
    void supportNavigateUpTo(android.content.Intent) -> b
    android.support.v4.app.ActionBarDrawerToggle$Delegate getDrawerToggleDelegate() -> b_
android.support.v7.app.ActionBarActivityDelegate -> android.support.v7.a.h:
    android.support.v7.app.ActionBarActivity mActivity -> a
    android.support.v7.app.ActionBar mActionBar -> d
    android.view.MenuInflater mMenuInflater -> e
    boolean mHasActionBar -> b
    boolean mOverlayActionBar -> c
    android.support.v7.app.ActionBarActivityDelegate createDelegate(android.support.v7.app.ActionBarActivity) -> a
    android.support.v7.app.ActionBar createSupportActionBar() -> a
    android.support.v7.app.ActionBar getSupportActionBar() -> b
    android.view.MenuInflater getMenuInflater() -> c
    void onCreate(android.os.Bundle) -> a
    void onConfigurationChanged(android.content.res.Configuration) -> a
    void onStop() -> d
    void onPostResume() -> e
    void setContentView(android.view.View) -> a
    void setContentView(int) -> a
    void setContentView(android.view.View,android.view.ViewGroup$LayoutParams) -> a
    void addContentView(android.view.View,android.view.ViewGroup$LayoutParams) -> b
    void onTitleChanged(java.lang.CharSequence) -> a
    void supportInvalidateOptionsMenu() -> f
    android.view.View onCreatePanelView(int) -> b
    boolean onPreparePanel(int,android.view.View,android.view.Menu) -> a
    boolean onCreatePanelMenu(int,android.view.Menu) -> a
    boolean onMenuItemSelected(int,android.view.MenuItem) -> a
    boolean onBackPressed() -> g
    android.support.v4.app.ActionBarDrawerToggle$Delegate getDrawerToggleDelegate() -> h
    java.lang.String getUiOptionsFromMetadata() -> i
    android.content.Context getActionBarThemedContext() -> j
android.support.v7.app.ActionBarActivityDelegateBase -> android.support.v7.a.i:
    int[] ACTION_BAR_DRAWABLE_TOGGLE_ATTRS -> d
    android.support.v7.internal.widget.ActionBarView mActionBarView -> e
    android.support.v7.internal.view.menu.ListMenuPresenter mListMenuPresenter -> f
    android.support.v7.internal.view.menu.MenuBuilder mMenu -> g
    android.support.v7.view.ActionMode mActionMode -> h
    boolean mSubDecorInstalled -> i
    boolean mFeatureProgress -> j
    boolean mFeatureIndeterminateProgress -> k
    boolean mInvalidateMenuPosted -> l
    java.lang.Runnable mInvalidateMenuRunnable -> m
    android.support.v7.app.ActionBar createSupportActionBar() -> a
    void onConfigurationChanged(android.content.res.Configuration) -> a
    void onStop() -> d
    void onPostResume() -> e
    void setContentView(android.view.View) -> a
    void setContentView(int) -> a
    void setContentView(android.view.View,android.view.ViewGroup$LayoutParams) -> a
    void addContentView(android.view.View,android.view.ViewGroup$LayoutParams) -> b
    void ensureSubDecor() -> k
    void onTitleChanged(java.lang.CharSequence) -> a
    android.view.View onCreatePanelView(int) -> b
    boolean onCreatePanelMenu(int,android.view.Menu) -> a
    boolean onPreparePanel(int,android.view.View,android.view.Menu) -> a
    boolean onMenuItemSelected(int,android.view.MenuItem) -> a
    boolean onMenuItemSelected(android.support.v7.internal.view.menu.MenuBuilder,android.view.MenuItem) -> a
    void onMenuModeChange(android.support.v7.internal.view.menu.MenuBuilder) -> a
    void onCloseMenu(android.support.v7.internal.view.menu.MenuBuilder,boolean) -> a
    boolean onOpenSubMenu(android.support.v7.internal.view.menu.MenuBuilder) -> b
    void supportInvalidateOptionsMenu() -> f
    android.support.v7.internal.view.menu.MenuBuilder createMenu() -> m
    void reopenMenu(android.support.v7.internal.view.menu.MenuBuilder,boolean) -> b
    android.support.v7.internal.view.menu.MenuView getListMenuView(android.content.Context,android.support.v7.internal.view.menu.MenuPresenter$Callback) -> a
    void setMenu(android.support.v7.internal.view.menu.MenuBuilder) -> c
    boolean onBackPressed() -> g
    android.support.v4.app.ActionBarDrawerToggle$Delegate getDrawerToggleDelegate() -> h
    android.support.v7.internal.view.menu.MenuBuilder access$000(android.support.v7.app.ActionBarActivityDelegateBase) -> a
    void access$100(android.support.v7.app.ActionBarActivityDelegateBase,android.support.v7.internal.view.menu.MenuBuilder) -> a
    boolean access$202(android.support.v7.app.ActionBarActivityDelegateBase,boolean) -> a
    int[] access$500() -> l
    android.support.v7.internal.widget.ActionBarView access$600(android.support.v7.app.ActionBarActivityDelegateBase) -> b
android.support.v7.app.ActionBarActivityDelegateBase$1 -> android.support.v7.a.j:
    android.support.v7.app.ActionBarActivityDelegateBase this$0 -> a
    void run() -> run
android.support.v7.app.ActionBarActivityDelegateBase$ActionBarDrawableToggleImpl -> android.support.v7.a.k:
    android.support.v7.app.ActionBarActivityDelegateBase this$0 -> a
    android.graphics.drawable.Drawable getThemeUpIndicator() -> a
    void setActionBarUpIndicator(android.graphics.drawable.Drawable,int) -> a
    void setActionBarDescription(int) -> a
android.support.v7.app.ActionBarActivityDelegateHC -> android.support.v7.a.l:
    void onCreate(android.os.Bundle) -> a
    android.support.v7.app.ActionBar createSupportActionBar() -> a
android.support.v7.app.ActionBarActivityDelegateICS -> android.support.v7.a.m:
    android.view.Menu mMenu -> d
    android.support.v7.app.ActionBar createSupportActionBar() -> a
    void onCreate(android.os.Bundle) -> a
    android.view.Window$Callback createWindowCallbackWrapper(android.view.Window$Callback) -> a
    void onConfigurationChanged(android.content.res.Configuration) -> a
    void onStop() -> d
    void onPostResume() -> e
    void setContentView(android.view.View) -> a
    void setContentView(int) -> a
    void setContentView(android.view.View,android.view.ViewGroup$LayoutParams) -> a
    void addContentView(android.view.View,android.view.ViewGroup$LayoutParams) -> b
    android.view.View onCreatePanelView(int) -> b
    boolean onCreatePanelMenu(int,android.view.Menu) -> a
    boolean onPreparePanel(int,android.view.View,android.view.Menu) -> a
    boolean onMenuItemSelected(int,android.view.MenuItem) -> a
    void onTitleChanged(java.lang.CharSequence) -> a
    void onActionModeStarted(android.view.ActionMode) -> a
    void onActionModeFinished(android.view.ActionMode) -> b
    void supportInvalidateOptionsMenu() -> f
    boolean onBackPressed() -> g
    android.support.v4.app.ActionBarDrawerToggle$Delegate getDrawerToggleDelegate() -> h
android.support.v7.app.ActionBarActivityDelegateICS$WindowCallbackWrapper -> android.support.v7.a.n:
    android.view.Window$Callback mWrapped -> a
    android.support.v7.app.ActionBarActivityDelegateICS this$0 -> b
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
    boolean dispatchKeyShortcutEvent(android.view.KeyEvent) -> dispatchKeyShortcutEvent
    boolean dispatchTouchEvent(android.view.MotionEvent) -> dispatchTouchEvent
    boolean dispatchTrackballEvent(android.view.MotionEvent) -> dispatchTrackballEvent
    boolean dispatchGenericMotionEvent(android.view.MotionEvent) -> dispatchGenericMotionEvent
    boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    android.view.View onCreatePanelView(int) -> onCreatePanelView
    boolean onCreatePanelMenu(int,android.view.Menu) -> onCreatePanelMenu
    boolean onPreparePanel(int,android.view.View,android.view.Menu) -> onPreparePanel
    boolean onMenuOpened(int,android.view.Menu) -> onMenuOpened
    boolean onMenuItemSelected(int,android.view.MenuItem) -> onMenuItemSelected
    void onWindowAttributesChanged(android.view.WindowManager$LayoutParams) -> onWindowAttributesChanged
    void onContentChanged() -> onContentChanged
    void onWindowFocusChanged(boolean) -> onWindowFocusChanged
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void onPanelClosed(int,android.view.Menu) -> onPanelClosed
    boolean onSearchRequested() -> onSearchRequested
    android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback) -> onWindowStartingActionMode
    void onActionModeStarted(android.view.ActionMode) -> onActionModeStarted
    void onActionModeFinished(android.view.ActionMode) -> onActionModeFinished
android.support.v7.app.ActionBarImplBase -> android.support.v7.a.o:
    android.content.Context mContext -> b
    android.content.Context mThemedContext -> c
    android.support.v7.app.ActionBarActivity mActivity -> d
    android.support.v7.internal.widget.ActionBarOverlayLayout mOverlayLayout -> e
    android.support.v7.internal.widget.ActionBarContainer mContainerView -> f
    android.view.ViewGroup mTopVisibilityView -> g
    android.support.v7.internal.widget.ActionBarView mActionView -> h
    android.support.v7.internal.widget.ActionBarContextView mContextView -> i
    android.support.v7.internal.widget.ActionBarContainer mSplitView -> j
    android.support.v7.internal.widget.ScrollingTabContainerView mTabScrollView -> k
    java.util.ArrayList mTabs -> l
    android.support.v7.app.ActionBarImplBase$TabImpl mSelectedTab -> m
    int mSavedTabPosition -> n
    boolean mDisplayHomeAsUpSet -> o
    java.util.ArrayList mMenuVisibilityListeners -> p
    int mContextDisplayMode -> q
    boolean mHasEmbeddedTabs -> r
    android.os.Handler mHandler -> a
    int mCurWindowVisibility -> s
    boolean mHiddenByApp -> t
    boolean mHiddenBySystem -> u
    boolean mShowingForMode -> v
    boolean mNowShowing -> w
    boolean mShowHideAnimationEnabled -> x
    android.support.v7.app.ActionBar$Callback mCallback -> y
    void init(android.support.v7.app.ActionBarActivity) -> a
    void onConfigurationChanged(android.content.res.Configuration) -> a
    void setHasEmbeddedTabs(boolean) -> g
    void setSelectedNavigationItem(int) -> a
    int getSelectedNavigationIndex() -> d
    void setTitle(java.lang.CharSequence) -> a
    void setDisplayOptions(int,int) -> a
    void setDisplayHomeAsUpEnabled(boolean) -> a
    void setDisplayShowTitleEnabled(boolean) -> b
    void setHomeButtonEnabled(boolean) -> c
    int getNavigationMode() -> e
    void setNavigationMode(int) -> b
    int getDisplayOptions() -> a
    android.support.v7.app.ActionBar$Tab newTab() -> b
    void addTab(android.support.v7.app.ActionBar$Tab,boolean) -> a
    void selectTab(android.support.v7.app.ActionBar$Tab) -> a
    android.content.Context getThemedContext() -> c
    void showForActionMode() -> f
    void hideForActionMode() -> g
    void ensureTabsExist() -> i
    void configureTab(android.support.v7.app.ActionBar$Tab,int) -> a
    boolean checkShowingFlags(boolean,boolean,boolean) -> a
    void updateVisibility(boolean) -> h
    void setShowHideAnimationEnabled(boolean) -> d
    void doShow(boolean) -> e
    void doHide(boolean) -> f
    boolean isShowHideAnimationEnabled() -> h
    android.support.v7.internal.widget.ScrollingTabContainerView access$000(android.support.v7.app.ActionBarImplBase) -> a
    android.content.Context access$100(android.support.v7.app.ActionBarImplBase) -> b
android.support.v7.app.ActionBarImplBase$TabImpl -> android.support.v7.a.p:
    android.support.v7.app.ActionBar$TabListener mCallback -> b
    android.graphics.drawable.Drawable mIcon -> c
    java.lang.CharSequence mText -> d
    java.lang.CharSequence mContentDesc -> e
    int mPosition -> f
    android.view.View mCustomView -> g
    android.support.v7.app.ActionBarImplBase this$0 -> a
    android.support.v7.app.ActionBar$TabListener getCallback() -> g
    android.support.v7.app.ActionBar$Tab setTabListener(android.support.v7.app.ActionBar$TabListener) -> a
    android.view.View getCustomView() -> d
    android.graphics.drawable.Drawable getIcon() -> b
    int getPosition() -> a
    void setPosition(int) -> b
    java.lang.CharSequence getText() -> c
    android.support.v7.app.ActionBar$Tab setText(java.lang.CharSequence) -> a
    android.support.v7.app.ActionBar$Tab setText(int) -> a
    void select() -> e
    java.lang.CharSequence getContentDescription() -> f
android.support.v7.app.ActionBarImplHC -> android.support.v7.a.q:
    android.support.v7.internal.widget.NativeActionModeAwareLayout mNativeActionModeAwareLayout -> b
    android.view.ActionMode mCurActionMode -> c
    android.view.ActionMode$Callback onActionModeForChild(android.view.ActionMode$Callback) -> a
    boolean isShowHideAnimationEnabled() -> h
    android.view.ActionMode access$002(android.support.v7.app.ActionBarImplHC,android.view.ActionMode) -> a
android.support.v7.app.ActionBarImplHC$CallbackWrapper -> android.support.v7.a.r:
    android.view.ActionMode$Callback mWrappedCallback -> b
    android.support.v7.app.ActionBarImplHC this$0 -> a
    boolean onCreateActionMode(android.view.ActionMode,android.view.Menu) -> onCreateActionMode
    boolean onPrepareActionMode(android.view.ActionMode,android.view.Menu) -> onPrepareActionMode
    boolean onActionItemClicked(android.view.ActionMode,android.view.MenuItem) -> onActionItemClicked
    void onDestroyActionMode(android.view.ActionMode) -> onDestroyActionMode
android.support.v7.app.ActionBarImplICS -> android.support.v7.a.s:
    android.app.Activity mActivity -> a
    android.support.v7.app.ActionBar$Callback mCallback -> b
    android.app.ActionBar mActionBar -> c
    java.util.ArrayList mAddedMenuVisWrappers -> d
    void setSelectedNavigationItem(int) -> a
    void setTitle(java.lang.CharSequence) -> a
    void setDisplayHomeAsUpEnabled(boolean) -> a
    void setDisplayShowTitleEnabled(boolean) -> b
    void setNavigationMode(int) -> b
    int getDisplayOptions() -> a
    android.support.v7.app.ActionBar$Tab newTab() -> b
    void addTab(android.support.v7.app.ActionBar$Tab,boolean) -> a
    android.content.Context getThemedContext() -> c
android.support.v7.app.ActionBarImplICS$TabWrapper -> android.support.v7.a.t:
    android.app.ActionBar$Tab mWrappedTab -> a
    android.support.v4.app.FragmentTransaction mActiveTransaction -> c
    java.lang.CharSequence mContentDescription -> d
    android.support.v7.app.ActionBar$TabListener mTabListener -> e
    android.support.v7.app.ActionBarImplICS this$0 -> b
    int getPosition() -> a
    android.graphics.drawable.Drawable getIcon() -> b
    java.lang.CharSequence getText() -> c
    android.support.v7.app.ActionBar$Tab setText(int) -> a
    android.view.View getCustomView() -> d
    android.support.v7.app.ActionBar$Tab setTabListener(android.support.v7.app.ActionBar$TabListener) -> a
    void select() -> e
    java.lang.CharSequence getContentDescription() -> f
    void onTabSelected(android.app.ActionBar$Tab,android.app.FragmentTransaction) -> onTabSelected
    void onTabUnselected(android.app.ActionBar$Tab,android.app.FragmentTransaction) -> onTabUnselected
    void onTabReselected(android.app.ActionBar$Tab,android.app.FragmentTransaction) -> onTabReselected
    android.support.v4.app.FragmentTransaction getActiveTransaction() -> g
    void commitActiveTransaction() -> h
android.support.v7.appcompat.R -> android.support.v7.b.a:
android.support.v7.appcompat.R$anim -> android.support.v7.b.b:
    int abc_fade_in -> abc_fade_in
    int abc_fade_out -> abc_fade_out
    int abc_slide_in_bottom -> abc_slide_in_bottom
    int abc_slide_in_top -> abc_slide_in_top
    int abc_slide_out_bottom -> abc_slide_out_bottom
    int abc_slide_out_top -> abc_slide_out_top
android.support.v7.appcompat.R$attr -> android.support.v7.b.c:
    int actionBarDivider -> actionBarDivider
    int actionBarItemBackground -> actionBarItemBackground
    int actionBarSize -> actionBarSize
    int actionBarSplitStyle -> actionBarSplitStyle
    int actionBarStyle -> actionBarStyle
    int actionBarTabBarStyle -> actionBarTabBarStyle
    int actionBarTabStyle -> actionBarTabStyle
    int actionBarTabTextStyle -> actionBarTabTextStyle
    int actionBarWidgetTheme -> actionBarWidgetTheme
    int actionButtonStyle -> actionButtonStyle
    int actionDropDownStyle -> actionDropDownStyle
    int actionLayout -> actionLayout
    int actionMenuTextAppearance -> actionMenuTextAppearance
    int actionMenuTextColor -> actionMenuTextColor
    int actionModeBackground -> actionModeBackground
    int actionModeCloseButtonStyle -> actionModeCloseButtonStyle
    int actionModeCloseDrawable -> actionModeCloseDrawable
    int actionModeCopyDrawable -> actionModeCopyDrawable
    int actionModeCutDrawable -> actionModeCutDrawable
    int actionModeFindDrawable -> actionModeFindDrawable
    int actionModePasteDrawable -> actionModePasteDrawable
    int actionModePopupWindowStyle -> actionModePopupWindowStyle
    int actionModeSelectAllDrawable -> actionModeSelectAllDrawable
    int actionModeShareDrawable -> actionModeShareDrawable
    int actionModeSplitBackground -> actionModeSplitBackground
    int actionModeStyle -> actionModeStyle
    int actionModeWebSearchDrawable -> actionModeWebSearchDrawable
    int actionOverflowButtonStyle -> actionOverflowButtonStyle
    int actionProviderClass -> actionProviderClass
    int actionViewClass -> actionViewClass
    int activityChooserViewStyle -> activityChooserViewStyle
    int background -> background
    int backgroundSplit -> backgroundSplit
    int backgroundStacked -> backgroundStacked
    int buttonBarButtonStyle -> buttonBarButtonStyle
    int buttonBarStyle -> buttonBarStyle
    int customNavigationLayout -> customNavigationLayout
    int disableChildrenWhenDisabled -> disableChildrenWhenDisabled
    int displayOptions -> displayOptions
    int divider -> divider
    int dividerHorizontal -> dividerHorizontal
    int dividerPadding -> dividerPadding
    int dividerVertical -> dividerVertical
    int dropDownListViewStyle -> dropDownListViewStyle
    int dropdownListPreferredItemHeight -> dropdownListPreferredItemHeight
    int expandActivityOverflowButtonDrawable -> expandActivityOverflowButtonDrawable
    int height -> height
    int homeAsUpIndicator -> homeAsUpIndicator
    int homeLayout -> homeLayout
    int icon -> icon
    int iconifiedByDefault -> iconifiedByDefault
    int indeterminateProgressStyle -> indeterminateProgressStyle
    int initialActivityCount -> initialActivityCount
    int isLightTheme -> isLightTheme
    int itemPadding -> itemPadding
    int listChoiceBackgroundIndicator -> listChoiceBackgroundIndicator
    int listPopupWindowStyle -> listPopupWindowStyle
    int listPreferredItemHeight -> listPreferredItemHeight
    int listPreferredItemHeightLarge -> listPreferredItemHeightLarge
    int listPreferredItemHeightSmall -> listPreferredItemHeightSmall
    int listPreferredItemPaddingLeft -> listPreferredItemPaddingLeft
    int listPreferredItemPaddingRight -> listPreferredItemPaddingRight
    int logo -> logo
    int navigationMode -> navigationMode
    int paddingEnd -> paddingEnd
    int paddingStart -> paddingStart
    int panelMenuListTheme -> panelMenuListTheme
    int panelMenuListWidth -> panelMenuListWidth
    int popupMenuStyle -> popupMenuStyle
    int popupPromptView -> popupPromptView
    int progressBarPadding -> progressBarPadding
    int progressBarStyle -> progressBarStyle
    int prompt -> prompt
    int queryHint -> queryHint
    int searchDropdownBackground -> searchDropdownBackground
    int searchResultListItemHeight -> searchResultListItemHeight
    int searchViewAutoCompleteTextView -> searchViewAutoCompleteTextView
    int searchViewCloseIcon -> searchViewCloseIcon
    int searchViewEditQuery -> searchViewEditQuery
    int searchViewEditQueryBackground -> searchViewEditQueryBackground
    int searchViewGoIcon -> searchViewGoIcon
    int searchViewSearchIcon -> searchViewSearchIcon
    int searchViewTextField -> searchViewTextField
    int searchViewTextFieldRight -> searchViewTextFieldRight
    int searchViewVoiceIcon -> searchViewVoiceIcon
    int selectableItemBackground -> selectableItemBackground
    int showAsAction -> showAsAction
    int showDividers -> showDividers
    int spinnerDropDownItemStyle -> spinnerDropDownItemStyle
    int spinnerMode -> spinnerMode
    int spinnerStyle -> spinnerStyle
    int subtitle -> subtitle
    int subtitleTextStyle -> subtitleTextStyle
    int textAllCaps -> textAllCaps
    int textAppearanceLargePopupMenu -> textAppearanceLargePopupMenu
    int textAppearanceListItem -> textAppearanceListItem
    int textAppearanceListItemSmall -> textAppearanceListItemSmall
    int textAppearanceSearchResultSubtitle -> textAppearanceSearchResultSubtitle
    int textAppearanceSearchResultTitle -> textAppearanceSearchResultTitle
    int textAppearanceSmallPopupMenu -> textAppearanceSmallPopupMenu
    int textColorSearchUrl -> textColorSearchUrl
    int title -> title
    int titleTextStyle -> titleTextStyle
    int windowActionBar -> windowActionBar
    int windowActionBarOverlay -> windowActionBarOverlay
    int windowSplitActionBar -> windowSplitActionBar
android.support.v7.appcompat.R$bool -> android.support.v7.b.d:
    int abc_action_bar_embed_tabs_pre_jb -> abc_action_bar_embed_tabs_pre_jb
    int abc_action_bar_expanded_action_views_exclusive -> abc_action_bar_expanded_action_views_exclusive
    int abc_config_actionMenuItemAllCaps -> abc_config_actionMenuItemAllCaps
    int abc_config_allowActionMenuItemTextWithIcon -> abc_config_allowActionMenuItemTextWithIcon
    int abc_config_showMenuShortcutsWhenKeyboardPresent -> abc_config_showMenuShortcutsWhenKeyboardPresent
    int abc_split_action_bar_is_narrow -> abc_split_action_bar_is_narrow
android.support.v7.appcompat.R$dimen -> android.support.v7.b.e:
    int abc_action_bar_default_height -> abc_action_bar_default_height
    int abc_action_bar_icon_vertical_padding -> abc_action_bar_icon_vertical_padding
    int abc_action_bar_stacked_max_height -> abc_action_bar_stacked_max_height
    int abc_action_bar_stacked_tab_max_width -> abc_action_bar_stacked_tab_max_width
    int abc_action_bar_subtitle_bottom_margin -> abc_action_bar_subtitle_bottom_margin
    int abc_action_bar_subtitle_text_size -> abc_action_bar_subtitle_text_size
    int abc_action_bar_subtitle_top_margin -> abc_action_bar_subtitle_top_margin
    int abc_action_bar_title_text_size -> abc_action_bar_title_text_size
    int abc_action_button_min_width -> abc_action_button_min_width
    int abc_config_prefDialogWidth -> abc_config_prefDialogWidth
    int abc_dropdownitem_icon_width -> abc_dropdownitem_icon_width
    int abc_dropdownitem_text_padding_left -> abc_dropdownitem_text_padding_left
    int abc_dropdownitem_text_padding_right -> abc_dropdownitem_text_padding_right
    int abc_panel_menu_list_width -> abc_panel_menu_list_width
    int abc_search_view_preferred_width -> abc_search_view_preferred_width
    int abc_search_view_text_min_width -> abc_search_view_text_min_width
android.support.v7.appcompat.R$id -> android.support.v7.b.f:
    int action_bar -> action_bar
    int action_bar_activity_content -> action_bar_activity_content
    int action_bar_container -> action_bar_container
    int action_bar_overlay_layout -> action_bar_overlay_layout
    int action_bar_root -> action_bar_root
    int action_bar_subtitle -> action_bar_subtitle
    int action_bar_title -> action_bar_title
    int action_context_bar -> action_context_bar
    int action_menu_divider -> action_menu_divider
    int action_menu_presenter -> action_menu_presenter
    int action_mode_bar -> action_mode_bar
    int action_mode_bar_stub -> action_mode_bar_stub
    int action_mode_close_button -> action_mode_close_button
    int activity_chooser_view_content -> activity_chooser_view_content
    int always -> always
    int beginning -> beginning
    int checkbox -> checkbox
    int collapseActionView -> collapseActionView
    int default_activity_button -> default_activity_button
    int dialog -> dialog
    int disableHome -> disableHome
    int dropdown -> dropdown
    int edit_query -> edit_query
    int end -> end
    int expand_activities_button -> expand_activities_button
    int expanded_menu -> expanded_menu
    int home -> home
    int homeAsUp -> homeAsUp
    int icon -> icon
    int ifRoom -> ifRoom
    int image -> image
    int left_icon -> left_icon
    int listMode -> listMode
    int list_item -> list_item
    int middle -> middle
    int never -> never
    int none -> none
    int normal -> normal
    int progress_circular -> progress_circular
    int progress_horizontal -> progress_horizontal
    int radio -> radio
    int right_container -> right_container
    int right_icon -> right_icon
    int search_badge -> search_badge
    int search_bar -> search_bar
    int search_button -> search_button
    int search_close_btn -> search_close_btn
    int search_edit_frame -> search_edit_frame
    int search_go_btn -> search_go_btn
    int search_mag_icon -> search_mag_icon
    int search_plate -> search_plate
    int search_src_text -> search_src_text
    int search_voice_btn -> search_voice_btn
    int shortcut -> shortcut
    int showCustom -> showCustom
    int showHome -> showHome
    int showTitle -> showTitle
    int split_action_bar -> split_action_bar
    int submit_area -> submit_area
    int tabMode -> tabMode
    int title -> title
    int title_container -> title_container
    int top_action_bar -> top_action_bar
    int up -> up
    int useLogo -> useLogo
    int withText -> withText
android.support.v7.appcompat.R$integer -> android.support.v7.b.g:
    int abc_max_action_buttons -> abc_max_action_buttons
android.support.v7.appcompat.R$layout -> android.support.v7.b.h:
    int abc_action_bar_decor -> abc_action_bar_decor
    int abc_action_bar_decor_include -> abc_action_bar_decor_include
    int abc_action_bar_decor_overlay -> abc_action_bar_decor_overlay
    int abc_action_bar_home -> abc_action_bar_home
    int abc_action_bar_tab -> abc_action_bar_tab
    int abc_action_bar_tabbar -> abc_action_bar_tabbar
    int abc_action_bar_title_item -> abc_action_bar_title_item
    int abc_action_bar_view_list_nav_layout -> abc_action_bar_view_list_nav_layout
    int abc_action_menu_item_layout -> abc_action_menu_item_layout
    int abc_action_menu_layout -> abc_action_menu_layout
    int abc_action_mode_bar -> abc_action_mode_bar
    int abc_action_mode_close_item -> abc_action_mode_close_item
    int abc_activity_chooser_view -> abc_activity_chooser_view
    int abc_activity_chooser_view_include -> abc_activity_chooser_view_include
    int abc_activity_chooser_view_list_item -> abc_activity_chooser_view_list_item
    int abc_expanded_menu_layout -> abc_expanded_menu_layout
    int abc_list_menu_item_checkbox -> abc_list_menu_item_checkbox
    int abc_list_menu_item_icon -> abc_list_menu_item_icon
    int abc_list_menu_item_layout -> abc_list_menu_item_layout
    int abc_list_menu_item_radio -> abc_list_menu_item_radio
    int abc_popup_menu_item_layout -> abc_popup_menu_item_layout
    int abc_screen -> abc_screen
    int abc_search_dropdown_item_icons_2line -> abc_search_dropdown_item_icons_2line
    int abc_search_view -> abc_search_view
    int support_simple_spinner_dropdown_item -> support_simple_spinner_dropdown_item
android.support.v7.appcompat.R$string -> android.support.v7.b.i:
    int abc_action_bar_home_description -> abc_action_bar_home_description
    int abc_action_bar_up_description -> abc_action_bar_up_description
    int abc_action_menu_overflow_description -> abc_action_menu_overflow_description
    int abc_action_mode_done -> abc_action_mode_done
    int abc_activity_chooser_view_see_all -> abc_activity_chooser_view_see_all
    int abc_activitychooserview_choose_application -> abc_activitychooserview_choose_application
    int abc_searchview_description_clear -> abc_searchview_description_clear
    int abc_searchview_description_query -> abc_searchview_description_query
    int abc_searchview_description_search -> abc_searchview_description_search
    int abc_searchview_description_submit -> abc_searchview_description_submit
    int abc_searchview_description_voice -> abc_searchview_description_voice
    int abc_shareactionprovider_share_with -> abc_shareactionprovider_share_with
    int abc_shareactionprovider_share_with_application -> abc_shareactionprovider_share_with_application
android.support.v7.appcompat.R$style -> android.support.v7.b.j:
    int TextAppearance_AppCompat_Base_CompactMenu_Dialog -> TextAppearance_AppCompat_Base_CompactMenu_Dialog
    int TextAppearance_AppCompat_Base_SearchResult -> TextAppearance_AppCompat_Base_SearchResult
    int TextAppearance_AppCompat_Base_SearchResult_Subtitle -> TextAppearance_AppCompat_Base_SearchResult_Subtitle
    int TextAppearance_AppCompat_Base_SearchResult_Title -> TextAppearance_AppCompat_Base_SearchResult_Title
    int TextAppearance_AppCompat_Base_Widget_PopupMenu_Large -> TextAppearance_AppCompat_Base_Widget_PopupMenu_Large
    int TextAppearance_AppCompat_Base_Widget_PopupMenu_Small -> TextAppearance_AppCompat_Base_Widget_PopupMenu_Small
    int TextAppearance_AppCompat_Light_Base_SearchResult -> TextAppearance_AppCompat_Light_Base_SearchResult
    int TextAppearance_AppCompat_Light_Base_SearchResult_Subtitle -> TextAppearance_AppCompat_Light_Base_SearchResult_Subtitle
    int TextAppearance_AppCompat_Light_Base_SearchResult_Title -> TextAppearance_AppCompat_Light_Base_SearchResult_Title
    int TextAppearance_AppCompat_Light_Base_Widget_PopupMenu_Large -> TextAppearance_AppCompat_Light_Base_Widget_PopupMenu_Large
    int TextAppearance_AppCompat_Light_Base_Widget_PopupMenu_Small -> TextAppearance_AppCompat_Light_Base_Widget_PopupMenu_Small
    int TextAppearance_AppCompat_Light_SearchResult_Subtitle -> TextAppearance_AppCompat_Light_SearchResult_Subtitle
    int TextAppearance_AppCompat_Light_SearchResult_Title -> TextAppearance_AppCompat_Light_SearchResult_Title
    int TextAppearance_AppCompat_Light_Widget_PopupMenu_Large -> TextAppearance_AppCompat_Light_Widget_PopupMenu_Large
    int TextAppearance_AppCompat_Light_Widget_PopupMenu_Small -> TextAppearance_AppCompat_Light_Widget_PopupMenu_Small
    int TextAppearance_AppCompat_SearchResult_Subtitle -> TextAppearance_AppCompat_SearchResult_Subtitle
    int TextAppearance_AppCompat_SearchResult_Title -> TextAppearance_AppCompat_SearchResult_Title
    int TextAppearance_AppCompat_Widget_ActionBar_Menu -> TextAppearance_AppCompat_Widget_ActionBar_Menu
    int TextAppearance_AppCompat_Widget_ActionBar_Subtitle -> TextAppearance_AppCompat_Widget_ActionBar_Subtitle
    int TextAppearance_AppCompat_Widget_ActionBar_Subtitle_Inverse -> TextAppearance_AppCompat_Widget_ActionBar_Subtitle_Inverse
    int TextAppearance_AppCompat_Widget_ActionBar_Title -> TextAppearance_AppCompat_Widget_ActionBar_Title
    int TextAppearance_AppCompat_Widget_ActionBar_Title_Inverse -> TextAppearance_AppCompat_Widget_ActionBar_Title_Inverse
    int TextAppearance_AppCompat_Widget_ActionMode_Subtitle -> TextAppearance_AppCompat_Widget_ActionMode_Subtitle
    int TextAppearance_AppCompat_Widget_ActionMode_Subtitle_Inverse -> TextAppearance_AppCompat_Widget_ActionMode_Subtitle_Inverse
    int TextAppearance_AppCompat_Widget_ActionMode_Title -> TextAppearance_AppCompat_Widget_ActionMode_Title
    int TextAppearance_AppCompat_Widget_ActionMode_Title_Inverse -> TextAppearance_AppCompat_Widget_ActionMode_Title_Inverse
    int TextAppearance_AppCompat_Widget_Base_ActionBar_Menu -> TextAppearance_AppCompat_Widget_Base_ActionBar_Menu
    int TextAppearance_AppCompat_Widget_Base_ActionBar_Subtitle -> TextAppearance_AppCompat_Widget_Base_ActionBar_Subtitle
    int TextAppearance_AppCompat_Widget_Base_ActionBar_Subtitle_Inverse -> TextAppearance_AppCompat_Widget_Base_ActionBar_Subtitle_Inverse
    int TextAppearance_AppCompat_Widget_Base_ActionBar_Title -> TextAppearance_AppCompat_Widget_Base_ActionBar_Title
    int TextAppearance_AppCompat_Widget_Base_ActionBar_Title_Inverse -> TextAppearance_AppCompat_Widget_Base_ActionBar_Title_Inverse
    int TextAppearance_AppCompat_Widget_Base_ActionMode_Subtitle -> TextAppearance_AppCompat_Widget_Base_ActionMode_Subtitle
    int TextAppearance_AppCompat_Widget_Base_ActionMode_Subtitle_Inverse -> TextAppearance_AppCompat_Widget_Base_ActionMode_Subtitle_Inverse
    int TextAppearance_AppCompat_Widget_Base_ActionMode_Title -> TextAppearance_AppCompat_Widget_Base_ActionMode_Title
    int TextAppearance_AppCompat_Widget_Base_ActionMode_Title_Inverse -> TextAppearance_AppCompat_Widget_Base_ActionMode_Title_Inverse
    int TextAppearance_AppCompat_Widget_Base_DropDownItem -> TextAppearance_AppCompat_Widget_Base_DropDownItem
    int TextAppearance_AppCompat_Widget_DropDownItem -> TextAppearance_AppCompat_Widget_DropDownItem
    int TextAppearance_AppCompat_Widget_PopupMenu_Large -> TextAppearance_AppCompat_Widget_PopupMenu_Large
    int TextAppearance_AppCompat_Widget_PopupMenu_Small -> TextAppearance_AppCompat_Widget_PopupMenu_Small
    int TextAppearance_Widget_AppCompat_Base_ExpandedMenu_Item -> TextAppearance_Widget_AppCompat_Base_ExpandedMenu_Item
    int TextAppearance_Widget_AppCompat_ExpandedMenu_Item -> TextAppearance_Widget_AppCompat_ExpandedMenu_Item
    int Theme_AppCompat -> Theme_AppCompat
    int Theme_AppCompat_Base_CompactMenu -> Theme_AppCompat_Base_CompactMenu
    int Theme_AppCompat_Base_CompactMenu_Dialog -> Theme_AppCompat_Base_CompactMenu_Dialog
    int Theme_AppCompat_CompactMenu -> Theme_AppCompat_CompactMenu
    int Theme_AppCompat_CompactMenu_Dialog -> Theme_AppCompat_CompactMenu_Dialog
    int Theme_AppCompat_Light -> Theme_AppCompat_Light
    int Theme_AppCompat_Light_DarkActionBar -> Theme_AppCompat_Light_DarkActionBar
    int Theme_Base -> Theme_Base
    int Theme_Base_AppCompat -> Theme_Base_AppCompat
    int Theme_Base_AppCompat_Light -> Theme_Base_AppCompat_Light
    int Theme_Base_AppCompat_Light_DarkActionBar -> Theme_Base_AppCompat_Light_DarkActionBar
    int Theme_Base_Light -> Theme_Base_Light
    int Widget_AppCompat_ActionBar -> Widget_AppCompat_ActionBar
    int Widget_AppCompat_ActionBar_Solid -> Widget_AppCompat_ActionBar_Solid
    int Widget_AppCompat_ActionBar_TabBar -> Widget_AppCompat_ActionBar_TabBar
    int Widget_AppCompat_ActionBar_TabText -> Widget_AppCompat_ActionBar_TabText
    int Widget_AppCompat_ActionBar_TabView -> Widget_AppCompat_ActionBar_TabView
    int Widget_AppCompat_ActionButton -> Widget_AppCompat_ActionButton
    int Widget_AppCompat_ActionButton_CloseMode -> Widget_AppCompat_ActionButton_CloseMode
    int Widget_AppCompat_ActionButton_Overflow -> Widget_AppCompat_ActionButton_Overflow
    int Widget_AppCompat_ActionMode -> Widget_AppCompat_ActionMode
    int Widget_AppCompat_ActivityChooserView -> Widget_AppCompat_ActivityChooserView
    int Widget_AppCompat_AutoCompleteTextView -> Widget_AppCompat_AutoCompleteTextView
    int Widget_AppCompat_Base_ActionBar -> Widget_AppCompat_Base_ActionBar
    int Widget_AppCompat_Base_ActionBar_Solid -> Widget_AppCompat_Base_ActionBar_Solid
    int Widget_AppCompat_Base_ActionBar_TabBar -> Widget_AppCompat_Base_ActionBar_TabBar
    int Widget_AppCompat_Base_ActionBar_TabText -> Widget_AppCompat_Base_ActionBar_TabText
    int Widget_AppCompat_Base_ActionBar_TabView -> Widget_AppCompat_Base_ActionBar_TabView
    int Widget_AppCompat_Base_ActionButton -> Widget_AppCompat_Base_ActionButton
    int Widget_AppCompat_Base_ActionButton_CloseMode -> Widget_AppCompat_Base_ActionButton_CloseMode
    int Widget_AppCompat_Base_ActionButton_Overflow -> Widget_AppCompat_Base_ActionButton_Overflow
    int Widget_AppCompat_Base_ActionMode -> Widget_AppCompat_Base_ActionMode
    int Widget_AppCompat_Base_ActivityChooserView -> Widget_AppCompat_Base_ActivityChooserView
    int Widget_AppCompat_Base_AutoCompleteTextView -> Widget_AppCompat_Base_AutoCompleteTextView
    int Widget_AppCompat_Base_DropDownItem_Spinner -> Widget_AppCompat_Base_DropDownItem_Spinner
    int Widget_AppCompat_Base_ListView_DropDown -> Widget_AppCompat_Base_ListView_DropDown
    int Widget_AppCompat_Base_ListView_Menu -> Widget_AppCompat_Base_ListView_Menu
    int Widget_AppCompat_Base_PopupMenu -> Widget_AppCompat_Base_PopupMenu
    int Widget_AppCompat_Base_ProgressBar -> Widget_AppCompat_Base_ProgressBar
    int Widget_AppCompat_Base_ProgressBar_Horizontal -> Widget_AppCompat_Base_ProgressBar_Horizontal
    int Widget_AppCompat_Base_Spinner -> Widget_AppCompat_Base_Spinner
    int Widget_AppCompat_DropDownItem_Spinner -> Widget_AppCompat_DropDownItem_Spinner
    int Widget_AppCompat_Light_ActionBar -> Widget_AppCompat_Light_ActionBar
    int Widget_AppCompat_Light_ActionBar_Solid -> Widget_AppCompat_Light_ActionBar_Solid
    int Widget_AppCompat_Light_ActionBar_Solid_Inverse -> Widget_AppCompat_Light_ActionBar_Solid_Inverse
    int Widget_AppCompat_Light_ActionBar_TabBar -> Widget_AppCompat_Light_ActionBar_TabBar
    int Widget_AppCompat_Light_ActionBar_TabBar_Inverse -> Widget_AppCompat_Light_ActionBar_TabBar_Inverse
    int Widget_AppCompat_Light_ActionBar_TabText -> Widget_AppCompat_Light_ActionBar_TabText
    int Widget_AppCompat_Light_ActionBar_TabText_Inverse -> Widget_AppCompat_Light_ActionBar_TabText_Inverse
    int Widget_AppCompat_Light_ActionBar_TabView -> Widget_AppCompat_Light_ActionBar_TabView
    int Widget_AppCompat_Light_ActionBar_TabView_Inverse -> Widget_AppCompat_Light_ActionBar_TabView_Inverse
    int Widget_AppCompat_Light_ActionButton -> Widget_AppCompat_Light_ActionButton
    int Widget_AppCompat_Light_ActionButton_CloseMode -> Widget_AppCompat_Light_ActionButton_CloseMode
    int Widget_AppCompat_Light_ActionButton_Overflow -> Widget_AppCompat_Light_ActionButton_Overflow
    int Widget_AppCompat_Light_ActionMode_Inverse -> Widget_AppCompat_Light_ActionMode_Inverse
    int Widget_AppCompat_Light_ActivityChooserView -> Widget_AppCompat_Light_ActivityChooserView
    int Widget_AppCompat_Light_AutoCompleteTextView -> Widget_AppCompat_Light_AutoCompleteTextView
    int Widget_AppCompat_Light_Base_ActionBar -> Widget_AppCompat_Light_Base_ActionBar
    int Widget_AppCompat_Light_Base_ActionBar_Solid -> Widget_AppCompat_Light_Base_ActionBar_Solid
    int Widget_AppCompat_Light_Base_ActionBar_Solid_Inverse -> Widget_AppCompat_Light_Base_ActionBar_Solid_Inverse
    int Widget_AppCompat_Light_Base_ActionBar_TabBar -> Widget_AppCompat_Light_Base_ActionBar_TabBar
    int Widget_AppCompat_Light_Base_ActionBar_TabBar_Inverse -> Widget_AppCompat_Light_Base_ActionBar_TabBar_Inverse
    int Widget_AppCompat_Light_Base_ActionBar_TabText -> Widget_AppCompat_Light_Base_ActionBar_TabText
    int Widget_AppCompat_Light_Base_ActionBar_TabText_Inverse -> Widget_AppCompat_Light_Base_ActionBar_TabText_Inverse
    int Widget_AppCompat_Light_Base_ActionBar_TabView -> Widget_AppCompat_Light_Base_ActionBar_TabView
    int Widget_AppCompat_Light_Base_ActionBar_TabView_Inverse -> Widget_AppCompat_Light_Base_ActionBar_TabView_Inverse
    int Widget_AppCompat_Light_Base_ActionButton -> Widget_AppCompat_Light_Base_ActionButton
    int Widget_AppCompat_Light_Base_ActionButton_CloseMode -> Widget_AppCompat_Light_Base_ActionButton_CloseMode
    int Widget_AppCompat_Light_Base_ActionButton_Overflow -> Widget_AppCompat_Light_Base_ActionButton_Overflow
    int Widget_AppCompat_Light_Base_ActionMode_Inverse -> Widget_AppCompat_Light_Base_ActionMode_Inverse
    int Widget_AppCompat_Light_Base_ActivityChooserView -> Widget_AppCompat_Light_Base_ActivityChooserView
    int Widget_AppCompat_Light_Base_AutoCompleteTextView -> Widget_AppCompat_Light_Base_AutoCompleteTextView
    int Widget_AppCompat_Light_Base_DropDownItem_Spinner -> Widget_AppCompat_Light_Base_DropDownItem_Spinner
    int Widget_AppCompat_Light_Base_ListView_DropDown -> Widget_AppCompat_Light_Base_ListView_DropDown
    int Widget_AppCompat_Light_Base_PopupMenu -> Widget_AppCompat_Light_Base_PopupMenu
    int Widget_AppCompat_Light_Base_Spinner -> Widget_AppCompat_Light_Base_Spinner
    int Widget_AppCompat_Light_DropDownItem_Spinner -> Widget_AppCompat_Light_DropDownItem_Spinner
    int Widget_AppCompat_Light_ListView_DropDown -> Widget_AppCompat_Light_ListView_DropDown
    int Widget_AppCompat_Light_PopupMenu -> Widget_AppCompat_Light_PopupMenu
    int Widget_AppCompat_Light_Spinner_DropDown_ActionBar -> Widget_AppCompat_Light_Spinner_DropDown_ActionBar
    int Widget_AppCompat_ListView_DropDown -> Widget_AppCompat_ListView_DropDown
    int Widget_AppCompat_ListView_Menu -> Widget_AppCompat_ListView_Menu
    int Widget_AppCompat_PopupMenu -> Widget_AppCompat_PopupMenu
    int Widget_AppCompat_ProgressBar -> Widget_AppCompat_ProgressBar
    int Widget_AppCompat_ProgressBar_Horizontal -> Widget_AppCompat_ProgressBar_Horizontal
    int Widget_AppCompat_Spinner_DropDown_ActionBar -> Widget_AppCompat_Spinner_DropDown_ActionBar
android.support.v7.appcompat.R$styleable -> android.support.v7.b.k:
    int[] ActionBar -> ActionBar
    int[] ActionBarLayout -> ActionBarLayout
    int ActionBarLayout_android_layout_gravity -> ActionBarLayout_android_layout_gravity
    int[] ActionBarWindow -> ActionBarWindow
    int ActionBarWindow_windowActionBar -> ActionBarWindow_windowActionBar
    int ActionBarWindow_windowActionBarOverlay -> ActionBarWindow_windowActionBarOverlay
    int ActionBarWindow_windowSplitActionBar -> ActionBarWindow_windowSplitActionBar
    int ActionBar_background -> ActionBar_background
    int ActionBar_backgroundSplit -> ActionBar_backgroundSplit
    int ActionBar_backgroundStacked -> ActionBar_backgroundStacked
    int ActionBar_customNavigationLayout -> ActionBar_customNavigationLayout
    int ActionBar_displayOptions -> ActionBar_displayOptions
    int ActionBar_divider -> ActionBar_divider
    int ActionBar_height -> ActionBar_height
    int ActionBar_homeLayout -> ActionBar_homeLayout
    int ActionBar_icon -> ActionBar_icon
    int ActionBar_indeterminateProgressStyle -> ActionBar_indeterminateProgressStyle
    int ActionBar_itemPadding -> ActionBar_itemPadding
    int ActionBar_logo -> ActionBar_logo
    int ActionBar_navigationMode -> ActionBar_navigationMode
    int ActionBar_progressBarPadding -> ActionBar_progressBarPadding
    int ActionBar_progressBarStyle -> ActionBar_progressBarStyle
    int ActionBar_subtitle -> ActionBar_subtitle
    int ActionBar_subtitleTextStyle -> ActionBar_subtitleTextStyle
    int ActionBar_title -> ActionBar_title
    int ActionBar_titleTextStyle -> ActionBar_titleTextStyle
    int[] ActionMenuItemView -> ActionMenuItemView
    int ActionMenuItemView_android_minWidth -> ActionMenuItemView_android_minWidth
    int[] ActionMenuView -> ActionMenuView
    int[] ActionMode -> ActionMode
    int ActionMode_background -> ActionMode_background
    int ActionMode_backgroundSplit -> ActionMode_backgroundSplit
    int ActionMode_height -> ActionMode_height
    int ActionMode_subtitleTextStyle -> ActionMode_subtitleTextStyle
    int ActionMode_titleTextStyle -> ActionMode_titleTextStyle
    int[] ActivityChooserView -> ActivityChooserView
    int ActivityChooserView_expandActivityOverflowButtonDrawable -> ActivityChooserView_expandActivityOverflowButtonDrawable
    int ActivityChooserView_initialActivityCount -> ActivityChooserView_initialActivityCount
    int[] CompatTextView -> CompatTextView
    int CompatTextView_textAllCaps -> CompatTextView_textAllCaps
    int[] LinearLayoutICS -> LinearLayoutICS
    int LinearLayoutICS_divider -> LinearLayoutICS_divider
    int LinearLayoutICS_dividerPadding -> LinearLayoutICS_dividerPadding
    int LinearLayoutICS_showDividers -> LinearLayoutICS_showDividers
    int[] MenuGroup -> MenuGroup
    int MenuGroup_android_checkableBehavior -> MenuGroup_android_checkableBehavior
    int MenuGroup_android_enabled -> MenuGroup_android_enabled
    int MenuGroup_android_id -> MenuGroup_android_id
    int MenuGroup_android_menuCategory -> MenuGroup_android_menuCategory
    int MenuGroup_android_orderInCategory -> MenuGroup_android_orderInCategory
    int MenuGroup_android_visible -> MenuGroup_android_visible
    int[] MenuItem -> MenuItem
    int MenuItem_actionLayout -> MenuItem_actionLayout
    int MenuItem_actionProviderClass -> MenuItem_actionProviderClass
    int MenuItem_actionViewClass -> MenuItem_actionViewClass
    int MenuItem_android_alphabeticShortcut -> MenuItem_android_alphabeticShortcut
    int MenuItem_android_checkable -> MenuItem_android_checkable
    int MenuItem_android_checked -> MenuItem_android_checked
    int MenuItem_android_enabled -> MenuItem_android_enabled
    int MenuItem_android_icon -> MenuItem_android_icon
    int MenuItem_android_id -> MenuItem_android_id
    int MenuItem_android_menuCategory -> MenuItem_android_menuCategory
    int MenuItem_android_numericShortcut -> MenuItem_android_numericShortcut
    int MenuItem_android_onClick -> MenuItem_android_onClick
    int MenuItem_android_orderInCategory -> MenuItem_android_orderInCategory
    int MenuItem_android_title -> MenuItem_android_title
    int MenuItem_android_titleCondensed -> MenuItem_android_titleCondensed
    int MenuItem_android_visible -> MenuItem_android_visible
    int MenuItem_showAsAction -> MenuItem_showAsAction
    int[] MenuView -> MenuView
    int MenuView_android_headerBackground -> MenuView_android_headerBackground
    int MenuView_android_horizontalDivider -> MenuView_android_horizontalDivider
    int MenuView_android_itemBackground -> MenuView_android_itemBackground
    int MenuView_android_itemIconDisabledAlpha -> MenuView_android_itemIconDisabledAlpha
    int MenuView_android_itemTextAppearance -> MenuView_android_itemTextAppearance
    int MenuView_android_preserveIconSpacing -> MenuView_android_preserveIconSpacing
    int MenuView_android_verticalDivider -> MenuView_android_verticalDivider
    int MenuView_android_windowAnimationStyle -> MenuView_android_windowAnimationStyle
    int[] SearchView -> SearchView
    int SearchView_android_imeOptions -> SearchView_android_imeOptions
    int SearchView_android_inputType -> SearchView_android_inputType
    int SearchView_android_maxWidth -> SearchView_android_maxWidth
    int SearchView_iconifiedByDefault -> SearchView_iconifiedByDefault
    int SearchView_queryHint -> SearchView_queryHint
    int[] Spinner -> Spinner
    int Spinner_android_dropDownHorizontalOffset -> Spinner_android_dropDownHorizontalOffset
    int Spinner_android_dropDownSelector -> Spinner_android_dropDownSelector
    int Spinner_android_dropDownVerticalOffset -> Spinner_android_dropDownVerticalOffset
    int Spinner_android_dropDownWidth -> Spinner_android_dropDownWidth
    int Spinner_android_gravity -> Spinner_android_gravity
    int Spinner_android_popupBackground -> Spinner_android_popupBackground
    int Spinner_disableChildrenWhenDisabled -> Spinner_disableChildrenWhenDisabled
    int Spinner_popupPromptView -> Spinner_popupPromptView
    int Spinner_prompt -> Spinner_prompt
    int Spinner_spinnerMode -> Spinner_spinnerMode
    int[] Theme -> Theme
    int Theme_actionDropDownStyle -> Theme_actionDropDownStyle
    int Theme_dropdownListPreferredItemHeight -> Theme_dropdownListPreferredItemHeight
    int Theme_listChoiceBackgroundIndicator -> Theme_listChoiceBackgroundIndicator
    int Theme_panelMenuListTheme -> Theme_panelMenuListTheme
    int Theme_panelMenuListWidth -> Theme_panelMenuListWidth
    int Theme_popupMenuStyle -> Theme_popupMenuStyle
    int[] View -> View
    int View_android_focusable -> View_android_focusable
    int View_paddingEnd -> View_paddingEnd
    int View_paddingStart -> View_paddingStart
android.support.v7.internal.view.ActionBarPolicy -> android.support.v7.internal.view.a:
    android.content.Context mContext -> a
    android.support.v7.internal.view.ActionBarPolicy get(android.content.Context) -> a
    int getMaxActionButtons() -> a
    boolean showsOverflowMenuButton() -> b
    int getEmbeddedMenuWidthLimit() -> c
    boolean hasEmbeddedTabs() -> d
    int getTabContainerHeight() -> e
    boolean enableHomeButtonByDefault() -> f
    int getStackedTabMaxWidth() -> g
android.support.v7.internal.view.ActionModeWrapper -> android.support.v7.internal.view.b:
    android.view.MenuInflater mInflater -> a
    android.view.ActionMode mWrappedObject -> b
    void finish() -> a
android.support.v7.internal.view.SupportMenuInflater -> android.support.v7.internal.view.c:
    java.lang.Class[] ACTION_VIEW_CONSTRUCTOR_SIGNATURE -> a
    java.lang.Class[] ACTION_PROVIDER_CONSTRUCTOR_SIGNATURE -> b
    java.lang.Object[] mActionViewConstructorArguments -> c
    java.lang.Object[] mActionProviderConstructorArguments -> d
    android.content.Context mContext -> e
    java.lang.Object mRealOwner -> f
    void inflate(int,android.view.Menu) -> inflate
    void parseMenu(org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.view.Menu) -> a
    android.content.Context access$100(android.support.v7.internal.view.SupportMenuInflater) -> a
    java.lang.Class[] access$200() -> a
    java.lang.Object[] access$300(android.support.v7.internal.view.SupportMenuInflater) -> b
    java.lang.Object access$400(android.support.v7.internal.view.SupportMenuInflater) -> c
    java.lang.Class[] access$500() -> b
    java.lang.Object[] access$600(android.support.v7.internal.view.SupportMenuInflater) -> d
android.support.v7.internal.view.SupportMenuInflater$InflatedOnMenuItemClickListener -> android.support.v7.internal.view.d:
    java.lang.Class[] PARAM_TYPES -> a
    java.lang.Object mRealOwner -> b
    java.lang.reflect.Method mMethod -> c
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
android.support.v7.internal.view.SupportMenuInflater$MenuState -> android.support.v7.internal.view.e:
    android.view.Menu menu -> b
    int groupId -> c
    int groupCategory -> d
    int groupOrder -> e
    int groupCheckable -> f
    boolean groupVisible -> g
    boolean groupEnabled -> h
    boolean itemAdded -> i
    int itemId -> j
    int itemCategoryOrder -> k
    java.lang.CharSequence itemTitle -> l
    java.lang.CharSequence itemTitleCondensed -> m
    int itemIconResId -> n
    char itemAlphabeticShortcut -> o
    char itemNumericShortcut -> p
    int itemCheckable -> q
    boolean itemChecked -> r
    boolean itemVisible -> s
    boolean itemEnabled -> t
    int itemShowAsAction -> u
    int itemActionViewLayout -> v
    java.lang.String itemActionViewClassName -> w
    java.lang.String itemActionProviderClassName -> x
    java.lang.String itemListenerMethodName -> y
    android.support.v4.view.ActionProvider itemActionProvider -> z
    android.support.v7.internal.view.SupportMenuInflater this$0 -> a
    void resetGroup() -> a
    void readGroup(android.util.AttributeSet) -> a
    void readItem(android.util.AttributeSet) -> b
    char getShortcut(java.lang.String) -> a
    void setItem(android.view.MenuItem) -> a
    void addItem() -> b
    android.view.SubMenu addSubMenuItem() -> c
    boolean hasAddedItem() -> d
    java.lang.Object newInstance(java.lang.String,java.lang.Class[],java.lang.Object[]) -> a
    android.support.v4.view.ActionProvider access$000(android.support.v7.internal.view.SupportMenuInflater$MenuState) -> a
android.support.v7.internal.view.menu.ActionMenuItem -> android.support.v7.internal.view.menu.a:
    int mId -> a
    int mGroup -> b
    int mCategoryOrder -> c
    int mOrdering -> d
    java.lang.CharSequence mTitle -> e
    java.lang.CharSequence mTitleCondensed -> f
    android.content.Intent mIntent -> g
    char mShortcutNumericChar -> h
    char mShortcutAlphabeticChar -> i
    android.graphics.drawable.Drawable mIconDrawable -> j
    int mIconResId -> k
    android.content.Context mContext -> l
    android.view.MenuItem$OnMenuItemClickListener mClickListener -> m
    int mFlags -> n
    char getAlphabeticShortcut() -> getAlphabeticShortcut
    int getGroupId() -> getGroupId
    android.graphics.drawable.Drawable getIcon() -> getIcon
    android.content.Intent getIntent() -> getIntent
    int getItemId() -> getItemId
    android.view.ContextMenu$ContextMenuInfo getMenuInfo() -> getMenuInfo
    char getNumericShortcut() -> getNumericShortcut
    int getOrder() -> getOrder
    android.view.SubMenu getSubMenu() -> getSubMenu
    java.lang.CharSequence getTitle() -> getTitle
    java.lang.CharSequence getTitleCondensed() -> getTitleCondensed
    boolean hasSubMenu() -> hasSubMenu
    boolean isCheckable() -> isCheckable
    boolean isChecked() -> isChecked
    boolean isEnabled() -> isEnabled
    boolean isVisible() -> isVisible
    android.view.MenuItem setAlphabeticShortcut(char) -> setAlphabeticShortcut
    android.view.MenuItem setCheckable(boolean) -> setCheckable
    android.view.MenuItem setChecked(boolean) -> setChecked
    android.view.MenuItem setEnabled(boolean) -> setEnabled
    android.view.MenuItem setIcon(android.graphics.drawable.Drawable) -> setIcon
    android.view.MenuItem setIcon(int) -> setIcon
    android.view.MenuItem setIntent(android.content.Intent) -> setIntent
    android.view.MenuItem setNumericShortcut(char) -> setNumericShortcut
    android.view.MenuItem setOnMenuItemClickListener(android.view.MenuItem$OnMenuItemClickListener) -> setOnMenuItemClickListener
    android.view.MenuItem setShortcut(char,char) -> setShortcut
    android.view.MenuItem setTitle(java.lang.CharSequence) -> setTitle
    android.view.MenuItem setTitle(int) -> setTitle
    android.view.MenuItem setTitleCondensed(java.lang.CharSequence) -> setTitleCondensed
    android.view.MenuItem setVisible(boolean) -> setVisible
    void setShowAsAction(int) -> setShowAsAction
    android.support.v4.internal.view.SupportMenuItem setActionView(android.view.View) -> a
    android.view.View getActionView() -> getActionView
    android.view.MenuItem setActionProvider(android.view.ActionProvider) -> setActionProvider
    android.view.ActionProvider getActionProvider() -> getActionProvider
    android.support.v4.internal.view.SupportMenuItem setActionView(int) -> a
    android.support.v4.internal.view.SupportMenuItem setSupportActionProvider(android.support.v4.view.ActionProvider) -> a
    android.support.v4.internal.view.SupportMenuItem setShowAsActionFlags(int) -> b
    boolean expandActionView() -> expandActionView
    boolean collapseActionView() -> collapseActionView
    boolean isActionViewExpanded() -> isActionViewExpanded
    android.view.MenuItem setOnActionExpandListener(android.view.MenuItem$OnActionExpandListener) -> setOnActionExpandListener
    android.view.MenuItem setActionView(int) -> setActionView
    android.view.MenuItem setActionView(android.view.View) -> setActionView
    android.view.MenuItem setShowAsActionFlags(int) -> setShowAsActionFlags
android.support.v7.internal.view.menu.ActionMenuItemView -> android.support.v7.internal.view.menu.ActionMenuItemView:
    android.support.v7.internal.view.menu.MenuItemImpl mItemData -> a
    java.lang.CharSequence mTitle -> b
    android.graphics.drawable.Drawable mIcon -> c
    android.support.v7.internal.view.menu.MenuBuilder$ItemInvoker mItemInvoker -> d
    boolean mAllowTextWithIcon -> e
    boolean mExpandedFormat -> f
    int mMinWidth -> g
    int mSavedPaddingLeft -> h
    void setPadding(int,int,int,int) -> setPadding
    android.support.v7.internal.view.menu.MenuItemImpl getItemData() -> getItemData
    void initialize(android.support.v7.internal.view.menu.MenuItemImpl,int) -> a
    void onClick(android.view.View) -> onClick
    void setItemInvoker(android.support.v7.internal.view.menu.MenuBuilder$ItemInvoker) -> setItemInvoker
    boolean prefersCondensedTitle() -> a
    void setCheckable(boolean) -> setCheckable
    void setChecked(boolean) -> setChecked
    void setExpandedFormat(boolean) -> setExpandedFormat
    void updateTextButtonVisibility() -> e
    void setIcon(android.graphics.drawable.Drawable) -> setIcon
    boolean hasText() -> b
    void setTitle(java.lang.CharSequence) -> setTitle
    boolean needsDividerBefore() -> c
    boolean needsDividerAfter() -> d
    boolean onLongClick(android.view.View) -> onLongClick
    void onMeasure(int,int) -> onMeasure
android.support.v7.internal.view.menu.ActionMenuItemView$AllCapsTransformationMethod -> android.support.v7.internal.view.menu.b:
    java.util.Locale mLocale -> b
    android.support.v7.internal.view.menu.ActionMenuItemView this$0 -> a
    java.lang.CharSequence getTransformation(java.lang.CharSequence,android.view.View) -> getTransformation
    void onFocusChanged(android.view.View,java.lang.CharSequence,boolean,int,android.graphics.Rect) -> onFocusChanged
android.support.v7.internal.view.menu.ActionMenuPresenter -> android.support.v7.internal.view.menu.ActionMenuPresenter:
    android.view.View mOverflowButton -> i
    boolean mReserveOverflow -> j
    boolean mReserveOverflowSet -> k
    int mWidthLimit -> l
    int mActionItemWidthLimit -> m
    int mMaxItems -> n
    boolean mMaxItemsSet -> o
    boolean mStrictWidthLimit -> p
    boolean mWidthLimitSet -> q
    boolean mExpandedActionViewsExclusive -> r
    int mMinCellSize -> s
    android.util.SparseBooleanArray mActionButtonGroups -> t
    android.view.View mScrapActionButtonView -> u
    android.support.v7.internal.view.menu.ActionMenuPresenter$OverflowPopup mOverflowPopup -> v
    android.support.v7.internal.view.menu.ActionMenuPresenter$ActionButtonSubmenu mActionButtonPopup -> w
    android.support.v7.internal.view.menu.ActionMenuPresenter$OpenOverflowRunnable mPostedOpenRunnable -> x
    android.support.v7.internal.view.menu.ActionMenuPresenter$PopupPresenterCallback mPopupPresenterCallback -> a
    int mOpenSubMenuId -> b
    void initForMenu(android.content.Context,android.support.v7.internal.view.menu.MenuBuilder) -> a
    void onConfigurationChanged(android.content.res.Configuration) -> a
    void setWidthLimit(int,boolean) -> a
    void setItemLimit(int) -> a
    void setExpandedActionViewsExclusive(boolean) -> a
    android.support.v7.internal.view.menu.MenuView getMenuView(android.view.ViewGroup) -> a
    android.view.View getItemView(android.support.v7.internal.view.menu.MenuItemImpl,android.view.View,android.view.ViewGroup) -> a
    void bindItemView(android.support.v7.internal.view.menu.MenuItemImpl,android.support.v7.internal.view.menu.MenuView$ItemView) -> a
    boolean shouldIncludeItem(int,android.support.v7.internal.view.menu.MenuItemImpl) -> a
    void updateMenuView(boolean) -> b
    boolean filterLeftoverView(android.view.ViewGroup,int) -> a
    boolean onSubMenuSelected(android.support.v7.internal.view.menu.SubMenuBuilder) -> a
    android.view.View findViewForItem(android.view.MenuItem) -> a
    boolean showOverflowMenu() -> a
    boolean hideOverflowMenu() -> b
    boolean dismissPopupMenus() -> c
    boolean hideSubMenus() -> d
    boolean isOverflowMenuShowing() -> e
    boolean isOverflowReserved() -> f
    boolean flagActionItems() -> g
    void onCloseMenu(android.support.v7.internal.view.menu.MenuBuilder,boolean) -> a
    android.support.v7.internal.view.menu.ActionMenuPresenter$OverflowPopup access$102(android.support.v7.internal.view.menu.ActionMenuPresenter,android.support.v7.internal.view.menu.ActionMenuPresenter$OverflowPopup) -> a
    android.support.v7.internal.view.menu.ActionMenuPresenter$ActionButtonSubmenu access$202(android.support.v7.internal.view.menu.ActionMenuPresenter,android.support.v7.internal.view.menu.ActionMenuPresenter$ActionButtonSubmenu) -> a
    android.support.v7.internal.view.menu.ActionMenuPresenter$OpenOverflowRunnable access$302(android.support.v7.internal.view.menu.ActionMenuPresenter,android.support.v7.internal.view.menu.ActionMenuPresenter$OpenOverflowRunnable) -> a
android.support.v7.internal.view.menu.ActionMenuPresenter$1 -> android.support.v7.internal.view.menu.c:
android.support.v7.internal.view.menu.ActionMenuPresenter$ActionButtonSubmenu -> android.support.v7.internal.view.menu.d:
    android.support.v7.internal.view.menu.ActionMenuPresenter this$0 -> a
    void onDismiss(android.content.DialogInterface) -> onDismiss
android.support.v7.internal.view.menu.ActionMenuPresenter$OpenOverflowRunnable -> android.support.v7.internal.view.menu.e:
    android.support.v7.internal.view.menu.ActionMenuPresenter$OverflowPopup mPopup -> b
    android.support.v7.internal.view.menu.ActionMenuPresenter this$0 -> a
    void run() -> run
android.support.v7.internal.view.menu.ActionMenuPresenter$OverflowMenuButton -> android.support.v7.internal.view.menu.f:
    android.support.v7.internal.view.menu.ActionMenuPresenter this$0 -> a
    boolean performClick() -> performClick
    boolean needsDividerBefore() -> c
    boolean needsDividerAfter() -> d
android.support.v7.internal.view.menu.ActionMenuPresenter$OverflowPopup -> android.support.v7.internal.view.menu.g:
    android.support.v7.internal.view.menu.ActionMenuPresenter this$0 -> a
    void onDismiss() -> onDismiss
android.support.v7.internal.view.menu.ActionMenuPresenter$PopupPresenterCallback -> android.support.v7.internal.view.menu.h:
    android.support.v7.internal.view.menu.ActionMenuPresenter this$0 -> a
    boolean onOpenSubMenu(android.support.v7.internal.view.menu.MenuBuilder) -> b
    void onCloseMenu(android.support.v7.internal.view.menu.MenuBuilder,boolean) -> a
android.support.v7.internal.view.menu.ActionMenuPresenter$SavedState -> android.support.v7.internal.view.menu.ActionMenuPresenter$SavedState:
    int openSubMenuId -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v7.internal.view.menu.ActionMenuPresenter$SavedState$1 -> android.support.v7.internal.view.menu.i:
    android.support.v7.internal.view.menu.ActionMenuPresenter$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v7.internal.view.menu.ActionMenuPresenter$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v7.internal.view.menu.ActionMenuView -> android.support.v7.internal.view.menu.ActionMenuView:
    android.support.v7.internal.view.menu.MenuBuilder mMenu -> a
    boolean mReserveOverflow -> b
    android.support.v7.internal.view.menu.ActionMenuPresenter mPresenter -> c
    boolean mFormatItems -> d
    int mFormatItemsWidth -> e
    int mMinCellSize -> f
    int mGeneratedItemPadding -> g
    int mMeasuredExtraWidth -> h
    int mMaxItemHeight -> i
    void setPresenter(android.support.v7.internal.view.menu.ActionMenuPresenter) -> setPresenter
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onMeasure(int,int) -> onMeasure
    void onMeasureExactFormat(int,int) -> a
    int measureChildForCells(android.view.View,int,int,int,int) -> a
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onDetachedFromWindow() -> onDetachedFromWindow
    void setOverflowReserved(boolean) -> setOverflowReserved
    android.support.v7.internal.view.menu.ActionMenuView$LayoutParams generateDefaultLayoutParams() -> a
    android.support.v7.internal.view.menu.ActionMenuView$LayoutParams generateLayoutParams(android.util.AttributeSet) -> a
    android.support.v7.internal.view.menu.ActionMenuView$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> a
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.support.v7.internal.view.menu.ActionMenuView$LayoutParams generateOverflowButtonLayoutParams() -> b
    boolean invokeItem(android.support.v7.internal.view.menu.MenuItemImpl) -> a
    int getWindowAnimations() -> getWindowAnimations
    void initialize(android.support.v7.internal.view.menu.MenuBuilder) -> a
    boolean hasSupportDividerBeforeChildAt(int) -> a
    boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    android.widget.LinearLayout$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    android.widget.LinearLayout$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.widget.LinearLayout$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
android.support.v7.internal.view.menu.ActionMenuView$ActionMenuChildView -> android.support.v7.internal.view.menu.j:
    boolean needsDividerBefore() -> c
    boolean needsDividerAfter() -> d
android.support.v7.internal.view.menu.ActionMenuView$LayoutParams -> android.support.v7.internal.view.menu.k:
    boolean isOverflowButton -> a
    int cellsUsed -> b
    int extraPixels -> c
    boolean expandable -> d
    boolean preventEdgeOffset -> e
    boolean expanded -> f
android.support.v7.internal.view.menu.BaseMenuPresenter -> android.support.v7.internal.view.menu.l:
    android.content.Context mSystemContext -> c
    android.content.Context mContext -> d
    android.support.v7.internal.view.menu.MenuBuilder mMenu -> e
    android.view.LayoutInflater mSystemInflater -> f
    android.view.LayoutInflater mInflater -> g
    android.support.v7.internal.view.menu.MenuPresenter$Callback mCallback -> a
    int mMenuLayoutRes -> b
    int mItemLayoutRes -> i
    android.support.v7.internal.view.menu.MenuView mMenuView -> h
    int mId -> j
    void initForMenu(android.content.Context,android.support.v7.internal.view.menu.MenuBuilder) -> a
    android.support.v7.internal.view.menu.MenuView getMenuView(android.view.ViewGroup) -> a
    void updateMenuView(boolean) -> b
    void addItemView(android.view.View,int) -> a
    boolean filterLeftoverView(android.view.ViewGroup,int) -> a
    void setCallback(android.support.v7.internal.view.menu.MenuPresenter$Callback) -> a
    android.support.v7.internal.view.menu.MenuView$ItemView createItemView(android.view.ViewGroup) -> b
    android.view.View getItemView(android.support.v7.internal.view.menu.MenuItemImpl,android.view.View,android.view.ViewGroup) -> a
    void bindItemView(android.support.v7.internal.view.menu.MenuItemImpl,android.support.v7.internal.view.menu.MenuView$ItemView) -> a
    boolean shouldIncludeItem(int,android.support.v7.internal.view.menu.MenuItemImpl) -> a
    void onCloseMenu(android.support.v7.internal.view.menu.MenuBuilder,boolean) -> a
    boolean onSubMenuSelected(android.support.v7.internal.view.menu.SubMenuBuilder) -> a
    boolean flagActionItems() -> g
    boolean expandItemActionView(android.support.v7.internal.view.menu.MenuBuilder,android.support.v7.internal.view.menu.MenuItemImpl) -> a
    boolean collapseItemActionView(android.support.v7.internal.view.menu.MenuBuilder,android.support.v7.internal.view.menu.MenuItemImpl) -> b
    void setId(int) -> b
android.support.v7.internal.view.menu.BaseMenuWrapper -> android.support.v7.internal.view.menu.m:
    java.util.HashMap mMenuItems -> b
    java.util.HashMap mSubMenus -> c
    android.support.v4.internal.view.SupportMenuItem getMenuItemWrapper(android.view.MenuItem) -> a
    android.view.SubMenu getSubMenuWrapper(android.view.SubMenu) -> a
    void internalClear() -> a
    void internalRemoveGroup(int) -> a
    void internalRemoveItem(int) -> b
android.support.v7.internal.view.menu.BaseWrapper -> android.support.v7.internal.view.menu.n:
    java.lang.Object mWrappedObject -> a
android.support.v7.internal.view.menu.ExpandedMenuView -> android.support.v7.internal.view.menu.ExpandedMenuView:
    android.support.v7.internal.view.menu.MenuBuilder mMenu -> a
    int mAnimations -> b
    void initialize(android.support.v7.internal.view.menu.MenuBuilder) -> a
    void onDetachedFromWindow() -> onDetachedFromWindow
    boolean invokeItem(android.support.v7.internal.view.menu.MenuItemImpl) -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    int getWindowAnimations() -> getWindowAnimations
android.support.v7.internal.view.menu.ListMenuItemView -> android.support.v7.internal.view.menu.ListMenuItemView:
    android.support.v7.internal.view.menu.MenuItemImpl mItemData -> a
    android.widget.ImageView mIconView -> b
    android.widget.RadioButton mRadioButton -> c
    android.widget.TextView mTitleView -> d
    android.widget.CheckBox mCheckBox -> e
    android.widget.TextView mShortcutView -> f
    android.graphics.drawable.Drawable mBackground -> g
    int mTextAppearance -> h
    android.content.Context mTextAppearanceContext -> i
    boolean mPreserveIconSpacing -> j
    int mMenuType -> k
    android.content.Context mContext -> l
    android.view.LayoutInflater mInflater -> m
    boolean mForceShowIcon -> n
    void onFinishInflate() -> onFinishInflate
    void initialize(android.support.v7.internal.view.menu.MenuItemImpl,int) -> a
    void setForceShowIcon(boolean) -> setForceShowIcon
    void setTitle(java.lang.CharSequence) -> setTitle
    android.support.v7.internal.view.menu.MenuItemImpl getItemData() -> getItemData
    void setCheckable(boolean) -> setCheckable
    void setChecked(boolean) -> setChecked
    void setShortcut(boolean,char) -> a
    void setIcon(android.graphics.drawable.Drawable) -> setIcon
    void onMeasure(int,int) -> onMeasure
    void insertIconView() -> b
    void insertRadioButton() -> c
    void insertCheckBox() -> d
    boolean prefersCondensedTitle() -> a
    android.view.LayoutInflater getInflater() -> getInflater
android.support.v7.internal.view.menu.ListMenuPresenter -> android.support.v7.internal.view.menu.o:
    android.content.Context mContext -> a
    android.view.LayoutInflater mInflater -> b
    android.support.v7.internal.view.menu.MenuBuilder mMenu -> c
    android.support.v7.internal.view.menu.ExpandedMenuView mMenuView -> d
    int mItemIndexOffset -> h
    int mThemeRes -> e
    int mItemLayoutRes -> f
    android.support.v7.internal.view.menu.MenuPresenter$Callback mCallback -> i
    android.support.v7.internal.view.menu.ListMenuPresenter$MenuAdapter mAdapter -> g
    void initForMenu(android.content.Context,android.support.v7.internal.view.menu.MenuBuilder) -> a
    android.support.v7.internal.view.menu.MenuView getMenuView(android.view.ViewGroup) -> a
    android.widget.ListAdapter getAdapter() -> a
    void updateMenuView(boolean) -> b
    void setCallback(android.support.v7.internal.view.menu.MenuPresenter$Callback) -> a
    boolean onSubMenuSelected(android.support.v7.internal.view.menu.SubMenuBuilder) -> a
    void onCloseMenu(android.support.v7.internal.view.menu.MenuBuilder,boolean) -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    boolean flagActionItems() -> g
    boolean expandItemActionView(android.support.v7.internal.view.menu.MenuBuilder,android.support.v7.internal.view.menu.MenuItemImpl) -> a
    boolean collapseItemActionView(android.support.v7.internal.view.menu.MenuBuilder,android.support.v7.internal.view.menu.MenuItemImpl) -> b
    int access$000(android.support.v7.internal.view.menu.ListMenuPresenter) -> a
android.support.v7.internal.view.menu.ListMenuPresenter$MenuAdapter -> android.support.v7.internal.view.menu.p:
    int mExpandedIndex -> b
    android.support.v7.internal.view.menu.ListMenuPresenter this$0 -> a
    int getCount() -> getCount
    android.support.v7.internal.view.menu.MenuItemImpl getItem(int) -> a
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void findExpandedIndex() -> a
    void notifyDataSetChanged() -> notifyDataSetChanged
    java.lang.Object getItem(int) -> getItem
android.support.v7.internal.view.menu.MenuBuilder -> android.support.v7.internal.view.menu.q:
    int[] sCategoryToOrder -> d
    android.content.Context mContext -> e
    android.content.res.Resources mResources -> f
    boolean mQwertyMode -> g
    boolean mShortcutsVisible -> h
    android.support.v7.internal.view.menu.MenuBuilder$Callback mCallback -> i
    java.util.ArrayList mItems -> j
    java.util.ArrayList mVisibleItems -> k
    boolean mIsVisibleItemsStale -> l
    java.util.ArrayList mActionItems -> m
    java.util.ArrayList mNonActionItems -> n
    boolean mIsActionItemsStale -> o
    int mDefaultShowAsAction -> p
    android.view.ContextMenu$ContextMenuInfo mCurrentMenuInfo -> q
    java.lang.CharSequence mHeaderTitle -> a
    android.graphics.drawable.Drawable mHeaderIcon -> b
    android.view.View mHeaderView -> c
    boolean mPreventDispatchingItemsChanged -> r
    boolean mItemsChangedWhileDispatchPrevented -> s
    boolean mOptionalIconsVisible -> t
    boolean mIsClosing -> u
    java.util.ArrayList mTempShortcutItemList -> v
    java.util.concurrent.CopyOnWriteArrayList mPresenters -> w
    android.support.v7.internal.view.menu.MenuItemImpl mExpandedItem -> x
    void addMenuPresenter(android.support.v7.internal.view.menu.MenuPresenter) -> a
    void removeMenuPresenter(android.support.v7.internal.view.menu.MenuPresenter) -> b
    void dispatchPresenterUpdate(boolean) -> c
    boolean dispatchSubMenuSelected(android.support.v7.internal.view.menu.SubMenuBuilder) -> a
    void setCallback(android.support.v7.internal.view.menu.MenuBuilder$Callback) -> a
    android.view.MenuItem addInternal(int,int,int,java.lang.CharSequence) -> a
    android.view.MenuItem add(java.lang.CharSequence) -> add
    android.view.MenuItem add(int) -> add
    android.view.MenuItem add(int,int,int,java.lang.CharSequence) -> add
    android.view.MenuItem add(int,int,int,int) -> add
    android.view.SubMenu addSubMenu(java.lang.CharSequence) -> addSubMenu
    android.view.SubMenu addSubMenu(int) -> addSubMenu
    android.view.SubMenu addSubMenu(int,int,int,java.lang.CharSequence) -> addSubMenu
    android.view.SubMenu addSubMenu(int,int,int,int) -> addSubMenu
    int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,android.view.MenuItem[]) -> addIntentOptions
    void removeItem(int) -> removeItem
    void removeGroup(int) -> removeGroup
    void removeItemAtInt(int,boolean) -> a
    void clear() -> clear
    void setExclusiveItemChecked(android.view.MenuItem) -> a
    void setGroupCheckable(int,boolean,boolean) -> setGroupCheckable
    void setGroupVisible(int,boolean) -> setGroupVisible
    void setGroupEnabled(int,boolean) -> setGroupEnabled
    boolean hasVisibleItems() -> hasVisibleItems
    android.view.MenuItem findItem(int) -> findItem
    int findItemIndex(int) -> a
    int findGroupIndex(int) -> b
    int findGroupIndex(int,int) -> a
    int size() -> size
    android.view.MenuItem getItem(int) -> getItem
    boolean isShortcutKey(int,android.view.KeyEvent) -> isShortcutKey
    void setQwertyMode(boolean) -> setQwertyMode
    int getOrdering(int) -> c
    boolean isQwertyMode() -> a
    void setShortcutsVisibleInner(boolean) -> d
    boolean isShortcutsVisible() -> b
    android.content.res.Resources getResources() -> c
    android.content.Context getContext() -> d
    boolean dispatchMenuItemSelected(android.support.v7.internal.view.menu.MenuBuilder,android.view.MenuItem) -> a
    void changeMenuMode() -> e
    int findInsertIndex(java.util.ArrayList,int) -> a
    boolean performShortcut(int,android.view.KeyEvent,int) -> performShortcut
    void findItemsWithShortcutForKey(java.util.List,int,android.view.KeyEvent) -> a
    android.support.v7.internal.view.menu.MenuItemImpl findItemWithShortcutForKey(int,android.view.KeyEvent) -> a
    boolean performIdentifierAction(int,int) -> performIdentifierAction
    boolean performItemAction(android.view.MenuItem,int) -> a
    void close(boolean) -> a
    void close() -> close
    void onItemsChanged(boolean) -> b
    void stopDispatchingItemsChanged() -> f
    void startDispatchingItemsChanged() -> g
    void onItemVisibleChanged(android.support.v7.internal.view.menu.MenuItemImpl) -> a
    void onItemActionRequestChanged(android.support.v7.internal.view.menu.MenuItemImpl) -> b
    java.util.ArrayList getVisibleItems() -> h
    void flagActionItems() -> i
    java.util.ArrayList getActionItems() -> j
    java.util.ArrayList getNonActionItems() -> k
    void clearHeader() -> clearHeader
    void setHeaderInternal(int,java.lang.CharSequence,int,android.graphics.drawable.Drawable,android.view.View) -> a
    android.support.v7.internal.view.menu.MenuBuilder setHeaderTitleInt(java.lang.CharSequence) -> a
    android.support.v7.internal.view.menu.MenuBuilder setHeaderIconInt(android.graphics.drawable.Drawable) -> a
    android.support.v7.internal.view.menu.MenuBuilder setHeaderViewInt(android.view.View) -> a
    java.lang.CharSequence getHeaderTitle() -> l
    android.graphics.drawable.Drawable getHeaderIcon() -> m
    android.view.View getHeaderView() -> n
    android.support.v7.internal.view.menu.MenuBuilder getRootMenu() -> o
    boolean getOptionalIconsVisible() -> p
    boolean expandItemActionView(android.support.v7.internal.view.menu.MenuItemImpl) -> c
    boolean collapseItemActionView(android.support.v7.internal.view.menu.MenuItemImpl) -> d
    android.support.v7.internal.view.menu.MenuItemImpl getExpandedItem() -> q
android.support.v7.internal.view.menu.MenuBuilder$Callback -> android.support.v7.internal.view.menu.r:
    boolean onMenuItemSelected(android.support.v7.internal.view.menu.MenuBuilder,android.view.MenuItem) -> a
    void onMenuModeChange(android.support.v7.internal.view.menu.MenuBuilder) -> a
android.support.v7.internal.view.menu.MenuBuilder$ItemInvoker -> android.support.v7.internal.view.menu.s:
    boolean invokeItem(android.support.v7.internal.view.menu.MenuItemImpl) -> a
android.support.v7.internal.view.menu.MenuDialogHelper -> android.support.v7.internal.view.menu.t:
    android.support.v7.internal.view.menu.MenuBuilder mMenu -> a
    android.app.AlertDialog mDialog -> c
    android.support.v7.internal.view.menu.ListMenuPresenter mPresenter -> b
    android.support.v7.internal.view.menu.MenuPresenter$Callback mPresenterCallback -> d
    void show(android.os.IBinder) -> a
    boolean onKey(android.content.DialogInterface,int,android.view.KeyEvent) -> onKey
    void dismiss() -> a
    void onDismiss(android.content.DialogInterface) -> onDismiss
    void onCloseMenu(android.support.v7.internal.view.menu.MenuBuilder,boolean) -> a
    boolean onOpenSubMenu(android.support.v7.internal.view.menu.MenuBuilder) -> b
    void onClick(android.content.DialogInterface,int) -> onClick
android.support.v7.internal.view.menu.MenuItemImpl -> android.support.v7.internal.view.menu.u:
    int mId -> a
    int mGroup -> b
    int mCategoryOrder -> c
    int mOrdering -> d
    java.lang.CharSequence mTitle -> e
    java.lang.CharSequence mTitleCondensed -> f
    android.content.Intent mIntent -> g
    char mShortcutNumericChar -> h
    char mShortcutAlphabeticChar -> i
    android.graphics.drawable.Drawable mIconDrawable -> j
    int mIconResId -> k
    android.support.v7.internal.view.menu.MenuBuilder mMenu -> l
    android.support.v7.internal.view.menu.SubMenuBuilder mSubMenu -> m
    java.lang.Runnable mItemCallback -> n
    android.view.MenuItem$OnMenuItemClickListener mClickListener -> o
    int mFlags -> p
    int mShowAsAction -> q
    android.view.View mActionView -> r
    android.support.v4.view.ActionProvider mActionProvider -> s
    android.support.v4.view.MenuItemCompat$OnActionExpandListener mOnActionExpandListener -> t
    boolean mIsActionViewExpanded -> u
    android.view.ContextMenu$ContextMenuInfo mMenuInfo -> v
    java.lang.String sPrependShortcutLabel -> w
    java.lang.String sEnterShortcutLabel -> x
    java.lang.String sDeleteShortcutLabel -> y
    java.lang.String sSpaceShortcutLabel -> z
    boolean invoke() -> a
    boolean isEnabled() -> isEnabled
    android.view.MenuItem setEnabled(boolean) -> setEnabled
    int getGroupId() -> getGroupId
    int getItemId() -> getItemId
    int getOrder() -> getOrder
    int getOrdering() -> b
    android.content.Intent getIntent() -> getIntent
    android.view.MenuItem setIntent(android.content.Intent) -> setIntent
    char getAlphabeticShortcut() -> getAlphabeticShortcut
    android.view.MenuItem setAlphabeticShortcut(char) -> setAlphabeticShortcut
    char getNumericShortcut() -> getNumericShortcut
    android.view.MenuItem setNumericShortcut(char) -> setNumericShortcut
    android.view.MenuItem setShortcut(char,char) -> setShortcut
    char getShortcut() -> c
    java.lang.String getShortcutLabel() -> d
    boolean shouldShowShortcut() -> e
    android.view.SubMenu getSubMenu() -> getSubMenu
    boolean hasSubMenu() -> hasSubMenu
    void setSubMenu(android.support.v7.internal.view.menu.SubMenuBuilder) -> a
    java.lang.CharSequence getTitle() -> getTitle
    java.lang.CharSequence getTitleForItemView(android.support.v7.internal.view.menu.MenuView$ItemView) -> a
    android.view.MenuItem setTitle(java.lang.CharSequence) -> setTitle
    android.view.MenuItem setTitle(int) -> setTitle
    java.lang.CharSequence getTitleCondensed() -> getTitleCondensed
    android.view.MenuItem setTitleCondensed(java.lang.CharSequence) -> setTitleCondensed
    android.graphics.drawable.Drawable getIcon() -> getIcon
    android.view.MenuItem setIcon(android.graphics.drawable.Drawable) -> setIcon
    android.view.MenuItem setIcon(int) -> setIcon
    boolean isCheckable() -> isCheckable
    android.view.MenuItem setCheckable(boolean) -> setCheckable
    void setExclusiveCheckable(boolean) -> a
    boolean isExclusiveCheckable() -> f
    boolean isChecked() -> isChecked
    android.view.MenuItem setChecked(boolean) -> setChecked
    void setCheckedInt(boolean) -> b
    boolean isVisible() -> isVisible
    boolean setVisibleInt(boolean) -> c
    android.view.MenuItem setVisible(boolean) -> setVisible
    android.view.MenuItem setOnMenuItemClickListener(android.view.MenuItem$OnMenuItemClickListener) -> setOnMenuItemClickListener
    java.lang.String toString() -> toString
    void setMenuInfo(android.view.ContextMenu$ContextMenuInfo) -> a
    android.view.ContextMenu$ContextMenuInfo getMenuInfo() -> getMenuInfo
    void actionFormatChanged() -> g
    boolean shouldShowIcon() -> h
    boolean isActionButton() -> i
    boolean requestsActionButton() -> j
    boolean requiresActionButton() -> k
    void setIsActionButton(boolean) -> d
    boolean showsTextAsAction() -> l
    void setShowAsAction(int) -> setShowAsAction
    android.support.v4.internal.view.SupportMenuItem setActionView(android.view.View) -> a
    android.support.v4.internal.view.SupportMenuItem setActionView(int) -> a
    android.view.View getActionView() -> getActionView
    android.view.MenuItem setActionProvider(android.view.ActionProvider) -> setActionProvider
    android.view.ActionProvider getActionProvider() -> getActionProvider
    android.support.v4.view.ActionProvider getSupportActionProvider() -> m
    android.support.v4.internal.view.SupportMenuItem setSupportActionProvider(android.support.v4.view.ActionProvider) -> a
    android.support.v4.internal.view.SupportMenuItem setShowAsActionFlags(int) -> b
    boolean expandActionView() -> expandActionView
    boolean collapseActionView() -> collapseActionView
    boolean hasCollapsibleActionView() -> n
    void setActionViewExpanded(boolean) -> e
    boolean isActionViewExpanded() -> isActionViewExpanded
    android.view.MenuItem setOnActionExpandListener(android.view.MenuItem$OnActionExpandListener) -> setOnActionExpandListener
    android.view.MenuItem setActionView(int) -> setActionView
    android.view.MenuItem setActionView(android.view.View) -> setActionView
    android.view.MenuItem setShowAsActionFlags(int) -> setShowAsActionFlags
    android.support.v7.internal.view.menu.MenuBuilder access$000(android.support.v7.internal.view.menu.MenuItemImpl) -> a
android.support.v7.internal.view.menu.MenuItemImpl$1 -> android.support.v7.internal.view.menu.v:
    android.support.v7.internal.view.menu.MenuItemImpl this$0 -> a
    void onActionProviderVisibilityChanged(boolean) -> a
android.support.v7.internal.view.menu.MenuItemWrapperICS -> android.support.v7.internal.view.menu.w:
    boolean mEmulateProviderVisibilityOverride -> b
    boolean mLastRequestVisible -> c
    int getItemId() -> getItemId
    int getGroupId() -> getGroupId
    int getOrder() -> getOrder
    android.view.MenuItem setTitle(java.lang.CharSequence) -> setTitle
    android.view.MenuItem setTitle(int) -> setTitle
    java.lang.CharSequence getTitle() -> getTitle
    android.view.MenuItem setTitleCondensed(java.lang.CharSequence) -> setTitleCondensed
    java.lang.CharSequence getTitleCondensed() -> getTitleCondensed
    android.view.MenuItem setIcon(android.graphics.drawable.Drawable) -> setIcon
    android.view.MenuItem setIcon(int) -> setIcon
    android.graphics.drawable.Drawable getIcon() -> getIcon
    android.view.MenuItem setIntent(android.content.Intent) -> setIntent
    android.content.Intent getIntent() -> getIntent
    android.view.MenuItem setShortcut(char,char) -> setShortcut
    android.view.MenuItem setNumericShortcut(char) -> setNumericShortcut
    char getNumericShortcut() -> getNumericShortcut
    android.view.MenuItem setAlphabeticShortcut(char) -> setAlphabeticShortcut
    char getAlphabeticShortcut() -> getAlphabeticShortcut
    android.view.MenuItem setCheckable(boolean) -> setCheckable
    boolean isCheckable() -> isCheckable
    android.view.MenuItem setChecked(boolean) -> setChecked
    boolean isChecked() -> isChecked
    android.view.MenuItem setVisible(boolean) -> setVisible
    boolean isVisible() -> isVisible
    android.view.MenuItem setEnabled(boolean) -> setEnabled
    boolean isEnabled() -> isEnabled
    boolean hasSubMenu() -> hasSubMenu
    android.view.SubMenu getSubMenu() -> getSubMenu
    android.view.MenuItem setOnMenuItemClickListener(android.view.MenuItem$OnMenuItemClickListener) -> setOnMenuItemClickListener
    android.view.ContextMenu$ContextMenuInfo getMenuInfo() -> getMenuInfo
    void setShowAsAction(int) -> setShowAsAction
    android.view.MenuItem setShowAsActionFlags(int) -> setShowAsActionFlags
    android.view.MenuItem setActionView(android.view.View) -> setActionView
    android.view.MenuItem setActionView(int) -> setActionView
    android.view.View getActionView() -> getActionView
    android.view.MenuItem setActionProvider(android.view.ActionProvider) -> setActionProvider
    android.view.ActionProvider getActionProvider() -> getActionProvider
    boolean expandActionView() -> expandActionView
    boolean collapseActionView() -> collapseActionView
    boolean isActionViewExpanded() -> isActionViewExpanded
    android.view.MenuItem setOnActionExpandListener(android.view.MenuItem$OnActionExpandListener) -> setOnActionExpandListener
    android.support.v4.internal.view.SupportMenuItem setSupportActionProvider(android.support.v4.view.ActionProvider) -> a
    android.support.v4.view.ActionProvider getSupportActionProvider() -> b
    android.support.v7.internal.view.menu.MenuItemWrapperICS$ActionProviderWrapper createActionProviderWrapper(android.support.v4.view.ActionProvider) -> b
    boolean checkActionProviderOverrideVisibility() -> c
    android.view.MenuItem wrappedSetVisible(boolean) -> a
    boolean access$000(android.support.v7.internal.view.menu.MenuItemWrapperICS) -> a
    boolean access$100(android.support.v7.internal.view.menu.MenuItemWrapperICS) -> b
android.support.v7.internal.view.menu.MenuItemWrapperICS$ActionProviderWrapper -> android.support.v7.internal.view.menu.x:
    android.support.v4.view.ActionProvider mInner -> a
    android.support.v7.internal.view.menu.MenuItemWrapperICS this$0 -> b
    android.view.View onCreateActionView() -> onCreateActionView
    boolean onPerformDefaultAction() -> onPerformDefaultAction
    boolean hasSubMenu() -> hasSubMenu
    void onPrepareSubMenu(android.view.SubMenu) -> onPrepareSubMenu
android.support.v7.internal.view.menu.MenuItemWrapperICS$ActionProviderWrapper$1 -> android.support.v7.internal.view.menu.y:
    android.support.v7.internal.view.menu.MenuItemWrapperICS val$this$0 -> a
    android.support.v7.internal.view.menu.MenuItemWrapperICS$ActionProviderWrapper this$1 -> b
    void onActionProviderVisibilityChanged(boolean) -> a
android.support.v7.internal.view.menu.MenuItemWrapperICS$CollapsibleActionViewWrapper -> android.support.v7.internal.view.menu.z:
    android.support.v7.view.CollapsibleActionView mWrappedView -> a
    void onActionViewExpanded() -> onActionViewExpanded
    void onActionViewCollapsed() -> onActionViewCollapsed
    android.view.View getWrappedView() -> a
android.support.v7.internal.view.menu.MenuItemWrapperICS$OnMenuItemClickListenerWrapper -> android.support.v7.internal.view.menu.aa:
    android.support.v7.internal.view.menu.MenuItemWrapperICS this$0 -> b
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
android.support.v7.internal.view.menu.MenuItemWrapperJB -> android.support.v7.internal.view.menu.ab:
    android.support.v7.internal.view.menu.MenuItemWrapperICS$ActionProviderWrapper createActionProviderWrapper(android.support.v4.view.ActionProvider) -> b
android.support.v7.internal.view.menu.MenuItemWrapperJB$ActionProviderWrapperJB -> android.support.v7.internal.view.menu.ac:
    android.view.ActionProvider$VisibilityListener mListener -> c
    android.support.v7.internal.view.menu.MenuItemWrapperJB this$0 -> d
    android.view.View onCreateActionView(android.view.MenuItem) -> onCreateActionView
    boolean overridesItemVisibility() -> overridesItemVisibility
    boolean isVisible() -> isVisible
    void refreshVisibility() -> refreshVisibility
    void setVisibilityListener(android.view.ActionProvider$VisibilityListener) -> setVisibilityListener
    void onActionProviderVisibilityChanged(boolean) -> a
android.support.v7.internal.view.menu.MenuPopupHelper -> android.support.v7.internal.view.menu.ad:
    int ITEM_LAYOUT -> b
    android.content.Context mContext -> a
    android.view.LayoutInflater mInflater -> d
    android.support.v7.internal.widget.ListPopupWindow mPopup -> e
    android.support.v7.internal.view.menu.MenuBuilder mMenu -> f
    int mPopupMaxWidth -> g
    android.view.View mAnchorView -> h
    boolean mOverflowOnly -> i
    android.view.ViewTreeObserver mTreeObserver -> j
    android.support.v7.internal.view.menu.MenuPopupHelper$MenuAdapter mAdapter -> k
    android.support.v7.internal.view.menu.MenuPresenter$Callback mPresenterCallback -> l
    boolean mForceShowIcon -> c
    android.view.ViewGroup mMeasureParent -> m
    void setForceShowIcon(boolean) -> a
    boolean tryShow() -> a
    void dismiss() -> b
    void onDismiss() -> onDismiss
    boolean isShowing() -> c
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    boolean onKey(android.view.View,int,android.view.KeyEvent) -> onKey
    int measureContentWidth(android.widget.ListAdapter) -> a
    void onGlobalLayout() -> onGlobalLayout
    void initForMenu(android.content.Context,android.support.v7.internal.view.menu.MenuBuilder) -> a
    void updateMenuView(boolean) -> b
    void setCallback(android.support.v7.internal.view.menu.MenuPresenter$Callback) -> a
    boolean onSubMenuSelected(android.support.v7.internal.view.menu.SubMenuBuilder) -> a
    void onCloseMenu(android.support.v7.internal.view.menu.MenuBuilder,boolean) -> a
    boolean flagActionItems() -> g
    boolean expandItemActionView(android.support.v7.internal.view.menu.MenuBuilder,android.support.v7.internal.view.menu.MenuItemImpl) -> a
    boolean collapseItemActionView(android.support.v7.internal.view.menu.MenuBuilder,android.support.v7.internal.view.menu.MenuItemImpl) -> b
    boolean access$100(android.support.v7.internal.view.menu.MenuPopupHelper) -> a
    android.view.LayoutInflater access$200(android.support.v7.internal.view.menu.MenuPopupHelper) -> b
    android.support.v7.internal.view.menu.MenuBuilder access$300(android.support.v7.internal.view.menu.MenuPopupHelper) -> c
android.support.v7.internal.view.menu.MenuPopupHelper$MenuAdapter -> android.support.v7.internal.view.menu.ae:
    android.support.v7.internal.view.menu.MenuBuilder mAdapterMenu -> b
    int mExpandedIndex -> c
    android.support.v7.internal.view.menu.MenuPopupHelper this$0 -> a
    int getCount() -> getCount
    android.support.v7.internal.view.menu.MenuItemImpl getItem(int) -> a
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void findExpandedIndex() -> a
    void notifyDataSetChanged() -> notifyDataSetChanged
    java.lang.Object getItem(int) -> getItem
    android.support.v7.internal.view.menu.MenuBuilder access$000(android.support.v7.internal.view.menu.MenuPopupHelper$MenuAdapter) -> a
android.support.v7.internal.view.menu.MenuPresenter -> android.support.v7.internal.view.menu.af:
    void initForMenu(android.content.Context,android.support.v7.internal.view.menu.MenuBuilder) -> a
    void updateMenuView(boolean) -> b
    boolean onSubMenuSelected(android.support.v7.internal.view.menu.SubMenuBuilder) -> a
    void onCloseMenu(android.support.v7.internal.view.menu.MenuBuilder,boolean) -> a
    boolean flagActionItems() -> g
    boolean expandItemActionView(android.support.v7.internal.view.menu.MenuBuilder,android.support.v7.internal.view.menu.MenuItemImpl) -> a
    boolean collapseItemActionView(android.support.v7.internal.view.menu.MenuBuilder,android.support.v7.internal.view.menu.MenuItemImpl) -> b
android.support.v7.internal.view.menu.MenuPresenter$Callback -> android.support.v7.internal.view.menu.ag:
    void onCloseMenu(android.support.v7.internal.view.menu.MenuBuilder,boolean) -> a
    boolean onOpenSubMenu(android.support.v7.internal.view.menu.MenuBuilder) -> b
android.support.v7.internal.view.menu.MenuView -> android.support.v7.internal.view.menu.ah:
    void initialize(android.support.v7.internal.view.menu.MenuBuilder) -> a
android.support.v7.internal.view.menu.MenuView$ItemView -> android.support.v7.internal.view.menu.ai:
    void initialize(android.support.v7.internal.view.menu.MenuItemImpl,int) -> a
    android.support.v7.internal.view.menu.MenuItemImpl getItemData() -> getItemData
    boolean prefersCondensedTitle() -> a
android.support.v7.internal.view.menu.MenuWrapperFactory -> android.support.v7.internal.view.menu.aj:
    android.view.Menu createMenuWrapper(android.view.Menu) -> a
    android.view.MenuItem createMenuItemWrapper(android.view.MenuItem) -> a
    android.support.v4.internal.view.SupportSubMenu createSupportSubMenuWrapper(android.view.SubMenu) -> a
    android.support.v4.internal.view.SupportMenuItem createSupportMenuItemWrapper(android.view.MenuItem) -> b
android.support.v7.internal.view.menu.MenuWrapperICS -> android.support.v7.internal.view.menu.ak:
    android.view.MenuItem add(java.lang.CharSequence) -> add
    android.view.MenuItem add(int) -> add
    android.view.MenuItem add(int,int,int,java.lang.CharSequence) -> add
    android.view.MenuItem add(int,int,int,int) -> add
    android.view.SubMenu addSubMenu(java.lang.CharSequence) -> addSubMenu
    android.view.SubMenu addSubMenu(int) -> addSubMenu
    android.view.SubMenu addSubMenu(int,int,int,java.lang.CharSequence) -> addSubMenu
    android.view.SubMenu addSubMenu(int,int,int,int) -> addSubMenu
    int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,android.view.MenuItem[]) -> addIntentOptions
    void removeItem(int) -> removeItem
    void removeGroup(int) -> removeGroup
    void clear() -> clear
    void setGroupCheckable(int,boolean,boolean) -> setGroupCheckable
    void setGroupVisible(int,boolean) -> setGroupVisible
    void setGroupEnabled(int,boolean) -> setGroupEnabled
    boolean hasVisibleItems() -> hasVisibleItems
    android.view.MenuItem findItem(int) -> findItem
    int size() -> size
    android.view.MenuItem getItem(int) -> getItem
    void close() -> close
    boolean performShortcut(int,android.view.KeyEvent,int) -> performShortcut
    boolean isShortcutKey(int,android.view.KeyEvent) -> isShortcutKey
    boolean performIdentifierAction(int,int) -> performIdentifierAction
    void setQwertyMode(boolean) -> setQwertyMode
android.support.v7.internal.view.menu.SubMenuBuilder -> android.support.v7.internal.view.menu.al:
    android.support.v7.internal.view.menu.MenuBuilder mParentMenu -> d
    android.support.v7.internal.view.menu.MenuItemImpl mItem -> e
    void setQwertyMode(boolean) -> setQwertyMode
    boolean isQwertyMode() -> a
    boolean isShortcutsVisible() -> b
    android.view.Menu getParentMenu() -> r
    android.view.MenuItem getItem() -> getItem
    void setCallback(android.support.v7.internal.view.menu.MenuBuilder$Callback) -> a
    android.support.v7.internal.view.menu.MenuBuilder getRootMenu() -> o
    boolean dispatchMenuItemSelected(android.support.v7.internal.view.menu.MenuBuilder,android.view.MenuItem) -> a
    android.view.SubMenu setIcon(android.graphics.drawable.Drawable) -> setIcon
    android.view.SubMenu setIcon(int) -> setIcon
    android.view.SubMenu setHeaderIcon(android.graphics.drawable.Drawable) -> setHeaderIcon
    android.view.SubMenu setHeaderIcon(int) -> setHeaderIcon
    android.view.SubMenu setHeaderTitle(java.lang.CharSequence) -> setHeaderTitle
    android.view.SubMenu setHeaderTitle(int) -> setHeaderTitle
    android.view.SubMenu setHeaderView(android.view.View) -> setHeaderView
    void clearHeader() -> clearHeader
    boolean expandItemActionView(android.support.v7.internal.view.menu.MenuItemImpl) -> c
    boolean collapseItemActionView(android.support.v7.internal.view.menu.MenuItemImpl) -> d
android.support.v7.internal.view.menu.SubMenuWrapperICS -> android.support.v7.internal.view.menu.am:
    android.view.SubMenu setHeaderTitle(int) -> setHeaderTitle
    android.view.SubMenu setHeaderTitle(java.lang.CharSequence) -> setHeaderTitle
    android.view.SubMenu setHeaderIcon(int) -> setHeaderIcon
    android.view.SubMenu setHeaderIcon(android.graphics.drawable.Drawable) -> setHeaderIcon
    android.view.SubMenu setHeaderView(android.view.View) -> setHeaderView
    void clearHeader() -> clearHeader
    android.view.SubMenu setIcon(int) -> setIcon
    android.view.SubMenu setIcon(android.graphics.drawable.Drawable) -> setIcon
    android.view.MenuItem getItem() -> getItem
android.support.v7.internal.widget.AbsActionBarView -> android.support.v7.internal.widget.a:
    android.support.v7.internal.view.menu.ActionMenuView mMenuView -> a
    android.support.v7.internal.view.menu.ActionMenuPresenter mActionMenuPresenter -> b
    android.support.v7.internal.widget.ActionBarContainer mSplitView -> c
    boolean mSplitActionBar -> d
    boolean mSplitWhenNarrow -> e
    int mContentHeight -> f
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void setSplitActionBar(boolean) -> setSplitActionBar
    void setSplitWhenNarrow(boolean) -> setSplitWhenNarrow
    void setContentHeight(int) -> setContentHeight
    int getContentHeight() -> getContentHeight
    void setSplitView(android.support.v7.internal.widget.ActionBarContainer) -> setSplitView
    int getAnimatedVisibility() -> getAnimatedVisibility
    void setVisibility(int) -> setVisibility
    boolean showOverflowMenu() -> a
    void postShowOverflowMenu() -> b
    boolean hideOverflowMenu() -> c
    boolean isOverflowMenuShowing() -> d
    boolean isOverflowReserved() -> e
    int measureChildView(android.view.View,int,int,int) -> a
    int positionChild(android.view.View,int,int,int) -> b
    int positionChildInverse(android.view.View,int,int,int) -> c
android.support.v7.internal.widget.AbsActionBarView$1 -> android.support.v7.internal.widget.b:
    android.support.v7.internal.widget.AbsActionBarView this$0 -> a
    void run() -> run
android.support.v7.internal.widget.AbsSpinnerICS -> android.support.v7.internal.widget.AbsSpinnerICS:
    android.widget.SpinnerAdapter mAdapter -> a
    int mHeightMeasureSpec -> b
    int mWidthMeasureSpec -> c
    boolean mBlockLayoutRequests -> d
    int mSelectionLeftPadding -> e
    int mSelectionTopPadding -> f
    int mSelectionRightPadding -> g
    int mSelectionBottomPadding -> h
    android.graphics.Rect mSpinnerPadding -> i
    android.support.v7.internal.widget.AbsSpinnerICS$RecycleBin mRecycler -> j
    android.database.DataSetObserver mDataSetObserver -> E
    void initAbsSpinner() -> o
    void setAdapter(android.widget.SpinnerAdapter) -> a
    void resetList() -> a
    void onMeasure(int,int) -> onMeasure
    int getChildHeight(android.view.View) -> a
    int getChildWidth(android.view.View) -> b
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    void recycleAllViews() -> b
    void setSelection(int) -> a
    android.view.View getSelectedView() -> c
    void requestLayout() -> requestLayout
    android.widget.SpinnerAdapter getAdapter() -> d
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    android.widget.Adapter getAdapter() -> e
    void access$100(android.support.v7.internal.widget.AbsSpinnerICS,android.view.View,boolean) -> a
android.support.v7.internal.widget.AbsSpinnerICS$1 -> android.support.v7.internal.widget.c:
android.support.v7.internal.widget.AbsSpinnerICS$RecycleBin -> android.support.v7.internal.widget.d:
    android.util.SparseArray mScrapHeap -> b
    android.support.v7.internal.widget.AbsSpinnerICS this$0 -> a
    void put(int,android.view.View) -> a
    android.view.View get(int) -> a
    void clear() -> a
android.support.v7.internal.widget.AbsSpinnerICS$SavedState -> android.support.v7.internal.widget.AbsSpinnerICS$SavedState:
    long selectedId -> a
    int position -> b
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
android.support.v7.internal.widget.AbsSpinnerICS$SavedState$1 -> android.support.v7.internal.widget.e:
    android.support.v7.internal.widget.AbsSpinnerICS$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v7.internal.widget.AbsSpinnerICS$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v7.internal.widget.ActionBarContainer -> android.support.v7.internal.widget.ActionBarContainer:
    boolean mIsTransitioning -> a
    android.view.View mTabContainer -> b
    android.support.v7.internal.widget.ActionBarView mActionBarView -> c
    android.graphics.drawable.Drawable mBackground -> d
    android.graphics.drawable.Drawable mStackedBackground -> e
    android.graphics.drawable.Drawable mSplitBackground -> f
    boolean mIsSplit -> g
    boolean mIsStacked -> h
    void onFinishInflate() -> onFinishInflate
    void setPrimaryBackground(android.graphics.drawable.Drawable) -> setPrimaryBackground
    void setStackedBackground(android.graphics.drawable.Drawable) -> setStackedBackground
    void setSplitBackground(android.graphics.drawable.Drawable) -> setSplitBackground
    void setVisibility(int) -> setVisibility
    boolean verifyDrawable(android.graphics.drawable.Drawable) -> verifyDrawable
    void drawableStateChanged() -> drawableStateChanged
    void setTransitioning(boolean) -> setTransitioning
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean onHoverEvent(android.view.MotionEvent) -> onHoverEvent
    void setTabContainer(android.support.v7.internal.widget.ScrollingTabContainerView) -> setTabContainer
    android.view.View getTabContainer() -> getTabContainer
    void onDraw(android.graphics.Canvas) -> onDraw
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
android.support.v7.internal.widget.ActionBarContextView -> android.support.v7.internal.widget.ActionBarContextView:
    java.lang.CharSequence mTitle -> g
    java.lang.CharSequence mSubtitle -> h
    android.view.View mClose -> i
    android.view.View mCustomView -> j
    android.widget.LinearLayout mTitleLayout -> k
    android.widget.TextView mTitleView -> l
    android.widget.TextView mSubtitleView -> m
    int mTitleStyleRes -> n
    int mSubtitleStyleRes -> o
    android.graphics.drawable.Drawable mSplitBackground -> p
    boolean mTitleOptional -> q
    void onDetachedFromWindow() -> onDetachedFromWindow
    void setSplitActionBar(boolean) -> setSplitActionBar
    void setContentHeight(int) -> setContentHeight
    void setCustomView(android.view.View) -> setCustomView
    void setTitle(java.lang.CharSequence) -> setTitle
    void setSubtitle(java.lang.CharSequence) -> setSubtitle
    java.lang.CharSequence getTitle() -> getTitle
    java.lang.CharSequence getSubtitle() -> getSubtitle
    void initTitle() -> f
    boolean showOverflowMenu() -> a
    boolean hideOverflowMenu() -> c
    boolean isOverflowMenuShowing() -> d
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    void setTitleOptional(boolean) -> setTitleOptional
    boolean isOverflowReserved() -> e
    void postShowOverflowMenu() -> b
    void setVisibility(int) -> setVisibility
    int getAnimatedVisibility() -> getAnimatedVisibility
    void setSplitView(android.support.v7.internal.widget.ActionBarContainer) -> setSplitView
    int getContentHeight() -> getContentHeight
    void setSplitWhenNarrow(boolean) -> setSplitWhenNarrow
android.support.v7.internal.widget.ActionBarOverlayLayout -> android.support.v7.internal.widget.ActionBarOverlayLayout:
    int mActionBarHeight -> b
    android.support.v7.app.ActionBar mActionBar -> c
    android.graphics.Rect mZeroRect -> d
    int[] mActionBarSizeAttr -> a
    void init(android.content.Context) -> a
    void setActionBar(android.support.v7.app.ActionBar) -> setActionBar
android.support.v7.internal.widget.ActionBarView -> android.support.v7.internal.widget.ActionBarView:
    int mNavigationMode -> i
    int mDisplayOptions -> j
    java.lang.CharSequence mTitle -> k
    java.lang.CharSequence mSubtitle -> l
    android.graphics.drawable.Drawable mIcon -> m
    android.graphics.drawable.Drawable mLogo -> n
    android.content.Context mContext -> o
    android.support.v7.internal.widget.ActionBarView$HomeView mHomeLayout -> p
    android.support.v7.internal.widget.ActionBarView$HomeView mExpandedHomeLayout -> q
    android.widget.LinearLayout mTitleLayout -> r
    android.widget.TextView mTitleView -> s
    android.widget.TextView mSubtitleView -> t
    android.view.View mTitleUpView -> u
    android.support.v7.internal.widget.SpinnerICS mSpinner -> v
    android.widget.LinearLayout mListNavLayout -> w
    android.support.v7.internal.widget.ScrollingTabContainerView mTabScrollView -> x
    android.view.View mCustomNavView -> y
    android.support.v7.internal.widget.ProgressBarICS mProgressView -> z
    android.support.v7.internal.widget.ProgressBarICS mIndeterminateProgressView -> A
    int mProgressBarPadding -> B
    int mItemPadding -> C
    int mTitleStyleRes -> D
    int mSubtitleStyleRes -> E
    int mProgressStyle -> F
    int mIndeterminateProgressStyle -> G
    boolean mUserTitle -> H
    boolean mIncludeTabs -> I
    boolean mIsCollapsable -> J
    boolean mIsCollapsed -> K
    android.support.v7.internal.view.menu.MenuBuilder mOptionsMenu -> L
    android.support.v7.internal.widget.ActionBarContextView mContextView -> M
    android.support.v7.internal.view.menu.ActionMenuItem mLogoNavItem -> N
    android.widget.SpinnerAdapter mSpinnerAdapter -> O
    android.support.v7.app.ActionBar$OnNavigationListener mCallback -> P
    java.lang.Runnable mTabSelector -> Q
    android.support.v7.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter mExpandedMenuPresenter -> R
    android.view.View mExpandedActionView -> g
    android.view.Window$Callback mWindowCallback -> h
    android.support.v7.internal.widget.AdapterViewICS$OnItemSelectedListener mNavItemSelectedListener -> S
    android.view.View$OnClickListener mExpandedActionViewUpListener -> T
    android.view.View$OnClickListener mUpClickListener -> U
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void setWindowCallback(android.view.Window$Callback) -> setWindowCallback
    void onDetachedFromWindow() -> onDetachedFromWindow
    boolean shouldDelayChildPressedState() -> shouldDelayChildPressedState
    void initProgress() -> f
    void initIndeterminateProgress() -> g
    void setSplitActionBar(boolean) -> setSplitActionBar
    boolean isSplitActionBar() -> h
    void setEmbeddedTabView(android.support.v7.internal.widget.ScrollingTabContainerView) -> setEmbeddedTabView
    void setCallback(android.support.v7.app.ActionBar$OnNavigationListener) -> setCallback
    void setMenu(android.support.v4.internal.view.SupportMenu,android.support.v7.internal.view.menu.MenuPresenter$Callback) -> a
    void configPresenters(android.support.v7.internal.view.menu.MenuBuilder) -> a
    boolean hasExpandedActionView() -> i
    void collapseActionView() -> j
    void setCustomNavigationView(android.view.View) -> setCustomNavigationView
    java.lang.CharSequence getTitle() -> getTitle
    void setTitle(java.lang.CharSequence) -> setTitle
    void setWindowTitle(java.lang.CharSequence) -> setWindowTitle
    void setTitleImpl(java.lang.CharSequence) -> setTitleImpl
    java.lang.CharSequence getSubtitle() -> getSubtitle
    void setSubtitle(java.lang.CharSequence) -> setSubtitle
    void setHomeButtonEnabled(boolean) -> setHomeButtonEnabled
    void setDisplayOptions(int) -> setDisplayOptions
    void setIcon(android.graphics.drawable.Drawable) -> setIcon
    void setIcon(int) -> setIcon
    void setLogo(android.graphics.drawable.Drawable) -> setLogo
    void setLogo(int) -> setLogo
    void setNavigationMode(int) -> setNavigationMode
    void setDropdownAdapter(android.widget.SpinnerAdapter) -> setDropdownAdapter
    android.widget.SpinnerAdapter getDropdownAdapter() -> getDropdownAdapter
    void setDropdownSelectedPosition(int) -> setDropdownSelectedPosition
    int getDropdownSelectedPosition() -> getDropdownSelectedPosition
    android.view.View getCustomNavigationView() -> getCustomNavigationView
    int getNavigationMode() -> getNavigationMode
    int getDisplayOptions() -> getDisplayOptions
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    void onFinishInflate() -> onFinishInflate
    void initTitle() -> l
    void setContextView(android.support.v7.internal.widget.ActionBarContextView) -> setContextView
    void setCollapsable(boolean) -> setCollapsable
    boolean isCollapsed() -> k
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void setHomeAsUpIndicator(android.graphics.drawable.Drawable) -> setHomeAsUpIndicator
    void setHomeAsUpIndicator(int) -> setHomeAsUpIndicator
    boolean isOverflowReserved() -> e
    boolean isOverflowMenuShowing() -> d
    boolean hideOverflowMenu() -> c
    void postShowOverflowMenu() -> b
    boolean showOverflowMenu() -> a
    void setVisibility(int) -> setVisibility
    int getAnimatedVisibility() -> getAnimatedVisibility
    void setSplitView(android.support.v7.internal.widget.ActionBarContainer) -> setSplitView
    int getContentHeight() -> getContentHeight
    void setContentHeight(int) -> setContentHeight
    void setSplitWhenNarrow(boolean) -> setSplitWhenNarrow
    android.support.v7.app.ActionBar$OnNavigationListener access$000(android.support.v7.internal.widget.ActionBarView) -> a
    android.support.v7.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter access$100(android.support.v7.internal.widget.ActionBarView) -> b
    android.support.v7.internal.view.menu.ActionMenuItem access$200(android.support.v7.internal.widget.ActionBarView) -> c
    android.graphics.drawable.Drawable access$500(android.support.v7.internal.widget.ActionBarView) -> d
    android.support.v7.internal.widget.ActionBarView$HomeView access$600(android.support.v7.internal.widget.ActionBarView) -> e
    android.support.v7.internal.widget.ActionBarView$HomeView access$700(android.support.v7.internal.widget.ActionBarView) -> f
    android.widget.LinearLayout access$800(android.support.v7.internal.widget.ActionBarView) -> g
    android.support.v7.internal.widget.ScrollingTabContainerView access$900(android.support.v7.internal.widget.ActionBarView) -> h
    android.support.v7.internal.widget.SpinnerICS access$1000(android.support.v7.internal.widget.ActionBarView) -> i
    android.view.View access$1100(android.support.v7.internal.widget.ActionBarView) -> j
    int access$1200(android.support.v7.internal.widget.ActionBarView) -> k
    void access$1300(android.support.v7.internal.widget.ActionBarView) -> l
    int access$1400(android.support.v7.internal.widget.ActionBarView) -> m
android.support.v7.internal.widget.ActionBarView$1 -> android.support.v7.internal.widget.f:
    android.support.v7.internal.widget.ActionBarView this$0 -> a
    void onItemSelected(android.support.v7.internal.widget.AdapterViewICS,android.view.View,int,long) -> a
    void onNothingSelected(android.support.v7.internal.widget.AdapterViewICS) -> a
android.support.v7.internal.widget.ActionBarView$2 -> android.support.v7.internal.widget.g:
    android.support.v7.internal.widget.ActionBarView this$0 -> a
    void onClick(android.view.View) -> onClick
android.support.v7.internal.widget.ActionBarView$3 -> android.support.v7.internal.widget.h:
    android.support.v7.internal.widget.ActionBarView this$0 -> a
    void onClick(android.view.View) -> onClick
android.support.v7.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter -> android.support.v7.internal.widget.i:
    android.support.v7.internal.view.menu.MenuBuilder mMenu -> a
    android.support.v7.internal.view.menu.MenuItemImpl mCurrentExpandedItem -> b
    android.support.v7.internal.widget.ActionBarView this$0 -> c
    void initForMenu(android.content.Context,android.support.v7.internal.view.menu.MenuBuilder) -> a
    void updateMenuView(boolean) -> b
    boolean onSubMenuSelected(android.support.v7.internal.view.menu.SubMenuBuilder) -> a
    void onCloseMenu(android.support.v7.internal.view.menu.MenuBuilder,boolean) -> a
    boolean flagActionItems() -> g
    boolean expandItemActionView(android.support.v7.internal.view.menu.MenuBuilder,android.support.v7.internal.view.menu.MenuItemImpl) -> a
    boolean collapseItemActionView(android.support.v7.internal.view.menu.MenuBuilder,android.support.v7.internal.view.menu.MenuItemImpl) -> b
android.support.v7.internal.widget.ActionBarView$HomeView -> android.support.v7.internal.widget.ActionBarView$HomeView:
    android.widget.ImageView mUpView -> a
    android.widget.ImageView mIconView -> b
    int mUpWidth -> c
    int mUpIndicatorRes -> d
    android.graphics.drawable.Drawable mDefaultUpIndicator -> e
    void setUp(boolean) -> a
    void setIcon(android.graphics.drawable.Drawable) -> a
    void setUpIndicator(android.graphics.drawable.Drawable) -> b
    void setUpIndicator(int) -> a
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    void onFinishInflate() -> onFinishInflate
    int getLeftOffset() -> a
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
android.support.v7.internal.widget.ActionBarView$SavedState -> android.support.v7.internal.widget.ActionBarView$SavedState:
    int expandedMenuItemId -> a
    boolean isOverflowOpen -> b
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v7.internal.widget.ActionBarView$SavedState$1 -> android.support.v7.internal.widget.j:
    android.support.v7.internal.widget.ActionBarView$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v7.internal.widget.ActionBarView$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v7.internal.widget.AdapterViewICS -> android.support.v7.internal.widget.k:
    int mFirstPosition -> k
    int mSpecificTop -> l
    int mSyncPosition -> m
    long mSyncRowId -> n
    long mSyncHeight -> o
    boolean mNeedSync -> p
    int mSyncMode -> q
    int mLayoutHeight -> a
    boolean mInLayout -> r
    android.support.v7.internal.widget.AdapterViewICS$OnItemSelectedListener mOnItemSelectedListener -> s
    android.support.v7.internal.widget.AdapterViewICS$OnItemClickListener mOnItemClickListener -> t
    boolean mDataChanged -> u
    int mNextSelectedPosition -> v
    long mNextSelectedRowId -> w
    int mSelectedPosition -> x
    long mSelectedRowId -> y
    android.view.View mEmptyView -> b
    int mItemCount -> z
    int mOldItemCount -> A
    int mOldSelectedPosition -> B
    long mOldSelectedRowId -> C
    boolean mDesiredFocusableState -> c
    boolean mDesiredFocusableInTouchModeState -> d
    android.support.v7.internal.widget.AdapterViewICS$SelectionNotifier mSelectionNotifier -> e
    boolean mBlockLayoutRequests -> D
    void setOnItemClickListener(android.support.v7.internal.widget.AdapterViewICS$OnItemClickListener) -> a
    boolean performItemClick(android.view.View,int,long) -> a
    void setOnItemSelectedListener(android.support.v7.internal.widget.AdapterViewICS$OnItemSelectedListener) -> a
    android.widget.Adapter getAdapter() -> e
    void addView(android.view.View) -> addView
    void addView(android.view.View,int) -> addView
    void addView(android.view.View,android.view.ViewGroup$LayoutParams) -> addView
    void addView(android.view.View,int,android.view.ViewGroup$LayoutParams) -> addView
    void removeView(android.view.View) -> removeView
    void removeViewAt(int) -> removeViewAt
    void removeAllViews() -> removeAllViews
    void onLayout(boolean,int,int,int,int) -> onLayout
    int getSelectedItemPosition() -> f
    long getSelectedItemId() -> g
    android.view.View getSelectedView() -> c
    boolean isInFilterMode() -> h
    void setFocusable(boolean) -> setFocusable
    void setFocusableInTouchMode(boolean) -> setFocusableInTouchMode
    void checkFocus() -> i
    void updateEmptyStatus(boolean) -> a
    long getItemIdAtPosition(int) -> b
    void setOnClickListener(android.view.View$OnClickListener) -> setOnClickListener
    void dispatchSaveInstanceState(android.util.SparseArray) -> dispatchSaveInstanceState
    void dispatchRestoreInstanceState(android.util.SparseArray) -> dispatchRestoreInstanceState
    void onDetachedFromWindow() -> onDetachedFromWindow
    void selectionChanged() -> j
    void fireOnSelected() -> a
    boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    boolean canAnimate() -> canAnimate
    void handleDataChanged() -> k
    void checkSelectionChanged() -> l
    int findSyncPosition() -> m
    int lookForSelectablePosition(int,boolean) -> a
    void setSelectedPositionInt(int) -> c
    void setNextSelectedPositionInt(int) -> d
    void rememberSyncState() -> n
    void access$000(android.support.v7.internal.widget.AdapterViewICS,android.os.Parcelable) -> a
    android.os.Parcelable access$100(android.support.v7.internal.widget.AdapterViewICS) -> a
    void access$200(android.support.v7.internal.widget.AdapterViewICS) -> b
android.support.v7.internal.widget.AdapterViewICS$1 -> android.support.v7.internal.widget.l:
android.support.v7.internal.widget.AdapterViewICS$AdapterDataSetObserver -> android.support.v7.internal.widget.m:
    android.os.Parcelable mInstanceState -> b
    android.support.v7.internal.widget.AdapterViewICS this$0 -> a
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
android.support.v7.internal.widget.AdapterViewICS$OnItemClickListener -> android.support.v7.internal.widget.n:
    void onItemClick(android.support.v7.internal.widget.AdapterViewICS,android.view.View,int,long) -> a
android.support.v7.internal.widget.AdapterViewICS$OnItemClickListenerWrapper -> android.support.v7.internal.widget.o:
    android.support.v7.internal.widget.AdapterViewICS$OnItemClickListener mWrappedListener -> b
    android.support.v7.internal.widget.AdapterViewICS this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
android.support.v7.internal.widget.AdapterViewICS$OnItemSelectedListener -> android.support.v7.internal.widget.p:
    void onItemSelected(android.support.v7.internal.widget.AdapterViewICS,android.view.View,int,long) -> a
    void onNothingSelected(android.support.v7.internal.widget.AdapterViewICS) -> a
android.support.v7.internal.widget.AdapterViewICS$SelectionNotifier -> android.support.v7.internal.widget.q:
    android.support.v7.internal.widget.AdapterViewICS this$0 -> a
    void run() -> run
android.support.v7.internal.widget.CompatTextView -> android.support.v7.internal.widget.r:
android.support.v7.internal.widget.CompatTextView$AllCapsTransformationMethod -> android.support.v7.internal.widget.s:
    java.util.Locale mLocale -> a
    java.lang.CharSequence getTransformation(java.lang.CharSequence,android.view.View) -> getTransformation
    void onFocusChanged(android.view.View,java.lang.CharSequence,boolean,int,android.graphics.Rect) -> onFocusChanged
android.support.v7.internal.widget.LinearLayoutICS -> android.support.v7.internal.widget.LinearLayoutICS:
    android.graphics.drawable.Drawable mDivider -> a
    int mDividerWidth -> b
    int mDividerHeight -> c
    int mShowDividers -> d
    int mDividerPadding -> e
    int getSupportDividerWidth() -> getSupportDividerWidth
    void onDraw(android.graphics.Canvas) -> onDraw
    void measureChildWithMargins(android.view.View,int,int,int,int) -> measureChildWithMargins
    void drawSupportDividersVertical(android.graphics.Canvas) -> a
    void drawSupportDividersHorizontal(android.graphics.Canvas) -> b
    void drawSupportHorizontalDivider(android.graphics.Canvas,int) -> a
    void drawSupportVerticalDivider(android.graphics.Canvas,int) -> b
    boolean hasSupportDividerBeforeChildAt(int) -> a
android.support.v7.internal.widget.ListPopupWindow -> android.support.v7.internal.widget.t:
    android.content.Context mContext -> b
    android.widget.PopupWindow mPopup -> c
    android.widget.ListAdapter mAdapter -> d
    android.support.v7.internal.widget.ListPopupWindow$DropDownListView mDropDownList -> e
    int mDropDownHeight -> f
    int mDropDownWidth -> g
    int mDropDownHorizontalOffset -> h
    int mDropDownVerticalOffset -> i
    boolean mDropDownVerticalOffsetSet -> j
    boolean mDropDownAlwaysVisible -> k
    boolean mForceIgnoreOutsideTouch -> l
    int mListItemExpandMaximum -> a
    android.view.View mPromptView -> m
    int mPromptPosition -> n
    android.database.DataSetObserver mObserver -> o
    android.view.View mDropDownAnchorView -> p
    android.graphics.drawable.Drawable mDropDownListHighlight -> q
    android.widget.AdapterView$OnItemClickListener mItemClickListener -> r
    android.widget.AdapterView$OnItemSelectedListener mItemSelectedListener -> s
    android.support.v7.internal.widget.ListPopupWindow$ResizePopupRunnable mResizePopupRunnable -> t
    android.support.v7.internal.widget.ListPopupWindow$PopupTouchInterceptor mTouchInterceptor -> u
    android.support.v7.internal.widget.ListPopupWindow$PopupScrollListener mScrollListener -> v
    android.support.v7.internal.widget.ListPopupWindow$ListSelectorHider mHideSelector -> w
    java.lang.Runnable mShowDropDownRunnable -> x
    android.os.Handler mHandler -> y
    android.graphics.Rect mTempRect -> z
    boolean mModal -> A
    void setAdapter(android.widget.ListAdapter) -> a
    void setPromptPosition(int) -> a
    void setModal(boolean) -> a
    android.graphics.drawable.Drawable getBackground() -> a
    void setBackgroundDrawable(android.graphics.drawable.Drawable) -> a
    android.view.View getAnchorView() -> b
    void setAnchorView(android.view.View) -> a
    void setHorizontalOffset(int) -> b
    void setVerticalOffset(int) -> c
    void setWidth(int) -> d
    void setContentWidth(int) -> e
    void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener) -> a
    void show() -> c
    void dismiss() -> d
    void setOnDismissListener(android.widget.PopupWindow$OnDismissListener) -> a
    void removePromptView() -> i
    void setInputMethodMode(int) -> f
    void setSelection(int) -> g
    void clearListSelection() -> e
    boolean isShowing() -> f
    boolean isInputMethodNotNeeded() -> g
    android.widget.ListView getListView() -> h
    int buildDropDown() -> j
    int getMaxAvailableHeight(android.view.View,int,boolean) -> a
    android.support.v7.internal.widget.ListPopupWindow$DropDownListView access$700(android.support.v7.internal.widget.ListPopupWindow) -> a
    android.widget.PopupWindow access$800(android.support.v7.internal.widget.ListPopupWindow) -> b
    android.support.v7.internal.widget.ListPopupWindow$ResizePopupRunnable access$900(android.support.v7.internal.widget.ListPopupWindow) -> c
    android.os.Handler access$1000(android.support.v7.internal.widget.ListPopupWindow) -> d
android.support.v7.internal.widget.ListPopupWindow$1 -> android.support.v7.internal.widget.u:
    android.support.v7.internal.widget.ListPopupWindow this$0 -> a
    void run() -> run
android.support.v7.internal.widget.ListPopupWindow$2 -> android.support.v7.internal.widget.v:
    android.support.v7.internal.widget.ListPopupWindow this$0 -> a
    void onItemSelected(android.widget.AdapterView,android.view.View,int,long) -> onItemSelected
    void onNothingSelected(android.widget.AdapterView) -> onNothingSelected
android.support.v7.internal.widget.ListPopupWindow$DropDownListView -> android.support.v7.internal.widget.w:
    boolean mListSelectionHidden -> a
    boolean mHijackFocus -> b
    boolean isInTouchMode() -> isInTouchMode
    boolean hasWindowFocus() -> hasWindowFocus
    boolean isFocused() -> isFocused
    boolean hasFocus() -> hasFocus
    int measureHeightOfChildrenCompat(int,int,int,int,int) -> a
    boolean access$502(android.support.v7.internal.widget.ListPopupWindow$DropDownListView,boolean) -> a
android.support.v7.internal.widget.ListPopupWindow$ListSelectorHider -> android.support.v7.internal.widget.x:
    android.support.v7.internal.widget.ListPopupWindow this$0 -> a
    void run() -> run
android.support.v7.internal.widget.ListPopupWindow$PopupDataSetObserver -> android.support.v7.internal.widget.y:
    android.support.v7.internal.widget.ListPopupWindow this$0 -> a
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
android.support.v7.internal.widget.ListPopupWindow$PopupScrollListener -> android.support.v7.internal.widget.z:
    android.support.v7.internal.widget.ListPopupWindow this$0 -> a
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
android.support.v7.internal.widget.ListPopupWindow$PopupTouchInterceptor -> android.support.v7.internal.widget.aa:
    android.support.v7.internal.widget.ListPopupWindow this$0 -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
android.support.v7.internal.widget.ListPopupWindow$ResizePopupRunnable -> android.support.v7.internal.widget.ab:
    android.support.v7.internal.widget.ListPopupWindow this$0 -> a
    void run() -> run
android.support.v7.internal.widget.NativeActionModeAwareLayout -> android.support.v7.internal.widget.NativeActionModeAwareLayout:
    android.support.v7.internal.widget.NativeActionModeAwareLayout$OnActionModeForChildListener mActionModeForChildListener -> a
    void setActionModeForChildListener(android.support.v7.internal.widget.NativeActionModeAwareLayout$OnActionModeForChildListener) -> setActionModeForChildListener
    android.view.ActionMode startActionModeForChild(android.view.View,android.view.ActionMode$Callback) -> startActionModeForChild
android.support.v7.internal.widget.NativeActionModeAwareLayout$OnActionModeForChildListener -> android.support.v7.internal.widget.ac:
    android.view.ActionMode$Callback onActionModeForChild(android.view.ActionMode$Callback) -> a
android.support.v7.internal.widget.ProgressBarICS -> android.support.v7.internal.widget.ProgressBarICS:
    int[] android_R_styleable_ProgressBar -> f
    int mMinWidth -> a
    int mMaxWidth -> b
    int mMinHeight -> c
    int mMaxHeight -> d
    int mProgress -> g
    int mSecondaryProgress -> h
    int mMax -> i
    int mBehavior -> j
    int mDuration -> k
    boolean mIndeterminate -> l
    boolean mOnlyIndeterminate -> m
    android.view.animation.Transformation mTransformation -> n
    android.view.animation.AlphaAnimation mAnimation -> o
    android.graphics.drawable.Drawable mIndeterminateDrawable -> p
    android.graphics.drawable.Drawable mProgressDrawable -> q
    android.graphics.drawable.Drawable mCurrentDrawable -> r
    android.graphics.Bitmap mSampleTile -> e
    boolean mNoInvalidate -> s
    android.view.animation.Interpolator mInterpolator -> t
    android.support.v7.internal.widget.ProgressBarICS$RefreshProgressRunnable mRefreshProgressRunnable -> u
    long mUiThreadId -> v
    boolean mShouldStartAnimationDrawable -> w
    long mLastDrawTime -> x
    boolean mInDrawing -> y
    android.graphics.drawable.Drawable tileify(android.graphics.drawable.Drawable,boolean) -> a
    android.graphics.drawable.shapes.Shape getDrawableShape() -> getDrawableShape
    android.graphics.drawable.Drawable tileifyIndeterminate(android.graphics.drawable.Drawable) -> a
    void initProgressBar() -> c
    void setIndeterminate(boolean) -> setIndeterminate
    android.graphics.drawable.Drawable getIndeterminateDrawable() -> getIndeterminateDrawable
    void setIndeterminateDrawable(android.graphics.drawable.Drawable) -> setIndeterminateDrawable
    android.graphics.drawable.Drawable getProgressDrawable() -> getProgressDrawable
    void setProgressDrawable(android.graphics.drawable.Drawable) -> setProgressDrawable
    boolean verifyDrawable(android.graphics.drawable.Drawable) -> verifyDrawable
    void postInvalidate() -> postInvalidate
    void doRefreshProgress(int,int,boolean,boolean) -> a
    void refreshProgress(int,int,boolean) -> a
    void setProgress(int) -> setProgress
    void setProgress(int,boolean) -> a
    void setSecondaryProgress(int) -> setSecondaryProgress
    int getProgress() -> getProgress
    int getSecondaryProgress() -> getSecondaryProgress
    int getMax() -> getMax
    void setMax(int) -> setMax
    void startAnimation() -> a
    void stopAnimation() -> b
    void setInterpolator(android.content.Context,int) -> a
    void setInterpolator(android.view.animation.Interpolator) -> setInterpolator
    android.view.animation.Interpolator getInterpolator() -> getInterpolator
    void setVisibility(int) -> setVisibility
    void onVisibilityChanged(android.view.View,int) -> onVisibilityChanged
    void invalidateDrawable(android.graphics.drawable.Drawable) -> invalidateDrawable
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void updateDrawableBounds(int,int) -> a
    void onDraw(android.graphics.Canvas) -> onDraw
    void onMeasure(int,int) -> onMeasure
    void drawableStateChanged() -> drawableStateChanged
    void updateDrawableState() -> d
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void access$000(android.support.v7.internal.widget.ProgressBarICS,int,int,boolean,boolean) -> a
    android.support.v7.internal.widget.ProgressBarICS$RefreshProgressRunnable access$102(android.support.v7.internal.widget.ProgressBarICS,android.support.v7.internal.widget.ProgressBarICS$RefreshProgressRunnable) -> a
android.support.v7.internal.widget.ProgressBarICS$1 -> android.support.v7.internal.widget.ad:
android.support.v7.internal.widget.ProgressBarICS$RefreshProgressRunnable -> android.support.v7.internal.widget.ae:
    int mId -> b
    int mProgress -> c
    boolean mFromUser -> d
    android.support.v7.internal.widget.ProgressBarICS this$0 -> a
    void run() -> run
    void setup(int,int,boolean) -> a
android.support.v7.internal.widget.ProgressBarICS$SavedState -> android.support.v7.internal.widget.ProgressBarICS$SavedState:
    int progress -> a
    int secondaryProgress -> b
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v7.internal.widget.ProgressBarICS$SavedState$1 -> android.support.v7.internal.widget.af:
    android.support.v7.internal.widget.ProgressBarICS$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v7.internal.widget.ProgressBarICS$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v7.internal.widget.ScrollingTabContainerView -> android.support.v7.internal.widget.ScrollingTabContainerView:
    java.lang.Runnable mTabSelector -> a
    android.support.v7.internal.widget.ScrollingTabContainerView$TabClickListener mTabClickListener -> d
    android.widget.LinearLayout mTabLayout -> e
    android.support.v7.internal.widget.SpinnerICS mTabSpinner -> f
    boolean mAllowCollapse -> g
    android.view.LayoutInflater mInflater -> h
    int mMaxTabWidth -> b
    int mStackedTabMaxWidth -> c
    int mContentHeight -> i
    int mSelectedTabIndex -> j
    void onMeasure(int,int) -> onMeasure
    boolean isCollapsed() -> a
    void setAllowCollapse(boolean) -> setAllowCollapse
    void performCollapse() -> b
    boolean performExpand() -> c
    void setTabSelected(int) -> setTabSelected
    void setContentHeight(int) -> setContentHeight
    android.support.v7.internal.widget.SpinnerICS createSpinner() -> d
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void animateToTab(int) -> a
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    android.support.v7.internal.widget.ScrollingTabContainerView$TabView createTabView(android.support.v7.app.ActionBar$Tab,boolean) -> b
    void addTab(android.support.v7.app.ActionBar$Tab,boolean) -> a
    void updateTab(int) -> b
    void onItemClick(android.support.v7.internal.widget.AdapterViewICS,android.view.View,int,long) -> a
    android.widget.LinearLayout access$200(android.support.v7.internal.widget.ScrollingTabContainerView) -> a
    android.support.v7.internal.widget.ScrollingTabContainerView$TabView access$300(android.support.v7.internal.widget.ScrollingTabContainerView,android.support.v7.app.ActionBar$Tab,boolean) -> a
android.support.v7.internal.widget.ScrollingTabContainerView$1 -> android.support.v7.internal.widget.ag:
    android.view.View val$tabView -> a
    android.support.v7.internal.widget.ScrollingTabContainerView this$0 -> b
    void run() -> run
android.support.v7.internal.widget.ScrollingTabContainerView$TabAdapter -> android.support.v7.internal.widget.ah:
    android.support.v7.internal.widget.ScrollingTabContainerView this$0 -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
android.support.v7.internal.widget.ScrollingTabContainerView$TabClickListener -> android.support.v7.internal.widget.ai:
    android.support.v7.internal.widget.ScrollingTabContainerView this$0 -> a
    void onClick(android.view.View) -> onClick
android.support.v7.internal.widget.ScrollingTabContainerView$TabView -> android.support.v7.internal.widget.ScrollingTabContainerView$TabView:
    android.support.v7.app.ActionBar$Tab mTab -> a
    android.widget.TextView mTextView -> b
    android.widget.ImageView mIconView -> c
    android.view.View mCustomView -> d
    android.support.v7.internal.widget.ScrollingTabContainerView mParent -> e
    void attach(android.support.v7.internal.widget.ScrollingTabContainerView,android.support.v7.app.ActionBar$Tab,boolean) -> a
    void bindTab(android.support.v7.app.ActionBar$Tab) -> a
    void onMeasure(int,int) -> onMeasure
    void update() -> a
    android.support.v7.app.ActionBar$Tab getTab() -> getTab
android.support.v7.internal.widget.SpinnerICS -> android.support.v7.internal.widget.aj:
    android.support.v7.internal.widget.SpinnerICS$SpinnerPopup mPopup -> F
    android.support.v7.internal.widget.SpinnerICS$DropDownAdapter mTempAdapter -> G
    int mDropDownWidth -> E
    int mGravity -> H
    android.graphics.Rect mTempRect -> I
    void setAdapter(android.widget.SpinnerAdapter) -> a
    int getBaseline() -> getBaseline
    void onDetachedFromWindow() -> onDetachedFromWindow
    void setOnItemClickListener(android.support.v7.internal.widget.AdapterViewICS$OnItemClickListener) -> a
    void setOnItemClickListenerInt(android.support.v7.internal.widget.AdapterViewICS$OnItemClickListener) -> b
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    void layout(int,boolean) -> b
    android.view.View makeAndAddView(int) -> e
    void setUpChild(android.view.View) -> c
    boolean performClick() -> performClick
    void onClick(android.content.DialogInterface,int) -> onClick
    int measureContentWidth(android.widget.SpinnerAdapter,android.graphics.drawable.Drawable) -> a
    android.graphics.Rect access$200(android.support.v7.internal.widget.SpinnerICS) -> a
android.support.v7.internal.widget.SpinnerICS$1 -> android.support.v7.internal.widget.ak:
android.support.v7.internal.widget.SpinnerICS$DialogPopup -> android.support.v7.internal.widget.al:
    android.app.AlertDialog mPopup -> b
    android.widget.ListAdapter mListAdapter -> c
    java.lang.CharSequence mPrompt -> d
    android.support.v7.internal.widget.SpinnerICS this$0 -> a
    void dismiss() -> d
    boolean isShowing() -> f
    void setAdapter(android.widget.ListAdapter) -> a
    void setPromptText(java.lang.CharSequence) -> a
    void show() -> c
    void onClick(android.content.DialogInterface,int) -> onClick
android.support.v7.internal.widget.SpinnerICS$DropDownAdapter -> android.support.v7.internal.widget.am:
    android.widget.SpinnerAdapter mAdapter -> a
    android.widget.ListAdapter mListAdapter -> b
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup) -> getDropDownView
    boolean hasStableIds() -> hasStableIds
    void registerDataSetObserver(android.database.DataSetObserver) -> registerDataSetObserver
    void unregisterDataSetObserver(android.database.DataSetObserver) -> unregisterDataSetObserver
    boolean areAllItemsEnabled() -> areAllItemsEnabled
    boolean isEnabled(int) -> isEnabled
    int getItemViewType(int) -> getItemViewType
    int getViewTypeCount() -> getViewTypeCount
    boolean isEmpty() -> isEmpty
android.support.v7.internal.widget.SpinnerICS$DropdownPopup -> android.support.v7.internal.widget.an:
    java.lang.CharSequence mHintText -> c
    android.widget.ListAdapter mAdapter -> d
    android.support.v7.internal.widget.SpinnerICS this$0 -> b
    void setAdapter(android.widget.ListAdapter) -> a
    void setPromptText(java.lang.CharSequence) -> a
    void show() -> c
    android.widget.ListAdapter access$100(android.support.v7.internal.widget.SpinnerICS$DropdownPopup) -> a
android.support.v7.internal.widget.SpinnerICS$DropdownPopup$1 -> android.support.v7.internal.widget.ao:
    android.support.v7.internal.widget.SpinnerICS val$this$0 -> a
    android.support.v7.internal.widget.SpinnerICS$DropdownPopup this$1 -> b
    void onItemClick(android.support.v7.internal.widget.AdapterViewICS,android.view.View,int,long) -> a
android.support.v7.internal.widget.SpinnerICS$SpinnerPopup -> android.support.v7.internal.widget.ap:
    void setAdapter(android.widget.ListAdapter) -> a
    void show() -> c
    void dismiss() -> d
    boolean isShowing() -> f
    void setPromptText(java.lang.CharSequence) -> a
android.support.v7.view.ActionMode -> android.support.v7.c.a:
    void finish() -> a
android.support.v7.view.CollapsibleActionView -> android.support.v7.c.b:
    void onActionViewExpanded() -> a
    void onActionViewCollapsed() -> b
android.support.v7.widget.SearchView -> android.support.v7.widget.SearchView:
    android.support.v7.widget.SearchView$OnQueryTextListener mOnQueryChangeListener -> b
    android.support.v7.widget.SearchView$OnCloseListener mOnCloseListener -> c
    android.view.View$OnFocusChangeListener mOnQueryTextFocusChangeListener -> d
    android.support.v7.widget.SearchView$OnSuggestionListener mOnSuggestionListener -> e
    android.view.View$OnClickListener mOnSearchClickListener -> f
    boolean mIconifiedByDefault -> g
    boolean mIconified -> h
    android.support.v4.widget.CursorAdapter mSuggestionsAdapter -> i
    android.view.View mSearchButton -> j
    android.view.View mSubmitButton -> k
    android.view.View mSubmitArea -> l
    android.widget.ImageView mCloseButton -> m
    android.view.View mSearchEditFrame -> n
    android.view.View mVoiceButton -> o
    android.support.v7.widget.SearchView$SearchAutoComplete mQueryTextView -> p
    android.widget.ImageView mSearchHintIcon -> q
    boolean mSubmitButtonEnabled -> r
    java.lang.CharSequence mQueryHint -> s
    boolean mQueryRefinement -> t
    boolean mClearingFocus -> u
    int mMaxWidth -> v
    boolean mVoiceButtonEnabled -> w
    java.lang.CharSequence mUserQuery -> x
    boolean mExpandedInActionView -> y
    int mCollapsedImeOptions -> z
    android.app.SearchableInfo mSearchable -> A
    android.os.Bundle mAppSearchData -> B
    android.support.v7.widget.SearchView$AutoCompleteTextViewReflector HIDDEN_METHOD_INVOKER -> a
    java.lang.Runnable mShowImeRunnable -> C
    java.lang.Runnable mUpdateDrawableStateRunnable -> D
    java.lang.Runnable mReleaseCursorRunnable -> E
    android.content.Intent mVoiceWebSearchIntent -> F
    android.content.Intent mVoiceAppSearchIntent -> G
    java.util.WeakHashMap mOutsideDrawablesCache -> H
    void setSearchableInfo(android.app.SearchableInfo) -> setSearchableInfo
    void setAppSearchData(android.os.Bundle) -> setAppSearchData
    void setImeOptions(int) -> setImeOptions
    int getImeOptions() -> getImeOptions
    void setInputType(int) -> setInputType
    int getInputType() -> getInputType
    boolean requestFocus(int,android.graphics.Rect) -> requestFocus
    void clearFocus() -> clearFocus
    void setOnQueryTextListener(android.support.v7.widget.SearchView$OnQueryTextListener) -> setOnQueryTextListener
    void setOnCloseListener(android.support.v7.widget.SearchView$OnCloseListener) -> setOnCloseListener
    void setOnQueryTextFocusChangeListener(android.view.View$OnFocusChangeListener) -> setOnQueryTextFocusChangeListener
    void setOnSuggestionListener(android.support.v7.widget.SearchView$OnSuggestionListener) -> setOnSuggestionListener
    void setOnSearchClickListener(android.view.View$OnClickListener) -> setOnSearchClickListener
    java.lang.CharSequence getQuery() -> getQuery
    void setQuery(java.lang.CharSequence,boolean) -> a
    void setQueryHint(java.lang.CharSequence) -> setQueryHint
    java.lang.CharSequence getQueryHint() -> getQueryHint
    void setIconifiedByDefault(boolean) -> setIconifiedByDefault
    void setIconified(boolean) -> setIconified
    boolean isIconified() -> c
    void setSubmitButtonEnabled(boolean) -> setSubmitButtonEnabled
    void setQueryRefinementEnabled(boolean) -> setQueryRefinementEnabled
    void setSuggestionsAdapter(android.support.v4.widget.CursorAdapter) -> setSuggestionsAdapter
    android.support.v4.widget.CursorAdapter getSuggestionsAdapter() -> getSuggestionsAdapter
    void setMaxWidth(int) -> setMaxWidth
    int getMaxWidth() -> getMaxWidth
    void onMeasure(int,int) -> onMeasure
    int getPreferredWidth() -> getPreferredWidth
    void updateViewsVisibility(boolean) -> a
    boolean hasVoiceSearch() -> e
    boolean isSubmitAreaEnabled() -> f
    void updateSubmitButton(boolean) -> b
    void updateSubmitArea() -> g
    void updateCloseButton() -> h
    void postUpdateFocusedState() -> i
    void onDetachedFromWindow() -> onDetachedFromWindow
    void setImeVisibility(boolean) -> setImeVisibility
    void onQueryRefine(java.lang.CharSequence) -> a
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    int getSearchIconId() -> getSearchIconId
    java.lang.CharSequence getDecoratedHint(java.lang.CharSequence) -> b
    void updateQueryHint() -> j
    void updateSearchAutoComplete() -> k
    void updateVoiceButton(boolean) -> c
    void onSubmitQuery() -> l
    void dismissSuggestions() -> m
    void onCloseClicked() -> n
    void onSearchClicked() -> o
    void onTextFocusChanged() -> d
    void onWindowFocusChanged(boolean) -> onWindowFocusChanged
    void onActionViewCollapsed() -> b
    void onActionViewExpanded() -> a
    void setQuery(java.lang.CharSequence) -> setQuery
    void launchQuerySearch(int,java.lang.String,java.lang.String) -> a
    android.content.Intent createIntent(java.lang.String,android.net.Uri,java.lang.String,java.lang.String,int,java.lang.String) -> a
    void forceSuggestionQuery() -> p
    boolean isLandscapeMode(android.content.Context) -> a
    void access$2100(android.support.v7.widget.SearchView,boolean) -> a
android.support.v7.widget.SearchView$AutoCompleteTextViewReflector -> android.support.v7.widget.a:
    java.lang.reflect.Method doBeforeTextChanged -> a
    java.lang.reflect.Method doAfterTextChanged -> b
    java.lang.reflect.Method ensureImeVisible -> c
    java.lang.reflect.Method showSoftInputUnchecked -> d
    void doBeforeTextChanged(android.widget.AutoCompleteTextView) -> a
    void doAfterTextChanged(android.widget.AutoCompleteTextView) -> b
    void ensureImeVisible(android.widget.AutoCompleteTextView,boolean) -> a
android.support.v7.widget.SearchView$OnCloseListener -> android.support.v7.widget.b:
    boolean onClose() -> a
android.support.v7.widget.SearchView$OnQueryTextListener -> android.support.v7.widget.c:
    boolean onQueryTextSubmit(java.lang.String) -> a_
android.support.v7.widget.SearchView$OnSuggestionListener -> android.support.v7.widget.d:
android.support.v7.widget.SearchView$SearchAutoComplete -> android.support.v7.widget.SearchView$SearchAutoComplete:
    int mThreshold -> a
    android.support.v7.widget.SearchView mSearchView -> b
    void setSearchView(android.support.v7.widget.SearchView) -> setSearchView
    void setThreshold(int) -> setThreshold
    void replaceText(java.lang.CharSequence) -> replaceText
    void performCompletion() -> performCompletion
    void onWindowFocusChanged(boolean) -> onWindowFocusChanged
    void onFocusChanged(boolean,int,android.graphics.Rect) -> onFocusChanged
    boolean enoughToFilter() -> enoughToFilter
    boolean onKeyPreIme(int,android.view.KeyEvent) -> onKeyPreIme
android.support.v7.widget.SuggestionsAdapter -> android.support.v7.widget.e:
    android.app.SearchManager mSearchManager -> j
    android.support.v7.widget.SearchView mSearchView -> k
    android.app.SearchableInfo mSearchable -> l
    android.content.Context mProviderContext -> m
    java.util.WeakHashMap mOutsideDrawablesCache -> n
    boolean mClosed -> o
    int mQueryRefinement -> p
    android.content.res.ColorStateList mUrlColor -> q
    int mText1Col -> r
    int mText2Col -> s
    int mText2UrlCol -> t
    int mIconName1Col -> u
    int mIconName2Col -> v
    int mFlagsCol -> w
    void setQueryRefinement(int) -> a
    boolean hasStableIds() -> hasStableIds
    android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence) -> a
    void notifyDataSetChanged() -> notifyDataSetChanged
    void notifyDataSetInvalidated() -> notifyDataSetInvalidated
    void updateSpinnerState(android.database.Cursor) -> d
    void changeCursor(android.database.Cursor) -> a
    android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> a
    void bindView(android.view.View,android.content.Context,android.database.Cursor) -> a
    void onClick(android.view.View) -> onClick
    java.lang.CharSequence formatUrl(java.lang.CharSequence) -> b
    void setViewText(android.widget.TextView,java.lang.CharSequence) -> a
    android.graphics.drawable.Drawable getIcon1(android.database.Cursor) -> e
    android.graphics.drawable.Drawable getIcon2(android.database.Cursor) -> f
    void setViewDrawable(android.widget.ImageView,android.graphics.drawable.Drawable,int) -> a
    java.lang.CharSequence convertToString(android.database.Cursor) -> c
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    android.graphics.drawable.Drawable getDrawableFromResourceValue(java.lang.String) -> a
    android.graphics.drawable.Drawable getDrawable(android.net.Uri) -> b
    android.graphics.drawable.Drawable checkIconCache(java.lang.String) -> b
    void storeInIconCache(java.lang.String,android.graphics.drawable.Drawable) -> a
    android.graphics.drawable.Drawable getDefaultIcon1(android.database.Cursor) -> g
    android.graphics.drawable.Drawable getActivityIconWithCache(android.content.ComponentName) -> a
    android.graphics.drawable.Drawable getActivityIcon(android.content.ComponentName) -> b
    java.lang.String getColumnString(android.database.Cursor,java.lang.String) -> a
    java.lang.String getStringOrNull(android.database.Cursor,int) -> a
    android.graphics.drawable.Drawable getDrawableFromResourceUri(android.net.Uri) -> a
    android.database.Cursor getSearchManagerSuggestions(android.app.SearchableInfo,java.lang.String,int) -> a
android.support.v7.widget.SuggestionsAdapter$ChildViewCache -> android.support.v7.widget.f:
    android.widget.TextView mText1 -> a
    android.widget.TextView mText2 -> b
    android.widget.ImageView mIcon1 -> c
    android.widget.ImageView mIcon2 -> d
    android.widget.ImageView mIconRefine -> e
cz.muni.fi.japanesedictionary.database.DBAsyncTask -> cz.muni.fi.japanesedictionary.a.a:
    cz.muni.fi.japanesedictionary.database.GlossaryReaderContract mDatabase -> a
    java.lang.Void doInBackground(cz.muni.fi.japanesedictionary.entity.Translation[]) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
cz.muni.fi.japanesedictionary.database.GlossaryReaderContract -> cz.muni.fi.japanesedictionary.a.b:
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
    void saveTranslation(cz.muni.fi.japanesedictionary.entity.Translation) -> a
    java.util.List getLastTranslations(int) -> a
    boolean isFavorite(cz.muni.fi.japanesedictionary.entity.Translation) -> b
    boolean changeFavorite(cz.muni.fi.japanesedictionary.entity.Translation) -> c
    java.util.List selectFavoriteTranslations() -> a
    java.lang.String getNote(cz.muni.fi.japanesedictionary.entity.Translation) -> d
    java.lang.String saveNote(cz.muni.fi.japanesedictionary.entity.Translation,java.lang.String) -> a
    java.util.List createFromCursor(android.database.Cursor) -> a
cz.muni.fi.japanesedictionary.engine.CharacterLoader -> cz.muni.fi.japanesedictionary.b.a:
    android.content.Context mContext -> a
    org.apache.lucene.search.IndexSearcher mSearcher -> b
    cz.muni.fi.japanesedictionary.fragments.DisplayTranslation mFragment -> c
    java.util.Map doInBackground(java.lang.String[]) -> a
    void onPostExecute(java.util.Map) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
cz.muni.fi.japanesedictionary.engine.DrawerAdapter -> cz.muni.fi.japanesedictionary.b.b:
    android.content.Context mContext -> a
    android.view.LayoutInflater mInflater -> b
    void setData(java.util.List) -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
cz.muni.fi.japanesedictionary.engine.DrawerItemClickListener -> cz.muni.fi.japanesedictionary.b.c:
    android.content.Context mContext -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
cz.muni.fi.japanesedictionary.engine.FavoriteChanger -> cz.muni.fi.japanesedictionary.b.d:
    java.lang.String LOG_TAG -> a
    cz.muni.fi.japanesedictionary.database.GlossaryReaderContract mDatabase -> b
    android.view.MenuItem mFavoriteItem -> c
    android.support.v4.app.Fragment mDisplayFragment -> d
    java.lang.Boolean doInBackground(cz.muni.fi.japanesedictionary.entity.Translation[]) -> a
    void onPostExecute(java.lang.Boolean) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
cz.muni.fi.japanesedictionary.engine.FavoriteListLoader -> cz.muni.fi.japanesedictionary.b.e:
    java.lang.String LOG_TAG -> a
    cz.muni.fi.japanesedictionary.database.GlossaryReaderContract mDatabase -> b
    cz.muni.fi.japanesedictionary.engine.TranslationsAdapter mAdapter -> c
    java.util.List doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.util.List) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
cz.muni.fi.japanesedictionary.engine.FavoriteLoader -> cz.muni.fi.japanesedictionary.b.f:
    java.lang.String LOG_TAG -> a
    cz.muni.fi.japanesedictionary.database.GlossaryReaderContract mDatabase -> b
    android.view.MenuItem mFavoriteItem -> c
    android.support.v4.app.Fragment mDisplayFragment -> d
    java.lang.Boolean doInBackground(cz.muni.fi.japanesedictionary.entity.Translation[]) -> a
    void onPostExecute(java.lang.Boolean) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
cz.muni.fi.japanesedictionary.engine.FragmentListAsyncTask -> cz.muni.fi.japanesedictionary.b.g:
    android.content.Context mContext -> a
    cz.muni.fi.japanesedictionary.interfaces.SearchListener mSearchListener -> b
    java.util.List doInBackground(java.lang.String[]) -> a
    void onProgressUpdate(cz.muni.fi.japanesedictionary.entity.Translation[]) -> a
    void onPostExecute(java.util.List) -> a
    void onProgressUpdate(java.lang.Object[]) -> onProgressUpdate
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
    void access$000(cz.muni.fi.japanesedictionary.engine.FragmentListAsyncTask,java.lang.Object[]) -> a
cz.muni.fi.japanesedictionary.engine.FragmentListAsyncTask$1 -> cz.muni.fi.japanesedictionary.b.h:
    int max -> a
    int count -> b
    org.apache.lucene.index.IndexReader reader -> c
    boolean val$englishBool -> d
    boolean val$dutchBool -> e
    boolean val$germanBool -> f
    boolean val$frenchBool -> g
    java.util.List val$translations -> h
    cz.muni.fi.japanesedictionary.engine.FragmentListAsyncTask this$0 -> i
    boolean acceptsDocsOutOfOrder() -> a
    void collect(int) -> a
    void setNextReader(org.apache.lucene.index.IndexReader,int) -> a
    void setScorer(org.apache.lucene.search.Scorer) -> a
cz.muni.fi.japanesedictionary.engine.ListItemComparator -> cz.muni.fi.japanesedictionary.b.i:
    int compare(cz.muni.fi.japanesedictionary.entity.Translation,cz.muni.fi.japanesedictionary.entity.Translation) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
cz.muni.fi.japanesedictionary.engine.MainPagerAdapter -> cz.muni.fi.japanesedictionary.b.j:
    android.support.v4.app.Fragment getItem(int) -> a
    int getCount() -> b
cz.muni.fi.japanesedictionary.engine.NoteLoader -> cz.muni.fi.japanesedictionary.b.k:
    java.lang.String LOG_TAG -> a
    cz.muni.fi.japanesedictionary.database.GlossaryReaderContract mDatabase -> b
    android.view.MenuItem mNoteItem -> c
    cz.muni.fi.japanesedictionary.fragments.DisplayTranslation mDisplayFragment -> d
    java.lang.String doInBackground(cz.muni.fi.japanesedictionary.entity.Translation[]) -> a
    void onPostExecute(java.lang.String) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
cz.muni.fi.japanesedictionary.engine.NoteSaver -> cz.muni.fi.japanesedictionary.b.l:
    java.lang.String LOG_TAG -> a
    cz.muni.fi.japanesedictionary.database.GlossaryReaderContract mDatabase -> b
    android.view.MenuItem mNoteItem -> c
    cz.muni.fi.japanesedictionary.fragments.DisplayTranslation mDisplayFragment -> d
    cz.muni.fi.japanesedictionary.entity.Translation mTranslation -> e
    java.lang.String doInBackground(java.lang.String[]) -> a
    void onPostExecute(java.lang.String) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
cz.muni.fi.japanesedictionary.engine.TranslationsAdapter -> cz.muni.fi.japanesedictionary.b.m:
    android.content.Context mContext -> a
    boolean mEnglish -> b
    boolean mFrench -> c
    boolean mDutch -> d
    boolean mGerman -> e
    android.view.LayoutInflater mInflater -> f
    cz.muni.fi.japanesedictionary.engine.ListItemComparator mListComaparator -> g
    void setData(java.util.List) -> a
    void addListItem(cz.muni.fi.japanesedictionary.entity.Translation) -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
cz.muni.fi.japanesedictionary.engine.TranslationsAdapter$TranslationsViewHolder -> cz.muni.fi.japanesedictionary.b.n:
    android.widget.TextView japanese -> a
    android.widget.TextView translation -> b
cz.muni.fi.japanesedictionary.entity.DrawerItem -> cz.muni.fi.japanesedictionary.c.a:
    java.lang.String mName -> a
    int mIconResource -> b
    int getIconResource() -> a
    cz.muni.fi.japanesedictionary.entity.DrawerItem setIconResource(int) -> a
    java.lang.String getName() -> b
    cz.muni.fi.japanesedictionary.entity.DrawerItem setName(java.lang.String) -> a
cz.muni.fi.japanesedictionary.entity.JapaneseCharacter -> cz.muni.fi.japanesedictionary.c.b:
    java.lang.String mLiteral -> a
    int mRadicalClassic -> b
    int mGrade -> c
    int mStrokeCount -> d
    java.lang.String mSkip -> e
    java.util.Map mDicRef -> f
    java.util.List mRMGroupJaOn -> g
    java.util.List mRMmGroupJaKun -> h
    java.util.List mMeaningEnglish -> i
    java.util.List mMeaningFrench -> j
    java.util.List mMeaningDutch -> k
    java.util.List mMeaningGerman -> l
    java.util.List mNanori -> m
    java.lang.String toString() -> toString
    void setLiteral(java.lang.String) -> a
    void setRadicalClassic(int) -> a
    void setGrade(int) -> b
    void setStrokeCount(int) -> c
    void setSkip(java.lang.String) -> b
    void addDicRef(java.lang.String,java.lang.String) -> a
    void addRmGroupJaOn(java.lang.String) -> c
    void addRmGroupJaKun(java.lang.String) -> d
    void addMeaningEnglish(java.lang.String) -> e
    void addMeaningFrench(java.lang.String) -> f
    void addMeaningDutch(java.lang.String) -> g
    void addMeaningGerman(java.lang.String) -> h
    void addNanori(java.lang.String) -> i
    java.lang.String getLiteral() -> a
    int getRadicalClassic() -> b
    int getGrade() -> c
    int getStrokeCount() -> d
    java.lang.String getSkip() -> e
    java.util.Map getDicRef() -> f
    java.util.List getRmGroupJaOn() -> g
    java.util.List getRmGroupJaKun() -> h
    java.util.List getMeaningEnglish() -> i
    java.util.List getMeaningFrench() -> j
    java.util.List getMeaningDutch() -> k
    java.util.List getMeaningGerman() -> l
    java.util.List getNanori() -> m
    void parseDicRef(java.lang.String) -> j
    void parseRmGroupJaOn(java.lang.String) -> k
    void parseRmGroupJaKun(java.lang.String) -> l
    void parseMeaningEnglish(java.lang.String) -> m
    void parseMeaningFrench(java.lang.String) -> n
    void parseMeaningDutch(java.lang.String) -> o
    void parseMeaningGerman(java.lang.String) -> p
    void parseNanori(java.lang.String) -> q
    java.util.List parseOneJSONArray(org.json.JSONArray) -> a
    android.os.Bundle createBundleFromJapaneseCharacter(android.os.Bundle) -> a
    cz.muni.fi.japanesedictionary.entity.JapaneseCharacter newInstanceFromBundle(android.os.Bundle) -> b
cz.muni.fi.japanesedictionary.entity.Translation -> cz.muni.fi.japanesedictionary.c.c:
    java.util.List mJapKeb -> a
    java.util.List mJapReb -> b
    java.util.List mEnglish -> c
    java.util.List mFrench -> d
    java.util.List mDutch -> e
    java.util.List mGerman -> f
    java.lang.String toString() -> toString
    void addJapKeb(java.lang.String) -> a
    void addJapReb(java.lang.String) -> b
    void addEnglishSense(java.util.List) -> a
    void addFrenchSense(java.util.List) -> b
    void addDutchSense(java.util.List) -> c
    void addGermanSense(java.util.List) -> d
    java.util.List getJapaneseKeb() -> a
    java.util.List getJapaneseReb() -> b
    java.util.List getEnglishSense() -> c
    java.util.List getFrenchSense() -> d
    java.util.List getDutchSense() -> e
    java.util.List getGermanSense() -> f
    void parseJapaneseKeb(java.lang.String) -> c
    void parseJapaneseReb(java.lang.String) -> d
    java.util.List parseOneSense(org.json.JSONArray) -> a
    void parseEnglish(java.lang.String) -> e
    void parseDutch(java.lang.String) -> f
    void parseFrench(java.lang.String) -> g
    void parseGerman(java.lang.String) -> h
    android.os.Bundle createBundleFromTranslation(android.os.Bundle) -> a
    android.content.ContentValues createContentValuesFromTranslation() -> g
    cz.muni.fi.japanesedictionary.entity.Translation newInstanceFromBundle(android.os.Bundle) -> b
    org.json.JSONArray convertToJSON(java.util.List) -> e
    java.lang.String getIndexHash() -> h
cz.muni.fi.japanesedictionary.fragments.DisplayCharacterInfo -> cz.muni.fi.japanesedictionary.d.a:
    cz.muni.fi.japanesedictionary.entity.JapaneseCharacter mJapaneseCharacter -> a
    android.view.LayoutInflater mInflater -> b
    boolean mEnglish -> c
    boolean mFrench -> d
    boolean mDutch -> e
    boolean mGerman -> f
    void onSaveInstanceState(android.os.Bundle) -> e
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    void onCreate(android.os.Bundle) -> a
    void onViewCreated(android.view.View,android.os.Bundle) -> a
    void onStart() -> c
    void updateCharacter() -> E
    java.util.Map getDictionaryCodes() -> a
    boolean updateLanguages() -> F
cz.muni.fi.japanesedictionary.fragments.DisplayTranslation -> cz.muni.fi.japanesedictionary.d.b:
    cz.muni.fi.japanesedictionary.interfaces.OnCreateTranslationListener mCallbackTranslation -> a
    cz.muni.fi.japanesedictionary.entity.Translation mTranslation -> b
    java.util.Map mCharacters -> c
    android.view.LayoutInflater mInflater -> d
    boolean mEnglish -> e
    boolean mFrench -> f
    boolean mDutch -> g
    boolean mGerman -> h
    android.view.MenuItem mFavorite -> i
    android.view.MenuItem mNote -> Y
    void onAttach(android.app.Activity) -> a
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    void onStart() -> c
    void onCreate(android.os.Bundle) -> a
    boolean onOptionsItemSelected(android.view.MenuItem) -> a
    void onSaveInstanceState(android.os.Bundle) -> e
    void onViewCreated(android.view.View,android.os.Bundle) -> a
    void setTranslation(cz.muni.fi.japanesedictionary.entity.Translation) -> a
    void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    void updateTranslation() -> a
    void displayCharacters() -> E
    void setCharacters(java.util.Map) -> a
    boolean updateLanguages() -> F
    void displayNote(java.lang.String) -> a
    void showNoteAlertBox(java.lang.String) -> b
    java.util.Map access$000(cz.muni.fi.japanesedictionary.fragments.DisplayTranslation) -> a
    cz.muni.fi.japanesedictionary.interfaces.OnCreateTranslationListener access$100(cz.muni.fi.japanesedictionary.fragments.DisplayTranslation) -> b
    android.view.MenuItem access$200(cz.muni.fi.japanesedictionary.fragments.DisplayTranslation) -> c
    cz.muni.fi.japanesedictionary.entity.Translation access$300(cz.muni.fi.japanesedictionary.fragments.DisplayTranslation) -> d
cz.muni.fi.japanesedictionary.fragments.DisplayTranslation$1 -> cz.muni.fi.japanesedictionary.d.c:
    cz.muni.fi.japanesedictionary.fragments.DisplayTranslation this$0 -> a
    void onClick(android.view.View) -> onClick
cz.muni.fi.japanesedictionary.fragments.DisplayTranslation$2 -> cz.muni.fi.japanesedictionary.d.d:
    cz.muni.fi.japanesedictionary.fragments.DisplayTranslation this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
cz.muni.fi.japanesedictionary.fragments.DisplayTranslation$3 -> cz.muni.fi.japanesedictionary.d.e:
    android.widget.EditText val$input -> a
    cz.muni.fi.japanesedictionary.fragments.DisplayTranslation this$0 -> b
    void onClick(android.content.DialogInterface,int) -> onClick
cz.muni.fi.japanesedictionary.fragments.FavoriteListFragment -> cz.muni.fi.japanesedictionary.d.f:
    cz.muni.fi.japanesedictionary.engine.TranslationsAdapter mAdapter -> i
    cz.muni.fi.japanesedictionary.database.GlossaryReaderContract mDatabase -> Y
    void onCreate(android.os.Bundle) -> a
    void onViewCreated(android.view.View,android.os.Bundle) -> a
    void onResume() -> q
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> a
cz.muni.fi.japanesedictionary.fragments.MyFragmentAlertDialog -> cz.muni.fi.japanesedictionary.d.g:
    cz.muni.fi.japanesedictionary.fragments.MyFragmentAlertDialog newInstance(int,int,boolean) -> a
    android.app.Dialog onCreateDialog(android.os.Bundle) -> c
cz.muni.fi.japanesedictionary.fragments.MyFragmentAlertDialog$1 -> cz.muni.fi.japanesedictionary.d.h:
    cz.muni.fi.japanesedictionary.fragments.MyFragmentAlertDialog this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
cz.muni.fi.japanesedictionary.fragments.MyFragmentAlertDialog$2 -> cz.muni.fi.japanesedictionary.d.i:
    cz.muni.fi.japanesedictionary.fragments.MyFragmentAlertDialog this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
cz.muni.fi.japanesedictionary.fragments.ResultFragmentList -> cz.muni.fi.japanesedictionary.d.j:
    cz.muni.fi.japanesedictionary.engine.TranslationsAdapter mAdapter -> i
    java.lang.String mNewSearch -> Y
    java.lang.String mLastSearched -> Z
    java.lang.String mLastTab -> aa
    boolean mDualPane -> ab
    cz.muni.fi.japanesedictionary.fragments.ResultFragmentList$IncomingHandler mHandler -> ac
    cz.muni.fi.japanesedictionary.engine.FragmentListAsyncTask mLoader -> ad
    android.content.BroadcastReceiver mReceiverDone -> ae
    cz.muni.fi.japanesedictionary.interfaces.OnTranslationSelectedListener mCallbackTranslation -> af
    cz.muni.fi.japanesedictionary.fragments.ResultFragmentList newInstance(java.lang.String) -> a
    void onSaveInstanceState(android.os.Bundle) -> e
    void onAttach(android.app.Activity) -> a
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> a
    void onViewCreated(android.view.View,android.os.Bundle) -> a
    void onLoadFinished(java.util.List) -> a
    void onResume() -> q
    void onPause() -> r
    cz.muni.fi.japanesedictionary.engine.TranslationsAdapter getAdapter() -> E
    void search(java.lang.String) -> b
    void onResultFound(cz.muni.fi.japanesedictionary.entity.Translation) -> a
    void listShown(boolean) -> h
cz.muni.fi.japanesedictionary.fragments.ResultFragmentList$1 -> cz.muni.fi.japanesedictionary.d.k:
    cz.muni.fi.japanesedictionary.fragments.ResultFragmentList this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
cz.muni.fi.japanesedictionary.fragments.ResultFragmentList$IncomingHandler -> cz.muni.fi.japanesedictionary.d.l:
    java.lang.ref.WeakReference mFragment -> a
    void handleMessage(android.os.Message) -> handleMessage
cz.muni.fi.japanesedictionary.interfaces.OnCreateTranslationListener -> cz.muni.fi.japanesedictionary.e.a:
    cz.muni.fi.japanesedictionary.database.GlossaryReaderContract getDatabase() -> a
    void showKanjiDetail(cz.muni.fi.japanesedictionary.entity.JapaneseCharacter) -> a
cz.muni.fi.japanesedictionary.interfaces.OnTranslationSelectedListener -> cz.muni.fi.japanesedictionary.e.b:
    void onTranslationSelected(int) -> a
    java.lang.String getCurrentFilter() -> b
cz.muni.fi.japanesedictionary.interfaces.SearchListener -> cz.muni.fi.japanesedictionary.e.c:
    void onResultFound(cz.muni.fi.japanesedictionary.entity.Translation) -> a
    void onLoadFinished(java.util.List) -> a
cz.muni.fi.japanesedictionary.main.AboutActivity -> cz.muni.fi.japanesedictionary.main.AboutActivity:
    android.support.v4.widget.DrawerLayout mDrawerLayout -> o
    android.widget.ListView mDrawerList -> p
    android.support.v4.app.ActionBarDrawerToggle mDrawerToggle -> q
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onStop() -> onStop
    void setUpUserInterface() -> i
    void onPostCreate(android.os.Bundle) -> onPostCreate
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
cz.muni.fi.japanesedictionary.main.AboutActivity$1 -> cz.muni.fi.japanesedictionary.main.a:
    cz.muni.fi.japanesedictionary.main.AboutActivity this$0 -> a
    void onDrawerClosed(android.view.View) -> b
    void onDrawerOpened(android.view.View) -> a
cz.muni.fi.japanesedictionary.main.AboutActivity$2 -> cz.muni.fi.japanesedictionary.main.b:
    cz.muni.fi.japanesedictionary.main.AboutActivity this$0 -> a
    java.lang.String transformUrl(java.util.regex.Matcher,java.lang.String) -> transformUrl
cz.muni.fi.japanesedictionary.main.DisplayCharacterInfoActivity -> cz.muni.fi.japanesedictionary.main.DisplayCharacterInfoActivity:
    android.support.v4.widget.DrawerLayout mDrawerLayout -> o
    android.widget.ListView mDrawerList -> p
    android.support.v4.app.ActionBarDrawerToggle mDrawerToggle -> q
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onStop() -> onStop
    void onPostCreate(android.os.Bundle) -> onPostCreate
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
cz.muni.fi.japanesedictionary.main.DisplayCharacterInfoActivity$1 -> cz.muni.fi.japanesedictionary.main.c:
    cz.muni.fi.japanesedictionary.main.DisplayCharacterInfoActivity this$0 -> a
    void onDrawerClosed(android.view.View) -> b
    void onDrawerOpened(android.view.View) -> a
cz.muni.fi.japanesedictionary.main.DisplayTranslationActivity -> cz.muni.fi.japanesedictionary.main.DisplayTranslationActivity:
    cz.muni.fi.japanesedictionary.database.GlossaryReaderContract mDatabase -> o
    android.support.v4.widget.DrawerLayout mDrawerLayout -> p
    android.widget.ListView mDrawerList -> q
    android.support.v4.app.ActionBarDrawerToggle mDrawerToggle -> r
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onDestroy() -> onDestroy
    void showKanjiDetail(cz.muni.fi.japanesedictionary.entity.JapaneseCharacter) -> a
    cz.muni.fi.japanesedictionary.database.GlossaryReaderContract getDatabase() -> a
    void onStop() -> onStop
    void onPostCreate(android.os.Bundle) -> onPostCreate
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
cz.muni.fi.japanesedictionary.main.DisplayTranslationActivity$1 -> cz.muni.fi.japanesedictionary.main.d:
    cz.muni.fi.japanesedictionary.main.DisplayTranslationActivity this$0 -> a
    void onDrawerClosed(android.view.View) -> b
    void onDrawerOpened(android.view.View) -> a
cz.muni.fi.japanesedictionary.main.FavoriteActivity -> cz.muni.fi.japanesedictionary.main.FavoriteActivity:
    android.support.v4.widget.DrawerLayout mDrawerLayout -> o
    android.widget.ListView mDrawerList -> p
    android.support.v4.app.ActionBarDrawerToggle mDrawerToggle -> q
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onPostCreate(android.os.Bundle) -> onPostCreate
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
cz.muni.fi.japanesedictionary.main.FavoriteActivity$1 -> cz.muni.fi.japanesedictionary.main.e:
    cz.muni.fi.japanesedictionary.main.FavoriteActivity this$0 -> a
    void onDrawerClosed(android.view.View) -> b
    void onDrawerOpened(android.view.View) -> a
cz.muni.fi.japanesedictionary.main.MainActivity -> cz.muni.fi.japanesedictionary.main.MainActivity:
    cz.muni.fi.japanesedictionary.database.GlossaryReaderContract mDatabase -> p
    android.support.v7.widget.SearchView mSearchView -> q
    java.lang.String mLastTabId -> r
    java.lang.String mCurFilter -> s
    java.lang.String[] mTabKeys -> o
    android.view.Menu mMenu -> t
    android.support.v4.widget.DrawerLayout mDrawerLayout -> u
    android.widget.ListView mDrawerList -> v
    android.support.v4.app.ActionBarDrawerToggle mDrawerToggle -> w
    boolean mNoteVisible -> x
    boolean mFavoriteVisible -> y
    boolean mSearchVisible -> z
    android.support.v4.view.ViewPager mPager -> A
    boolean mWaitingForConnection -> B
    android.content.BroadcastReceiver mInternetReceiver -> C
    void onCreate(android.os.Bundle) -> onCreate
    boolean onPrepareOptionsMenu(android.view.Menu) -> onPrepareOptionsMenu
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onPostCreate(android.os.Bundle) -> onPostCreate
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onDestroy() -> onDestroy
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    boolean onQueryTextSubmit(java.lang.String) -> a_
    boolean canWriteExternalStorage() -> i
    boolean isMyServiceRunning(android.content.Context) -> a
    void doPositiveClick() -> j
    void doNegativeClick() -> k
    void downloadDictionary() -> l
    void showPreferences(android.view.View) -> showPreferences
    void onTranslationSelected(int) -> a
    cz.muni.fi.japanesedictionary.entity.Translation getTranslationCallBack(int) -> b
    cz.muni.fi.japanesedictionary.database.GlossaryReaderContract getDatabase() -> a
    void showKanjiDetail(cz.muni.fi.japanesedictionary.entity.JapaneseCharacter) -> a
    void onTabSelected(android.support.v7.app.ActionBar$Tab,android.support.v4.app.FragmentTransaction) -> a
    void onTabUnselected(android.support.v7.app.ActionBar$Tab,android.support.v4.app.FragmentTransaction) -> b
    void onTabReselected(android.support.v7.app.ActionBar$Tab,android.support.v4.app.FragmentTransaction) -> c
    void setUpTabs(java.lang.String) -> b
    java.lang.String getCurrentFilter() -> b
    java.lang.String getFragmentTag(int) -> c
    void displayDownloadPrompt() -> m
    void onNewIntent(android.content.Intent) -> onNewIntent
    void access$000(cz.muni.fi.japanesedictionary.main.MainActivity) -> a
    android.support.v4.view.ViewPager access$100(cz.muni.fi.japanesedictionary.main.MainActivity) -> b
    java.lang.String access$200(cz.muni.fi.japanesedictionary.main.MainActivity,int) -> a
    java.lang.String access$300(cz.muni.fi.japanesedictionary.main.MainActivity) -> c
    android.view.Menu access$400(cz.muni.fi.japanesedictionary.main.MainActivity) -> d
    android.widget.ListView access$600(cz.muni.fi.japanesedictionary.main.MainActivity) -> e
    android.support.v4.widget.DrawerLayout access$700(cz.muni.fi.japanesedictionary.main.MainActivity) -> f
    java.lang.String access$302(cz.muni.fi.japanesedictionary.main.MainActivity,java.lang.String) -> a
cz.muni.fi.japanesedictionary.main.MainActivity$1 -> cz.muni.fi.japanesedictionary.main.f:
    cz.muni.fi.japanesedictionary.main.MainActivity this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
cz.muni.fi.japanesedictionary.main.MainActivity$2 -> cz.muni.fi.japanesedictionary.main.g:
    cz.muni.fi.japanesedictionary.main.MainActivity this$0 -> a
    void onPageSelected(int) -> a
cz.muni.fi.japanesedictionary.main.MainActivity$3 -> cz.muni.fi.japanesedictionary.main.h:
    cz.muni.fi.japanesedictionary.main.MainActivity this$0 -> a
    void onDrawerClosed(android.view.View) -> b
    void onDrawerOpened(android.view.View) -> a
cz.muni.fi.japanesedictionary.main.MainActivity$DrawerItemClickListenerMainActivity -> cz.muni.fi.japanesedictionary.main.i:
    cz.muni.fi.japanesedictionary.main.MainActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
cz.muni.fi.japanesedictionary.main.MyPreferencesActivity -> cz.muni.fi.japanesedictionary.main.MyPreferencesActivity:
    void onCreate(android.os.Bundle) -> onCreate
cz.muni.fi.japanesedictionary.main.MyPreferencesActivity$1 -> cz.muni.fi.japanesedictionary.main.j:
    cz.muni.fi.japanesedictionary.main.MyPreferencesActivity this$0 -> a
    boolean onPreferenceClick(android.preference.Preference) -> onPreferenceClick
cz.muni.fi.japanesedictionary.parser.ParserService -> cz.muni.fi.japanesedictionary.parser.ParserService:
    java.net.URL mDownloadJMDictFrom -> a
    java.io.File mDownloadJMDictTo -> b
    boolean mDownloadingJMDict -> c
    java.net.URL mDownloadKanjidicFrom -> d
    java.io.File mDownloadKanjidicTo -> e
    boolean mDownloadingKanjidic -> f
    boolean mDownloadInProgress -> g
    boolean mCurrentlyDownloading -> h
    boolean mParsing -> i
    android.support.v4.app.NotificationCompat$Builder mBuilder -> j
    android.app.NotificationManager mNotifyManager -> k
    android.app.Notification mNotification -> l
    android.widget.RemoteViews mNotificationView -> m
    boolean mComplete -> n
    android.os.Looper mServiceLooper -> o
    cz.muni.fi.japanesedictionary.parser.ParserService$ServiceHandler mServiceHandler -> p
    java.lang.String mName -> q
    boolean mRedelivery -> r
    int mStartId -> s
    android.content.BroadcastReceiver mInternetReceiver -> t
    void setIntentRedelivery(boolean) -> setIntentRedelivery
    void onCreate() -> onCreate
    void onStart(android.content.Intent,int) -> onStart
    int onStartCommand(android.content.Intent,int,int) -> onStartCommand
    android.os.IBinder onBind(android.content.Intent) -> onBind
    boolean downloadFile(java.net.URL,java.io.File) -> a
    void downloadDictionaries() -> a
    void parseDictionaries() -> b
    void onHandleIntent(android.content.Intent) -> onHandleIntent
    java.lang.String parseDictionary(java.lang.String) -> a
    java.lang.String parseKanjiDict(java.lang.String) -> b
    void serviceSuccessfullyDone(java.lang.String,java.lang.String) -> a
    void onDestroy() -> onDestroy
    void closeIOStreams(java.io.InputStream,java.io.OutputStream) -> a
    boolean deleteDirectory(java.io.File) -> a
    int access$002(cz.muni.fi.japanesedictionary.parser.ParserService,int) -> a
    void access$100(cz.muni.fi.japanesedictionary.parser.ParserService) -> a
    int access$000(cz.muni.fi.japanesedictionary.parser.ParserService) -> b
    boolean access$200(cz.muni.fi.japanesedictionary.parser.ParserService) -> c
    boolean access$300(cz.muni.fi.japanesedictionary.parser.ParserService) -> d
    cz.muni.fi.japanesedictionary.parser.ParserService$ServiceHandler access$400(cz.muni.fi.japanesedictionary.parser.ParserService) -> e
    cz.muni.fi.japanesedictionary.parser.ParserService$ServiceHandler access$402(cz.muni.fi.japanesedictionary.parser.ParserService,cz.muni.fi.japanesedictionary.parser.ParserService$ServiceHandler) -> a
    android.os.Looper access$500(cz.muni.fi.japanesedictionary.parser.ParserService) -> f
cz.muni.fi.japanesedictionary.parser.ParserService$1 -> cz.muni.fi.japanesedictionary.parser.a:
    cz.muni.fi.japanesedictionary.parser.ParserService this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
cz.muni.fi.japanesedictionary.parser.ParserService$ServiceDownloadHandler -> cz.muni.fi.japanesedictionary.parser.b:
    cz.muni.fi.japanesedictionary.parser.ParserService this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
cz.muni.fi.japanesedictionary.parser.ParserService$ServiceHandler -> cz.muni.fi.japanesedictionary.parser.c:
    cz.muni.fi.japanesedictionary.parser.ParserService this$0 -> b
    void handleMessage(android.os.Message) -> handleMessage
cz.muni.fi.japanesedictionary.parser.RomanizationEnum -> cz.muni.fi.japanesedictionary.parser.d:
    cz.muni.fi.japanesedictionary.parser.RomanizationEnum Hepburn -> a
    java.util.concurrent.ConcurrentMap katakanaToRomaji -> b
    java.util.concurrent.ConcurrentMap hiraganaToRomaji -> c
    java.util.concurrent.ConcurrentMap romajiToKatakana -> d
    java.util.concurrent.ConcurrentMap romajiToHiragana -> e
    java.util.Set DOUBLED_CONSONANTS -> f
    cz.muni.fi.japanesedictionary.parser.RomanizationEnum[] $VALUES -> g
    cz.muni.fi.japanesedictionary.parser.RomanizationEnum[] values() -> values
    cz.muni.fi.japanesedictionary.parser.RomanizationEnum valueOf(java.lang.String) -> valueOf
    java.lang.String getHiraganaTable() -> a
    java.lang.String getKatakanaTable() -> b
    void parse(java.util.StringTokenizer,java.util.concurrent.ConcurrentMap,java.util.concurrent.ConcurrentMap) -> a
    java.lang.String toHiragana(java.lang.String) -> a
    java.lang.String toKana(java.util.concurrent.ConcurrentMap,java.lang.String,boolean) -> a
    boolean isVowel(char) -> b
    boolean isDoubledConsonant(java.lang.String) -> c
    boolean isAsciiLetter(char) -> a
    java.lang.String toRomaji(java.lang.String) -> b
cz.muni.fi.japanesedictionary.parser.RomanizationEnum$1 -> cz.muni.fi.japanesedictionary.parser.e:
    java.lang.String getHiraganaTable() -> a
    java.lang.String getKatakanaTable() -> b
cz.muni.fi.japanesedictionary.parser.SaxDataHolder -> cz.muni.fi.japanesedictionary.parser.f:
    android.app.NotificationManager mNotifyManager -> a
    android.app.Notification mNotification -> b
    android.widget.RemoteViews mNotificationView -> c
    android.content.BroadcastReceiver mReceiverDone -> d
    boolean mCanceled -> e
    org.apache.lucene.index.IndexWriter mWriter -> f
    org.apache.lucene.document.Document mDocument -> g
    boolean mJapaneseKeb -> h
    boolean mJapaneseReb -> i
    boolean mEnglish -> j
    boolean mFrench -> k
    boolean mDutch -> l
    boolean mGerman -> m
    long mStartTime -> n
    org.json.JSONArray mJapaneseRebJSON -> o
    org.json.JSONArray mJapaneseKebJSON -> p
    org.json.JSONArray mEnglishJSON -> q
    org.json.JSONArray mEnglishJSONSense -> r
    org.json.JSONArray mFrenchJSON -> s
    org.json.JSONArray mFrenchJSONSense -> t
    org.json.JSONArray mDutchJSON -> u
    org.json.JSONArray mDutchJSONSense -> v
    org.json.JSONArray mGermanJSON -> w
    org.json.JSONArray mGermanJSONSense -> x
    java.lang.String[] mNotificationTimeLeft -> y
    android.content.Context mContext -> z
    int mCountDone -> A
    int mPerc -> B
    int mPercSave -> C
    void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes) -> startElement
    void characters(char[],int,int) -> characters
    void endElement(java.lang.String,java.lang.String,java.lang.String) -> endElement
    void startDocument() -> startDocument
    void endDocument() -> endDocument
    boolean access$002(cz.muni.fi.japanesedictionary.parser.SaxDataHolder,boolean) -> a
cz.muni.fi.japanesedictionary.parser.SaxDataHolder$1 -> cz.muni.fi.japanesedictionary.parser.g:
    cz.muni.fi.japanesedictionary.parser.SaxDataHolder this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
cz.muni.fi.japanesedictionary.parser.SaxDataHolderKanjiDict -> cz.muni.fi.japanesedictionary.parser.h:
    android.app.NotificationManager mNotifyManager -> a
    android.app.Notification mNotification -> b
    android.widget.RemoteViews mNotificationView -> c
    android.content.BroadcastReceiver mReceiverInterrupted -> d
    boolean mCanceled -> e
    org.apache.lucene.index.IndexWriter mWriter -> f
    org.apache.lucene.document.Document mDoc -> g
    long mStartTime -> h
    java.lang.String[] mNotificationTimeLeft -> i
    android.content.Context mContext -> j
    int mCountDone -> k
    int mPerc -> l
    int mPercSave -> m
    boolean mLiteral -> n
    boolean mRadicalClassic -> o
    boolean mGrade -> p
    boolean mStrokeCount -> q
    boolean mDicRef -> r
    boolean mQueryCodeSkip -> s
    boolean mRMGroupJaOn -> t
    boolean mRMGroupJaKun -> u
    boolean mMeaningEnglish -> v
    boolean mMeaningFrench -> w
    boolean mMeaningDutch -> x
    boolean mMeaningGerman -> y
    boolean mNanori -> z
    org.json.JSONObject mValueDicRef -> A
    java.lang.String mDicRefKey -> B
    org.json.JSONArray mValueRmGroupJaOn -> C
    org.json.JSONArray mValueRmGroupJaKun -> D
    org.json.JSONArray mValueMeaningEnglish -> E
    org.json.JSONArray mValueMeaningFrench -> F
    org.json.JSONArray mValueMeaningDutch -> G
    org.json.JSONArray mValueMeaningGerman -> H
    org.json.JSONArray mValueNanori -> I
    void startDocument() -> startDocument
    void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes) -> startElement
    void characters(char[],int,int) -> characters
    void endElement(java.lang.String,java.lang.String,java.lang.String) -> endElement
    void endDocument() -> endDocument
    java.lang.String tryParseNumber(java.lang.String) -> a
    boolean access$002(cz.muni.fi.japanesedictionary.parser.SaxDataHolderKanjiDict,boolean) -> a
cz.muni.fi.japanesedictionary.parser.SaxDataHolderKanjiDict$1 -> cz.muni.fi.japanesedictionary.parser.i:
    cz.muni.fi.japanesedictionary.parser.SaxDataHolderKanjiDict this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
cz.muni.fi.japanesedictionary.parser.TranscriptionConverter -> cz.muni.fi.japanesedictionary.parser.j:
    java.lang.String kunreiToHepburn(java.lang.String) -> a
org.apache.lucene.LucenePackage -> a.a.a.a:
    java.lang.Package get() -> a
org.apache.lucene.analysis.Analyzer -> a.a.a.a.a:
    org.apache.lucene.util.CloseableThreadLocal tokenStreams -> b
    boolean $assertionsDisabled -> a
    boolean assertFinal() -> b
    org.apache.lucene.analysis.TokenStream tokenStream(java.lang.String,java.io.Reader) -> a
    org.apache.lucene.analysis.TokenStream reusableTokenStream(java.lang.String,java.io.Reader) -> b
    java.lang.Object getPreviousTokenStream() -> a
    void setPreviousTokenStream(java.lang.Object) -> a
    int getPositionIncrementGap(java.lang.String) -> a
    int getOffsetGap(org.apache.lucene.document.Fieldable) -> a
    void close() -> close
org.apache.lucene.analysis.CachingTokenFilter -> a.a.a.a.b:
    java.util.List cache -> c
    java.util.Iterator iterator -> d
    org.apache.lucene.util.AttributeSource$State finalState -> e
    boolean incrementToken() -> a
    void end() -> b
    void reset() -> c
    void fillCache() -> d
org.apache.lucene.analysis.CharArrayMap -> a.a.a.a.c:
    org.apache.lucene.analysis.CharArrayMap EMPTY_MAP -> e
    org.apache.lucene.util.CharacterUtils charUtils -> f
    boolean ignoreCase -> g
    int count -> h
    org.apache.lucene.util.Version matchVersion -> a
    char[][] keys -> b
    java.lang.Object[] values -> c
    org.apache.lucene.analysis.CharArrayMap$EntrySet entrySet -> i
    org.apache.lucene.analysis.CharArraySet keySet -> j
    boolean $assertionsDisabled -> d
    void clear() -> clear
    boolean containsKey(char[],int,int) -> a
    boolean containsKey(java.lang.CharSequence) -> a
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Object get(char[],int,int) -> b
    java.lang.Object get(java.lang.CharSequence) -> b
    java.lang.Object get(java.lang.Object) -> get
    int getSlot(char[],int,int) -> c
    int getSlot(java.lang.CharSequence) -> c
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object put(java.lang.String,java.lang.Object) -> a
    java.lang.Object put(char[],java.lang.Object) -> a
    void rehash() -> f
    boolean equals(char[],int,int,char[]) -> a
    boolean equals(java.lang.CharSequence,char[]) -> a
    int getHashCode(char[],int,int) -> d
    int getHashCode(java.lang.CharSequence) -> d
    java.lang.Object remove(java.lang.Object) -> remove
    int size() -> size
    java.lang.String toString() -> toString
    org.apache.lucene.analysis.CharArrayMap$EntrySet createEntrySet() -> a
    org.apache.lucene.analysis.CharArrayMap$EntrySet entrySet() -> b
    java.util.Set originalKeySet() -> c
    org.apache.lucene.analysis.CharArraySet keySet() -> d
    org.apache.lucene.analysis.CharArrayMap unmodifiableMap(org.apache.lucene.analysis.CharArrayMap) -> a
    org.apache.lucene.analysis.CharArrayMap copy(org.apache.lucene.util.Version,java.util.Map) -> a
    org.apache.lucene.analysis.CharArrayMap emptyMap() -> e
    java.util.Set entrySet() -> entrySet
    java.util.Set keySet() -> keySet
    int access$300(org.apache.lucene.analysis.CharArrayMap) -> b
org.apache.lucene.analysis.CharArrayMap$1 -> a.a.a.a.d:
    org.apache.lucene.analysis.CharArrayMap this$0 -> a
    boolean add(java.lang.Object) -> add
org.apache.lucene.analysis.CharArrayMap$EmptyCharArrayMap -> a.a.a.a.e:
    boolean containsKey(char[],int,int) -> a
    boolean containsKey(java.lang.CharSequence) -> a
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Object get(char[],int,int) -> b
    java.lang.Object get(java.lang.CharSequence) -> b
    java.lang.Object get(java.lang.Object) -> get
org.apache.lucene.analysis.CharArrayMap$EntryIterator -> a.a.a.a.f:
    int pos -> b
    int lastPos -> c
    boolean allowModify -> d
    org.apache.lucene.analysis.CharArrayMap this$0 -> a
    void goNext() -> b
    boolean hasNext() -> hasNext
    java.util.Map$Entry next() -> a
    void remove() -> remove
    java.lang.Object next() -> next
org.apache.lucene.analysis.CharArrayMap$EntrySet -> a.a.a.a.g:
    boolean allowModify -> b
    org.apache.lucene.analysis.CharArrayMap this$0 -> a
    org.apache.lucene.analysis.CharArrayMap$EntryIterator iterator() -> a
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    int size() -> size
    void clear() -> clear
    java.util.Iterator iterator() -> iterator
org.apache.lucene.analysis.CharArrayMap$MapEntry -> a.a.a.a.h:
    int pos -> b
    boolean allowModify -> c
    org.apache.lucene.analysis.CharArrayMap this$0 -> a
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.String toString() -> toString
org.apache.lucene.analysis.CharArrayMap$UnmodifiableCharArrayMap -> a.a.a.a.i:
    void clear() -> clear
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object put(char[],java.lang.Object) -> a
    java.lang.Object put(java.lang.String,java.lang.Object) -> a
    java.lang.Object remove(java.lang.Object) -> remove
    org.apache.lucene.analysis.CharArrayMap$EntrySet createEntrySet() -> a
org.apache.lucene.analysis.CharArraySet -> a.a.a.a.j:
    org.apache.lucene.analysis.CharArraySet EMPTY_SET -> b
    java.lang.Object PLACEHOLDER -> a
    org.apache.lucene.analysis.CharArrayMap map -> c
    void clear() -> clear
    boolean contains(char[],int,int) -> a
    boolean contains(java.lang.Object) -> contains
    boolean add(java.lang.Object) -> add
    int size() -> size
    org.apache.lucene.analysis.CharArraySet unmodifiableSet(org.apache.lucene.analysis.CharArraySet) -> a
    org.apache.lucene.analysis.CharArraySet copy(org.apache.lucene.util.Version,java.util.Set) -> a
    java.util.Iterator stringIterator() -> a
    java.util.Iterator iterator() -> iterator
    java.lang.String toString() -> toString
    org.apache.lucene.analysis.CharArrayMap access$000(org.apache.lucene.analysis.CharArraySet) -> b
org.apache.lucene.analysis.CharArraySet$1 -> a.a.a.a.k:
org.apache.lucene.analysis.CharArraySet$CharArraySetIterator -> a.a.a.a.l:
    int pos -> a
    char[] next -> b
    org.apache.lucene.analysis.CharArraySet this$0 -> c
    void goNext() -> c
    boolean hasNext() -> hasNext
    char[] nextCharArray() -> a
    java.lang.String next() -> b
    void remove() -> remove
    java.lang.Object next() -> next
org.apache.lucene.analysis.CharStream -> a.a.a.a.m:
    int correctOffset(int) -> a
org.apache.lucene.analysis.FilteringTokenFilter -> a.a.a.a.n:
    org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute posIncrAtt -> c
    boolean enablePositionIncrements -> d
    boolean first -> e
    boolean accept() -> d
    boolean incrementToken() -> a
    void reset() -> c
org.apache.lucene.analysis.LowerCaseFilter -> a.a.a.a.o:
    org.apache.lucene.util.CharacterUtils charUtils -> c
    org.apache.lucene.analysis.tokenattributes.CharTermAttribute termAtt -> d
    boolean incrementToken() -> a
org.apache.lucene.analysis.NumericTokenStream -> a.a.a.a.p:
    org.apache.lucene.analysis.tokenattributes.CharTermAttribute termAtt -> a
    org.apache.lucene.analysis.tokenattributes.TypeAttribute typeAtt -> c
    org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute posIncrAtt -> d
    int shift -> e
    int valSize -> f
    int precisionStep -> g
    long value -> h
    org.apache.lucene.analysis.NumericTokenStream setLongValue(long) -> a
    org.apache.lucene.analysis.NumericTokenStream setIntValue(int) -> a
    org.apache.lucene.analysis.NumericTokenStream setDoubleValue(double) -> a
    org.apache.lucene.analysis.NumericTokenStream setFloatValue(float) -> a
    void reset() -> c
    boolean incrementToken() -> a
    java.lang.String toString() -> toString
org.apache.lucene.analysis.ReusableAnalyzerBase -> a.a.a.a.q:
    org.apache.lucene.analysis.ReusableAnalyzerBase$TokenStreamComponents createComponents(java.lang.String,java.io.Reader) -> c
    org.apache.lucene.analysis.TokenStream reusableTokenStream(java.lang.String,java.io.Reader) -> b
    org.apache.lucene.analysis.TokenStream tokenStream(java.lang.String,java.io.Reader) -> a
    java.io.Reader initReader(java.io.Reader) -> a
org.apache.lucene.analysis.ReusableAnalyzerBase$TokenStreamComponents -> a.a.a.a.r:
    org.apache.lucene.analysis.Tokenizer source -> a
    org.apache.lucene.analysis.TokenStream sink -> b
    boolean reset(java.io.Reader) -> a
    org.apache.lucene.analysis.TokenStream getTokenStream() -> a
org.apache.lucene.analysis.StopFilter -> a.a.a.a.s:
    org.apache.lucene.analysis.CharArraySet stopWords -> c
    org.apache.lucene.analysis.tokenattributes.CharTermAttribute termAtt -> d
    boolean accept() -> d
org.apache.lucene.analysis.StopwordAnalyzerBase -> a.a.a.a.t:
    org.apache.lucene.analysis.CharArraySet stopwords -> b
    org.apache.lucene.util.Version matchVersion -> c
org.apache.lucene.analysis.TokenFilter -> a.a.a.a.u:
    org.apache.lucene.analysis.TokenStream input -> a
    void end() -> b
    void close() -> close
    void reset() -> c
org.apache.lucene.analysis.TokenStream -> a.a.a.a.v:
    boolean $assertionsDisabled -> b
    boolean assertFinal() -> d
    boolean incrementToken() -> a
    void end() -> b
    void reset() -> c
    void close() -> close
org.apache.lucene.analysis.Tokenizer -> a.a.a.a.w:
    java.io.Reader input -> a
    void close() -> close
    int correctOffset(int) -> a
    void reset(java.io.Reader) -> a
org.apache.lucene.analysis.cjk.CJKAnalyzer -> a.a.a.a.a.a:
    java.lang.String[] STOP_WORDS -> d
    org.apache.lucene.analysis.ReusableAnalyzerBase$TokenStreamComponents createComponents(java.lang.String,java.io.Reader) -> c
org.apache.lucene.analysis.cjk.CJKAnalyzer$DefaultSetHolder -> a.a.a.a.a.b:
    java.util.Set DEFAULT_STOP_SET -> a
org.apache.lucene.analysis.cjk.CJKBigramFilter -> a.a.a.a.a.c:
    java.lang.String HAN_TYPE -> j
    java.lang.String HIRAGANA_TYPE -> k
    java.lang.String KATAKANA_TYPE -> l
    java.lang.String HANGUL_TYPE -> m
    java.lang.Object NO -> n
    java.lang.Object doHan -> o
    java.lang.Object doHiragana -> p
    java.lang.Object doKatakana -> q
    java.lang.Object doHangul -> r
    org.apache.lucene.analysis.tokenattributes.CharTermAttribute termAtt -> s
    org.apache.lucene.analysis.tokenattributes.TypeAttribute typeAtt -> t
    org.apache.lucene.analysis.tokenattributes.OffsetAttribute offsetAtt -> u
    int[] buffer -> c
    int[] startOffset -> d
    int[] endOffset -> e
    int bufferLen -> f
    int index -> g
    int lastEndOffset -> h
    boolean exhausted -> v
    org.apache.lucene.util.AttributeSource$State loneState -> w
    boolean incrementToken() -> a
    boolean doNext() -> d
    void refill() -> h
    void flushBigram() -> i
    void flushUnigram() -> j
    boolean hasBufferedBigram() -> k
    boolean hasBufferedUnigram() -> l
    void reset() -> c
org.apache.lucene.analysis.cjk.CJKTokenizer -> a.a.a.a.a.d:
    java.lang.String[] TOKEN_TYPE_NAMES -> c
    int offset -> d
    int bufferIndex -> e
    int dataLen -> f
    char[] buffer -> g
    char[] ioBuffer -> h
    int tokenType -> j
    boolean preIsTokened -> k
    org.apache.lucene.analysis.tokenattributes.CharTermAttribute termAtt -> l
    org.apache.lucene.analysis.tokenattributes.OffsetAttribute offsetAtt -> m
    org.apache.lucene.analysis.tokenattributes.TypeAttribute typeAtt -> n
    boolean incrementToken() -> a
    void end() -> b
    void reset() -> c
    void reset(java.io.Reader) -> a
org.apache.lucene.analysis.cjk.CJKWidthFilter -> a.a.a.a.a.e:
    org.apache.lucene.analysis.tokenattributes.CharTermAttribute termAtt -> c
    char[] KANA_NORM -> d
    byte[] KANA_COMBINE_VOICED -> e
    byte[] KANA_COMBINE_HALF_VOICED -> f
    boolean incrementToken() -> a
    boolean combine(char[],int,char) -> a
org.apache.lucene.analysis.standard.ClassicTokenizerImpl -> a.a.a.a.b.a:
    int[] ZZ_LEXSTATE -> b
    char[] ZZ_CMAP -> c
    int[] ZZ_ACTION -> d
    int[] ZZ_ROWMAP -> e
    int[] ZZ_TRANS -> f
    java.lang.String[] ZZ_ERROR_MSG -> g
    int[] ZZ_ATTRIBUTE -> h
    java.io.Reader zzReader -> i
    int zzState -> j
    int zzLexicalState -> k
    char[] zzBuffer -> l
    int zzMarkedPos -> m
    int zzCurrentPos -> n
    int zzStartRead -> o
    int zzEndRead -> p
    int yyline -> q
    int yychar -> r
    int yycolumn -> s
    boolean zzAtBOL -> t
    boolean zzAtEOF -> u
    boolean zzEOFDone -> v
    java.lang.String[] TOKEN_TYPES -> a
    int[] zzUnpackAction() -> d
    int zzUnpackAction(java.lang.String,int,int[]) -> a
    int[] zzUnpackRowMap() -> e
    int zzUnpackRowMap(java.lang.String,int,int[]) -> b
    int[] zzUnpackTrans() -> f
    int zzUnpackTrans(java.lang.String,int,int[]) -> c
    int[] zzUnpackAttribute() -> g
    int zzUnpackAttribute(java.lang.String,int,int[]) -> d
    int yychar() -> a
    void getText(org.apache.lucene.analysis.tokenattributes.CharTermAttribute) -> a
    char[] zzUnpackCMap(java.lang.String) -> a
    boolean zzRefill() -> h
    void yyreset(java.io.Reader) -> a
    int yylength() -> b
    void zzScanError(int) -> a
    int getNextToken() -> c
org.apache.lucene.analysis.standard.StandardTokenizer -> a.a.a.a.b.b:
    org.apache.lucene.analysis.standard.StandardTokenizerInterface scanner -> d
    java.lang.String[] TOKEN_TYPES -> c
    boolean replaceInvalidAcronym -> e
    int maxTokenLength -> f
    org.apache.lucene.analysis.tokenattributes.CharTermAttribute termAtt -> g
    org.apache.lucene.analysis.tokenattributes.OffsetAttribute offsetAtt -> h
    org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute posIncrAtt -> j
    org.apache.lucene.analysis.tokenattributes.TypeAttribute typeAtt -> k
    void init(org.apache.lucene.util.Version) -> a
    boolean incrementToken() -> a
    void end() -> b
    void reset(java.io.Reader) -> a
org.apache.lucene.analysis.standard.StandardTokenizerImpl -> a.a.a.a.b.c:
    int[] ZZ_LEXSTATE -> a
    char[] ZZ_CMAP -> b
    int[] ZZ_ACTION -> c
    int[] ZZ_ROWMAP -> d
    int[] ZZ_TRANS -> e
    java.lang.String[] ZZ_ERROR_MSG -> f
    int[] ZZ_ATTRIBUTE -> g
    java.io.Reader zzReader -> h
    int zzState -> i
    int zzLexicalState -> j
    char[] zzBuffer -> k
    int zzMarkedPos -> l
    int zzCurrentPos -> m
    int zzStartRead -> n
    int zzEndRead -> o
    int yyline -> p
    int yychar -> q
    int yycolumn -> r
    boolean zzAtBOL -> s
    boolean zzAtEOF -> t
    boolean zzEOFDone -> u
    int[] zzUnpackAction() -> d
    int zzUnpackAction(java.lang.String,int,int[]) -> a
    int[] zzUnpackRowMap() -> e
    int zzUnpackRowMap(java.lang.String,int,int[]) -> b
    int[] zzUnpackTrans() -> f
    int zzUnpackTrans(java.lang.String,int,int[]) -> c
    int[] zzUnpackAttribute() -> g
    int zzUnpackAttribute(java.lang.String,int,int[]) -> d
    int yychar() -> a
    void getText(org.apache.lucene.analysis.tokenattributes.CharTermAttribute) -> a
    char[] zzUnpackCMap(java.lang.String) -> a
    boolean zzRefill() -> h
    void yyreset(java.io.Reader) -> a
    int yylength() -> b
    void zzScanError(int) -> a
    int getNextToken() -> c
org.apache.lucene.analysis.standard.StandardTokenizerInterface -> a.a.a.a.b.d:
    void getText(org.apache.lucene.analysis.tokenattributes.CharTermAttribute) -> a
    int yychar() -> a
    void yyreset(java.io.Reader) -> a
    int yylength() -> b
    int getNextToken() -> c
org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31 -> a.a.a.a.b.a.a:
    int[] ZZ_LEXSTATE -> a
    char[] ZZ_CMAP -> b
    int[] ZZ_ACTION -> c
    int[] ZZ_ROWMAP -> d
    int[] ZZ_TRANS -> e
    java.lang.String[] ZZ_ERROR_MSG -> f
    int[] ZZ_ATTRIBUTE -> g
    java.io.Reader zzReader -> h
    int zzState -> i
    int zzLexicalState -> j
    char[] zzBuffer -> k
    int zzMarkedPos -> l
    int zzCurrentPos -> m
    int zzStartRead -> n
    int zzEndRead -> o
    int yyline -> p
    int yychar -> q
    int yycolumn -> r
    boolean zzAtBOL -> s
    boolean zzAtEOF -> t
    boolean zzEOFDone -> u
    int[] zzUnpackAction() -> d
    int zzUnpackAction(java.lang.String,int,int[]) -> a
    int[] zzUnpackRowMap() -> e
    int zzUnpackRowMap(java.lang.String,int,int[]) -> b
    int[] zzUnpackTrans() -> f
    int zzUnpackTrans(java.lang.String,int,int[]) -> c
    int[] zzUnpackAttribute() -> g
    int zzUnpackAttribute(java.lang.String,int,int[]) -> d
    int yychar() -> a
    void getText(org.apache.lucene.analysis.tokenattributes.CharTermAttribute) -> a
    char[] zzUnpackCMap(java.lang.String) -> a
    boolean zzRefill() -> h
    void yyreset(java.io.Reader) -> a
    int yylength() -> b
    void zzScanError(int) -> a
    int getNextToken() -> c
org.apache.lucene.analysis.tokenattributes.CharTermAttribute -> a.a.a.a.c.a:
    void copyBuffer(char[],int,int) -> a
    char[] buffer() -> a
    char[] resizeBuffer(int) -> a
    org.apache.lucene.analysis.tokenattributes.CharTermAttribute setLength(int) -> b
    org.apache.lucene.analysis.tokenattributes.CharTermAttribute setEmpty() -> b
    org.apache.lucene.analysis.tokenattributes.CharTermAttribute append(java.lang.String) -> a
org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl -> a.a.a.a.c.b:
    int MIN_BUFFER_SIZE -> d
    char[] termBuffer -> e
    int termLength -> f
    boolean $assertionsDisabled -> a
    void copyBuffer(char[],int,int) -> a
    void setTermBuffer(char[],int,int) -> b
    char[] buffer() -> a
    char[] resizeBuffer(int) -> a
    void growTermBuffer(int) -> c
    org.apache.lucene.analysis.tokenattributes.CharTermAttribute setLength(int) -> b
    org.apache.lucene.analysis.tokenattributes.CharTermAttribute setEmpty() -> b
    int length() -> length
    char charAt(int) -> charAt
    java.lang.CharSequence subSequence(int,int) -> subSequence
    org.apache.lucene.analysis.tokenattributes.CharTermAttribute append(java.lang.CharSequence) -> a
    org.apache.lucene.analysis.tokenattributes.CharTermAttribute append(java.lang.CharSequence,int,int) -> a
    org.apache.lucene.analysis.tokenattributes.CharTermAttribute append(char) -> a
    org.apache.lucene.analysis.tokenattributes.CharTermAttribute append(java.lang.String) -> a
    org.apache.lucene.analysis.tokenattributes.CharTermAttribute appendNull() -> d
    int hashCode() -> hashCode
    void clear() -> c
    java.lang.Object clone() -> clone
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    void reflectWith(org.apache.lucene.util.AttributeReflector) -> a
    void copyTo(org.apache.lucene.util.AttributeImpl) -> a
    java.lang.Appendable append(char) -> append
    java.lang.Appendable append(java.lang.CharSequence,int,int) -> append
    java.lang.Appendable append(java.lang.CharSequence) -> append
org.apache.lucene.analysis.tokenattributes.OffsetAttribute -> a.a.a.a.c.c:
    int startOffset() -> a
    void setOffset(int,int) -> a
    int endOffset() -> b
org.apache.lucene.analysis.tokenattributes.PayloadAttribute -> a.a.a.a.c.d:
    org.apache.lucene.index.Payload getPayload() -> a
org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute -> a.a.a.a.c.e:
    void setPositionIncrement(int) -> a
    int getPositionIncrement() -> a
org.apache.lucene.analysis.tokenattributes.TermAttribute -> a.a.a.a.c.f:
    void setTermBuffer(char[],int,int) -> b
org.apache.lucene.analysis.tokenattributes.TypeAttribute -> a.a.a.a.c.g:
    java.lang.String type() -> a
    void setType(java.lang.String) -> a
org.apache.lucene.analysis.util.StemmerUtil -> a.a.a.a.d.a:
    int delete(char[],int,int) -> a
org.apache.lucene.document.AbstractField -> a.a.a.b.a:
    java.lang.String name -> a
    boolean storeTermVector -> b
    boolean storeOffsetWithTermVector -> c
    boolean storePositionWithTermVector -> d
    boolean omitNorms -> e
    boolean isStored -> f
    boolean isIndexed -> g
    boolean isTokenized -> h
    boolean isBinary -> i
    boolean lazy -> j
    org.apache.lucene.index.FieldInfo$IndexOptions indexOptions -> k
    float boost -> l
    java.lang.Object fieldsData -> m
    org.apache.lucene.analysis.TokenStream tokenStream -> n
    int binaryLength -> o
    int binaryOffset -> p
    float getBoost() -> a
    java.lang.String name() -> b
    void setStoreTermVector(org.apache.lucene.document.Field$TermVector) -> a
    boolean isStored() -> c
    boolean isIndexed() -> d
    boolean isTokenized() -> e
    boolean isTermVectorStored() -> f
    boolean isStoreOffsetWithTermVector() -> g
    boolean isStorePositionWithTermVector() -> h
    boolean isBinary() -> i
    byte[] getBinaryValue() -> j
    byte[] getBinaryValue(byte[]) -> a
    int getBinaryLength() -> k
    int getBinaryOffset() -> l
    boolean getOmitNorms() -> m
    org.apache.lucene.index.FieldInfo$IndexOptions getIndexOptions() -> n
    void setOmitNorms(boolean) -> a
    void setIndexOptions(org.apache.lucene.index.FieldInfo$IndexOptions) -> a
    java.lang.String toString() -> toString
org.apache.lucene.document.CompressionTools -> a.a.a.b.b:
    byte[] decompress(byte[]) -> a
org.apache.lucene.document.DateField -> a.a.a.b.c:
    int DATE_LEN -> a
    java.lang.String dateToString(java.util.Date) -> a
    java.lang.String timeToString(long) -> a
org.apache.lucene.document.DateTools -> a.a.a.b.d:
    java.util.TimeZone GMT -> a
    java.lang.ThreadLocal TL_CAL -> b
    java.lang.ThreadLocal TL_FORMATS -> c
    java.lang.String dateToString(java.util.Date,org.apache.lucene.document.DateTools$Resolution) -> a
    java.lang.String timeToString(long,org.apache.lucene.document.DateTools$Resolution) -> a
    long round(long,org.apache.lucene.document.DateTools$Resolution) -> b
org.apache.lucene.document.DateTools$1 -> a.a.a.b.e:
    java.util.Calendar initialValue() -> a
    java.lang.Object initialValue() -> initialValue
org.apache.lucene.document.DateTools$2 -> a.a.a.b.f:
    java.text.SimpleDateFormat[] initialValue() -> a
    java.lang.Object initialValue() -> initialValue
org.apache.lucene.document.DateTools$3 -> a.a.a.b.g:
    int[] $SwitchMap$org$apache$lucene$document$DateTools$Resolution -> a
org.apache.lucene.document.DateTools$Resolution -> a.a.a.b.h:
    org.apache.lucene.document.DateTools$Resolution YEAR -> a
    org.apache.lucene.document.DateTools$Resolution MONTH -> b
    org.apache.lucene.document.DateTools$Resolution DAY -> c
    org.apache.lucene.document.DateTools$Resolution HOUR -> d
    org.apache.lucene.document.DateTools$Resolution MINUTE -> e
    org.apache.lucene.document.DateTools$Resolution SECOND -> f
    org.apache.lucene.document.DateTools$Resolution MILLISECOND -> g
    int formatLen -> h
    java.text.SimpleDateFormat format -> i
    org.apache.lucene.document.DateTools$Resolution[] $VALUES -> j
    org.apache.lucene.document.DateTools$Resolution[] values() -> values
    org.apache.lucene.document.DateTools$Resolution valueOf(java.lang.String) -> valueOf
    java.lang.String toString() -> toString
org.apache.lucene.document.Document -> a.a.a.b.i:
    java.util.List fields -> a
    float boost -> b
    org.apache.lucene.document.Field[] NO_FIELDS -> c
    org.apache.lucene.document.Fieldable[] NO_FIELDABLES -> d
    java.lang.String[] NO_STRINGS -> e
    byte[][] NO_BYTES -> f
    float getBoost() -> a
    void add(org.apache.lucene.document.Fieldable) -> a
    java.lang.String get(java.lang.String) -> a
    java.util.List getFields() -> b
    java.lang.String toString() -> toString
org.apache.lucene.document.Field -> a.a.a.b.j:
    java.lang.String stringValue() -> o
    java.io.Reader readerValue() -> p
    org.apache.lucene.analysis.TokenStream tokenStreamValue() -> q
org.apache.lucene.document.Field$1 -> a.a.a.b.k:
org.apache.lucene.document.Field$Index -> a.a.a.b.l:
    org.apache.lucene.document.Field$Index NO -> a
    org.apache.lucene.document.Field$Index ANALYZED -> b
    org.apache.lucene.document.Field$Index NOT_ANALYZED -> c
    org.apache.lucene.document.Field$Index NOT_ANALYZED_NO_NORMS -> d
    org.apache.lucene.document.Field$Index ANALYZED_NO_NORMS -> e
    org.apache.lucene.document.Field$Index[] $VALUES -> f
    org.apache.lucene.document.Field$Index[] values() -> values
    org.apache.lucene.document.Field$Index valueOf(java.lang.String) -> valueOf
    org.apache.lucene.document.Field$Index toIndex(boolean,boolean) -> a
    org.apache.lucene.document.Field$Index toIndex(boolean,boolean,boolean) -> a
    boolean isIndexed() -> a
    boolean isAnalyzed() -> b
    boolean omitNorms() -> c
org.apache.lucene.document.Field$Index$1 -> a.a.a.b.m:
    boolean isIndexed() -> a
    boolean isAnalyzed() -> b
    boolean omitNorms() -> c
org.apache.lucene.document.Field$Index$2 -> a.a.a.b.n:
    boolean isIndexed() -> a
    boolean isAnalyzed() -> b
    boolean omitNorms() -> c
org.apache.lucene.document.Field$Index$3 -> a.a.a.b.o:
    boolean isIndexed() -> a
    boolean isAnalyzed() -> b
    boolean omitNorms() -> c
org.apache.lucene.document.Field$Index$4 -> a.a.a.b.p:
    boolean isIndexed() -> a
    boolean isAnalyzed() -> b
    boolean omitNorms() -> c
org.apache.lucene.document.Field$Index$5 -> a.a.a.b.q:
    boolean isIndexed() -> a
    boolean isAnalyzed() -> b
    boolean omitNorms() -> c
org.apache.lucene.document.Field$Store -> a.a.a.b.r:
    org.apache.lucene.document.Field$Store YES -> a
    org.apache.lucene.document.Field$Store NO -> b
    org.apache.lucene.document.Field$Store[] $VALUES -> c
    org.apache.lucene.document.Field$Store[] values() -> values
    org.apache.lucene.document.Field$Store valueOf(java.lang.String) -> valueOf
    boolean isStored() -> a
org.apache.lucene.document.Field$Store$1 -> a.a.a.b.s:
    boolean isStored() -> a
org.apache.lucene.document.Field$Store$2 -> a.a.a.b.t:
    boolean isStored() -> a
org.apache.lucene.document.Field$TermVector -> a.a.a.b.u:
    org.apache.lucene.document.Field$TermVector NO -> a
    org.apache.lucene.document.Field$TermVector YES -> b
    org.apache.lucene.document.Field$TermVector WITH_POSITIONS -> c
    org.apache.lucene.document.Field$TermVector WITH_OFFSETS -> d
    org.apache.lucene.document.Field$TermVector WITH_POSITIONS_OFFSETS -> e
    org.apache.lucene.document.Field$TermVector[] $VALUES -> f
    org.apache.lucene.document.Field$TermVector[] values() -> values
    org.apache.lucene.document.Field$TermVector valueOf(java.lang.String) -> valueOf
    org.apache.lucene.document.Field$TermVector toTermVector(boolean,boolean,boolean) -> a
    boolean isStored() -> a
    boolean withPositions() -> b
    boolean withOffsets() -> c
org.apache.lucene.document.Field$TermVector$1 -> a.a.a.b.v:
    boolean isStored() -> a
    boolean withPositions() -> b
    boolean withOffsets() -> c
org.apache.lucene.document.Field$TermVector$2 -> a.a.a.b.w:
    boolean isStored() -> a
    boolean withPositions() -> b
    boolean withOffsets() -> c
org.apache.lucene.document.Field$TermVector$3 -> a.a.a.b.x:
    boolean isStored() -> a
    boolean withPositions() -> b
    boolean withOffsets() -> c
org.apache.lucene.document.Field$TermVector$4 -> a.a.a.b.y:
    boolean isStored() -> a
    boolean withPositions() -> b
    boolean withOffsets() -> c
org.apache.lucene.document.Field$TermVector$5 -> a.a.a.b.z:
    boolean isStored() -> a
    boolean withPositions() -> b
    boolean withOffsets() -> c
org.apache.lucene.document.FieldSelector -> a.a.a.b.aa:
    org.apache.lucene.document.FieldSelectorResult accept(java.lang.String) -> a
org.apache.lucene.document.FieldSelectorResult -> a.a.a.b.ab:
    org.apache.lucene.document.FieldSelectorResult LOAD -> a
    org.apache.lucene.document.FieldSelectorResult LAZY_LOAD -> b
    org.apache.lucene.document.FieldSelectorResult NO_LOAD -> c
    org.apache.lucene.document.FieldSelectorResult LOAD_AND_BREAK -> d
    org.apache.lucene.document.FieldSelectorResult SIZE -> e
    org.apache.lucene.document.FieldSelectorResult SIZE_AND_BREAK -> f
    org.apache.lucene.document.FieldSelectorResult LATENT -> g
    org.apache.lucene.document.FieldSelectorResult[] $VALUES -> h
    org.apache.lucene.document.FieldSelectorResult[] values() -> values
    org.apache.lucene.document.FieldSelectorResult valueOf(java.lang.String) -> valueOf
org.apache.lucene.document.Fieldable -> a.a.a.b.ac:
    float getBoost() -> a
    java.lang.String name() -> b
    java.lang.String stringValue() -> o
    java.io.Reader readerValue() -> p
    org.apache.lucene.analysis.TokenStream tokenStreamValue() -> q
    boolean isStored() -> c
    boolean isIndexed() -> d
    boolean isTokenized() -> e
    boolean isTermVectorStored() -> f
    boolean isStoreOffsetWithTermVector() -> g
    boolean isStorePositionWithTermVector() -> h
    boolean isBinary() -> i
    boolean getOmitNorms() -> m
    int getBinaryOffset() -> l
    int getBinaryLength() -> k
    byte[] getBinaryValue() -> j
    org.apache.lucene.index.FieldInfo$IndexOptions getIndexOptions() -> n
org.apache.lucene.document.NumericField -> a.a.a.b.ad:
    org.apache.lucene.analysis.NumericTokenStream numericTS -> r
    org.apache.lucene.document.NumericField$DataType type -> s
    int precisionStep -> t
    boolean $assertionsDisabled -> q
    org.apache.lucene.analysis.TokenStream tokenStreamValue() -> q
    byte[] getBinaryValue(byte[]) -> a
    java.io.Reader readerValue() -> p
    java.lang.String stringValue() -> o
    java.lang.Number getNumericValue() -> r
    org.apache.lucene.document.NumericField$DataType getDataType() -> s
    org.apache.lucene.document.NumericField setLongValue(long) -> a
    org.apache.lucene.document.NumericField setIntValue(int) -> a
    org.apache.lucene.document.NumericField setDoubleValue(double) -> a
    org.apache.lucene.document.NumericField setFloatValue(float) -> a
org.apache.lucene.document.NumericField$1 -> a.a.a.b.ae:
    int[] $SwitchMap$org$apache$lucene$document$NumericField$DataType -> a
org.apache.lucene.document.NumericField$DataType -> a.a.a.b.af:
    org.apache.lucene.document.NumericField$DataType INT -> a
    org.apache.lucene.document.NumericField$DataType LONG -> b
    org.apache.lucene.document.NumericField$DataType FLOAT -> c
    org.apache.lucene.document.NumericField$DataType DOUBLE -> d
    org.apache.lucene.document.NumericField$DataType[] $VALUES -> e
    org.apache.lucene.document.NumericField$DataType[] values() -> values
    org.apache.lucene.document.NumericField$DataType valueOf(java.lang.String) -> valueOf
org.apache.lucene.index.AbstractAllTermDocs -> a.a.a.c.a:
    int maxDoc -> a
    int doc -> b
    void seek(org.apache.lucene.index.Term) -> a
    void seek(org.apache.lucene.index.TermEnum) -> a
    int doc() -> a
    int freq() -> b
    boolean next() -> c
    int read(int[],int[]) -> a
    boolean skipTo(int) -> a
    void close() -> close
    boolean isDeleted(int) -> b
org.apache.lucene.index.AllTermDocs -> a.a.a.c.b:
    org.apache.lucene.util.BitVector deletedDocs -> c
    boolean isDeleted(int) -> b
org.apache.lucene.index.BufferedDeletes -> a.a.a.c.c:
    int BYTES_PER_DEL_TERM -> a
    int BYTES_PER_DEL_DOCID -> b
    int BYTES_PER_DEL_QUERY -> c
    java.util.concurrent.atomic.AtomicInteger numTermDeletes -> d
    java.util.Map terms -> e
    java.util.Map queries -> f
    java.util.List docIDs -> g
    java.lang.Integer MAX_INT -> h
    java.util.concurrent.atomic.AtomicLong bytesUsed -> i
    long gen -> j
    java.lang.String toString() -> toString
    void addDocID(int) -> a
    void addTerm(org.apache.lucene.index.Term,int) -> a
    void clear() -> a
    boolean any() -> b
org.apache.lucene.index.BufferedDeletesStream -> a.a.a.c.d:
    java.util.List deletes -> b
    long nextGen -> c
    org.apache.lucene.index.Term lastDeleteTerm -> d
    java.io.PrintStream infoStream -> e
    java.util.concurrent.atomic.AtomicLong bytesUsed -> f
    java.util.concurrent.atomic.AtomicInteger numTerms -> g
    int messageID -> h
    java.util.Comparator sortByDelGen -> i
    boolean $assertionsDisabled -> a
    void message(java.lang.String) -> a
    void setInfoStream(java.io.PrintStream) -> a
    void push(org.apache.lucene.index.FrozenBufferedDeletes) -> a
    void clear() -> a
    boolean any() -> b
    int numTerms() -> c
    long bytesUsed() -> d
    org.apache.lucene.index.BufferedDeletesStream$ApplyDeletesResult applyDeletes(org.apache.lucene.index.IndexWriter$ReaderPool,java.util.List) -> a
    long getNextGen() -> e
    void prune(org.apache.lucene.index.SegmentInfos) -> a
    void prune(int) -> a
    long applyTermDeletes(java.lang.Iterable,org.apache.lucene.index.SegmentReader) -> a
    long applyQueryDeletes(java.lang.Iterable,org.apache.lucene.index.SegmentReader) -> b
    boolean checkDeleteTerm(org.apache.lucene.index.Term) -> a
    boolean checkDeleteStats() -> f
org.apache.lucene.index.BufferedDeletesStream$1 -> a.a.a.c.e:
    int compare(org.apache.lucene.index.SegmentInfo,org.apache.lucene.index.SegmentInfo) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
org.apache.lucene.index.BufferedDeletesStream$ApplyDeletesResult -> a.a.a.c.f:
    boolean anyDeletes -> a
    long gen -> b
    java.util.List allDeleted -> c
org.apache.lucene.index.BufferedDeletesStream$QueryAndLimit -> a.a.a.c.g:
    org.apache.lucene.search.Query query -> a
    int limit -> b
org.apache.lucene.index.ByteBlockPool -> a.a.a.c.h:
    byte[][] buffers -> a
    int bufferUpto -> b
    int byteUpto -> c
    byte[] buffer -> d
    int byteOffset -> e
    org.apache.lucene.index.ByteBlockPool$Allocator allocator -> i
    int[] nextLevelArray -> f
    int[] levelSizeArray -> g
    int FIRST_LEVEL_SIZE -> h
    void reset() -> a
    void nextBuffer() -> b
    int newSlice(int) -> a
    int allocSlice(byte[],int) -> a
org.apache.lucene.index.ByteBlockPool$Allocator -> a.a.a.c.i:
    void recycleByteBlocks(byte[][],int,int) -> a
    byte[] getByteBlock() -> a
org.apache.lucene.index.ByteSliceReader -> a.a.a.c.j:
    org.apache.lucene.index.ByteBlockPool pool -> a
    int bufferUpto -> b
    byte[] buffer -> c
    int upto -> d
    int limit -> e
    int level -> f
    int bufferOffset -> g
    int endIndex -> h
    boolean $assertionsDisabled -> i
    void init(org.apache.lucene.index.ByteBlockPool,int,int) -> a
    boolean eof() -> a
    byte readByte() -> b
    long writeTo(org.apache.lucene.store.IndexOutput) -> a
    void nextSlice() -> c
    void readBytes(byte[],int,int) -> a
    long getFilePointer() -> d
    long length() -> e
    void seek(long) -> a
    void close() -> close
org.apache.lucene.index.CharBlockPool -> a.a.a.c.k:
    char[][] buffers -> a
    int bufferUpto -> b
    int charUpto -> c
    char[] buffer -> d
    int charOffset -> e
    org.apache.lucene.index.DocumentsWriter docWriter -> f
    void reset() -> a
    void nextBuffer() -> b
org.apache.lucene.index.CoalescedDeletes -> a.a.a.c.l:
    java.util.Map queries -> a
    java.util.List iterables -> b
    java.lang.String toString() -> toString
    void update(org.apache.lucene.index.FrozenBufferedDeletes) -> a
    java.lang.Iterable termsIterable() -> a
    java.lang.Iterable queriesIterable() -> b
    java.util.Iterator mergedIterator(java.util.List) -> a
org.apache.lucene.index.CoalescedDeletes$1 -> a.a.a.c.m:
    org.apache.lucene.index.CoalescedDeletes this$0 -> a
    java.util.Iterator iterator() -> iterator
org.apache.lucene.index.CoalescedDeletes$2 -> a.a.a.c.n:
    org.apache.lucene.index.CoalescedDeletes this$0 -> a
    java.util.Iterator iterator() -> iterator
org.apache.lucene.index.CoalescedDeletes$2$1 -> a.a.a.c.o:
    java.util.Iterator iter -> b
    org.apache.lucene.index.CoalescedDeletes$2 this$1 -> a
    boolean hasNext() -> hasNext
    org.apache.lucene.index.BufferedDeletesStream$QueryAndLimit next() -> a
    void remove() -> remove
    java.lang.Object next() -> next
org.apache.lucene.index.CoalescedDeletes$3 -> a.a.a.c.p:
    org.apache.lucene.index.Term current -> a
    org.apache.lucene.index.CoalescedDeletes$TermMergeQueue queue -> b
    org.apache.lucene.index.CoalescedDeletes$SubIterator[] top -> c
    int numTop -> d
    boolean $assertionsDisabled -> e
    java.util.List val$iterators -> f
    boolean hasNext() -> hasNext
    org.apache.lucene.index.Term next() -> a
    void remove() -> remove
    void pullTop() -> b
    void pushTop() -> c
    java.lang.Object next() -> next
org.apache.lucene.index.CoalescedDeletes$SubIterator -> a.a.a.c.q:
    java.util.Iterator iterator -> a
    org.apache.lucene.index.Term current -> b
    int index -> c
org.apache.lucene.index.CoalescedDeletes$TermMergeQueue -> a.a.a.c.r:
    boolean lessThan(org.apache.lucene.index.CoalescedDeletes$SubIterator,org.apache.lucene.index.CoalescedDeletes$SubIterator) -> a
    boolean lessThan(java.lang.Object,java.lang.Object) -> a
org.apache.lucene.index.CompoundFileReader -> a.a.a.c.s:
    int readBufferSize -> e
    org.apache.lucene.store.Directory directory -> f
    java.lang.String fileName -> g
    org.apache.lucene.store.IndexInput stream -> h
    java.util.HashMap entries -> i
    boolean $assertionsDisabled -> a
    void close() -> close
    org.apache.lucene.store.IndexInput openInput(java.lang.String) -> a
    org.apache.lucene.store.IndexInput openInput(java.lang.String,int) -> a
    java.lang.String[] listAll() -> a
    boolean fileExists(java.lang.String) -> b
    void deleteFile(java.lang.String) -> c
    long fileLength(java.lang.String) -> d
    org.apache.lucene.store.IndexOutput createOutput(java.lang.String) -> e
    org.apache.lucene.store.Lock makeLock(java.lang.String) -> f
org.apache.lucene.index.CompoundFileReader$1 -> a.a.a.c.t:
org.apache.lucene.index.CompoundFileReader$CSIndexInput -> a.a.a.c.u:
    org.apache.lucene.store.IndexInput base -> a
    long fileOffset -> b
    long length -> c
    java.lang.Object clone() -> clone
    void readInternal(byte[],int,int) -> b
    void seekInternal(long) -> b
    void close() -> close
    long length() -> e
org.apache.lucene.index.CompoundFileReader$FileEntry -> a.a.a.c.v:
    long offset -> a
    long length -> b
org.apache.lucene.index.CompoundFileWriter -> a.a.a.c.w:
    org.apache.lucene.store.Directory directory -> b
    java.lang.String fileName -> c
    java.util.HashSet ids -> d
    java.util.LinkedList entries -> e
    boolean merged -> f
    org.apache.lucene.index.SegmentMerger$CheckAbort checkAbort -> g
    boolean $assertionsDisabled -> a
    void addFile(java.lang.String) -> a
    void addFile(java.lang.String,org.apache.lucene.store.Directory) -> a
    void close() -> a
    void copyFile(org.apache.lucene.index.CompoundFileWriter$FileEntry,org.apache.lucene.store.IndexOutput) -> a
org.apache.lucene.index.CompoundFileWriter$1 -> a.a.a.c.x:
org.apache.lucene.index.CompoundFileWriter$FileEntry -> a.a.a.c.y:
    java.lang.String file -> a
    long directoryOffset -> b
    long dataOffset -> c
    org.apache.lucene.store.Directory dir -> d
org.apache.lucene.index.ConcurrentMergeScheduler -> a.a.a.c.z:
    int mergeThreadPriority -> h
    java.util.List mergeThreads -> a
    int maxThreadCount -> i
    int maxMergeCount -> j
    org.apache.lucene.store.Directory dir -> b
    boolean closed -> k
    org.apache.lucene.index.IndexWriter writer -> c
    int mergeThreadCount -> d
    java.util.Comparator compareByMergeDocCount -> e
    boolean anyExceptions -> f
    boolean suppressExceptions -> l
    java.util.List allInstances -> m
    boolean $assertionsDisabled -> g
    void updateMergeThreads() -> a
    boolean verbose() -> b
    void message(java.lang.String) -> a
    void initMergeThreadPriority() -> f
    void close() -> c
    void sync() -> d
    int mergeThreadCount() -> e
    void merge(org.apache.lucene.index.IndexWriter) -> a
    void doMerge(org.apache.lucene.index.MergePolicy$OneMerge) -> a
    org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread getMergeThread(org.apache.lucene.index.IndexWriter,org.apache.lucene.index.MergePolicy$OneMerge) -> a
    void handleMergeException(java.lang.Throwable) -> a
    void addMyself() -> g
    boolean access$000(org.apache.lucene.index.ConcurrentMergeScheduler) -> a
org.apache.lucene.index.ConcurrentMergeScheduler$1 -> a.a.a.c.aa:
    int compare(org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread,org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread -> a.a.a.c.ab:
    org.apache.lucene.index.IndexWriter tWriter -> a
    org.apache.lucene.index.MergePolicy$OneMerge startMerge -> b
    org.apache.lucene.index.MergePolicy$OneMerge runningMerge -> c
    boolean done -> e
    org.apache.lucene.index.ConcurrentMergeScheduler this$0 -> d
    void setRunningMerge(org.apache.lucene.index.MergePolicy$OneMerge) -> a
    org.apache.lucene.index.MergePolicy$OneMerge getCurrentMerge() -> a
    void setThreadPriority(int) -> a
    void run() -> run
org.apache.lucene.index.CorruptIndexException -> a.a.a.c.ac:
org.apache.lucene.index.DefaultSkipListReader -> a.a.a.c.ad:
    boolean currentFieldStoresPayloads -> a
    long[] freqPointer -> b
    long[] proxPointer -> c
    int[] payloadLength -> d
    long lastFreqPointer -> e
    long lastProxPointer -> f
    int lastPayloadLength -> g
    void init(long,long,long,int,boolean) -> a
    long getFreqPointer() -> a
    long getProxPointer() -> b
    int getPayloadLength() -> c
    void seekChild(int) -> a
    void setLastSkipData(int) -> b
    int readSkipData(int,org.apache.lucene.store.IndexInput) -> a
org.apache.lucene.index.DefaultSkipListWriter -> a.a.a.c.ae:
    int[] lastSkipDoc -> a
    int[] lastSkipPayloadLength -> b
    long[] lastSkipFreqPointer -> c
    long[] lastSkipProxPointer -> d
    org.apache.lucene.store.IndexOutput freqOutput -> e
    org.apache.lucene.store.IndexOutput proxOutput -> f
    int curDoc -> g
    boolean curStorePayloads -> h
    int curPayloadLength -> i
    long curFreqPointer -> j
    long curProxPointer -> k
    void setFreqOutput(org.apache.lucene.store.IndexOutput) -> a
    void setProxOutput(org.apache.lucene.store.IndexOutput) -> b
    void setSkipData(int,boolean,int) -> a
    void resetSkip() -> a
    void writeSkipData(int,org.apache.lucene.store.IndexOutput) -> a
org.apache.lucene.index.DirectoryReader -> a.a.a.c.af:
    org.apache.lucene.store.Directory directory -> a
    boolean readOnly -> b
    org.apache.lucene.index.IndexWriter writer -> c
    org.apache.lucene.index.IndexDeletionPolicy deletionPolicy -> h
    org.apache.lucene.store.Lock writeLock -> i
    org.apache.lucene.index.SegmentInfos segmentInfos -> j
    boolean stale -> k
    int termInfosIndexDivisor -> l
    boolean rollbackHasChanges -> m
    org.apache.lucene.index.SegmentReader[] subReaders -> n
    int[] starts -> o
    java.util.Map normsCache -> p
    int maxDoc -> q
    int numDocs -> r
    boolean hasDeletions -> s
    long maxIndexVersion -> t
    boolean applyAllDeletes -> u
    boolean $assertionsDisabled -> d
    org.apache.lucene.index.IndexReader open(org.apache.lucene.store.Directory,org.apache.lucene.index.IndexDeletionPolicy,org.apache.lucene.index.IndexCommit,boolean,int) -> a
    java.lang.String toString() -> toString
    org.apache.lucene.index.FieldInfos getFieldInfos() -> a
    void initialize(org.apache.lucene.index.SegmentReader[]) -> a
    java.lang.Object clone() -> clone
    org.apache.lucene.index.IndexReader clone(boolean) -> a
    org.apache.lucene.index.DirectoryReader doOpenIfChanged(org.apache.lucene.index.SegmentInfos,boolean,boolean) -> a
    org.apache.lucene.index.TermFreqVector[] getTermFreqVectors(int) -> a
    int numDocs() -> b
    int maxDoc() -> c
    org.apache.lucene.document.Document document(int,org.apache.lucene.document.FieldSelector) -> a
    boolean isDeleted(int) -> b
    boolean hasDeletions() -> d
    void doDelete(int) -> c
    int readerIndex(int) -> f
    int readerIndex(int,int[],int) -> a
    boolean hasNorms(java.lang.String) -> a
    byte[] norms(java.lang.String) -> b
    void norms(java.lang.String,byte[],int) -> a
    org.apache.lucene.index.TermEnum terms() -> e
    org.apache.lucene.index.TermEnum terms(org.apache.lucene.index.Term) -> a
    int docFreq(org.apache.lucene.index.Term) -> b
    org.apache.lucene.index.TermDocs termDocs() -> f
    org.apache.lucene.index.TermDocs termDocs(org.apache.lucene.index.Term) -> c
    org.apache.lucene.index.TermPositions termPositions() -> g
    void acquireWriteLock() -> h
    void doCommit(java.util.Map) -> a
    void startCommit() -> i
    void rollbackCommit() -> j
    void doClose() -> k
    org.apache.lucene.index.IndexReader[] getSequentialSubReaders() -> l
    org.apache.lucene.store.Directory directory() -> m
org.apache.lucene.index.DirectoryReader$1 -> a.a.a.c.ag:
    boolean val$readOnly -> a
    org.apache.lucene.index.IndexDeletionPolicy val$deletionPolicy -> b
    int val$termInfosIndexDivisor -> c
    java.lang.Object doBody(java.lang.String) -> a
org.apache.lucene.index.DirectoryReader$MultiTermDocs -> a.a.a.c.ah:
    org.apache.lucene.index.IndexReader topReader -> a
    org.apache.lucene.index.IndexReader[] readers -> b
    int[] starts -> c
    org.apache.lucene.index.Term term -> d
    int base -> e
    int pointer -> f
    org.apache.lucene.index.TermDocs[] readerTermDocs -> k
    org.apache.lucene.index.TermDocs current -> g
    org.apache.lucene.index.DirectoryReader$MultiTermEnum tenum -> l
    int matchingSegmentPos -> h
    org.apache.lucene.index.SegmentMergeInfo smi -> i
    boolean $assertionsDisabled -> j
    int doc() -> a
    int freq() -> b
    void seek(org.apache.lucene.index.Term) -> a
    void seek(org.apache.lucene.index.TermEnum) -> a
    boolean next() -> c
    int read(int[],int[]) -> a
    boolean skipTo(int) -> a
    org.apache.lucene.index.TermDocs termDocs(int) -> b
    org.apache.lucene.index.TermDocs termDocs(org.apache.lucene.index.IndexReader) -> a
    void close() -> close
org.apache.lucene.index.DirectoryReader$MultiTermEnum -> a.a.a.c.ai:
    org.apache.lucene.index.IndexReader topReader -> a
    org.apache.lucene.index.SegmentMergeQueue queue -> c
    org.apache.lucene.index.Term term -> d
    int docFreq -> e
    org.apache.lucene.index.SegmentMergeInfo[] matchingSegments -> b
    boolean next() -> a
    org.apache.lucene.index.Term term() -> b
    int docFreq() -> c
    void close() -> close
org.apache.lucene.index.DirectoryReader$MultiTermPositions -> a.a.a.c.aj:
    org.apache.lucene.index.TermDocs termDocs(org.apache.lucene.index.IndexReader) -> a
    int nextPosition() -> d
    int getPayloadLength() -> e
    byte[] getPayload(byte[],int) -> a
org.apache.lucene.index.DocConsumer -> a.a.a.c.ak:
    org.apache.lucene.index.DocConsumerPerThread addThread(org.apache.lucene.index.DocumentsWriterThreadState) -> a
    void flush(java.util.Collection,org.apache.lucene.index.SegmentWriteState) -> a
    void abort() -> a
    boolean freeRAM() -> b
org.apache.lucene.index.DocConsumerPerThread -> a.a.a.c.al:
    org.apache.lucene.index.DocumentsWriter$DocWriter processDocument() -> a
    void abort() -> b
org.apache.lucene.index.DocFieldConsumer -> a.a.a.c.am:
    org.apache.lucene.index.FieldInfos fieldInfos -> a
    void flush(java.util.Map,org.apache.lucene.index.SegmentWriteState) -> a
    void abort() -> a
    org.apache.lucene.index.DocFieldConsumerPerThread addThread(org.apache.lucene.index.DocFieldProcessorPerThread) -> a
    boolean freeRAM() -> b
    void setFieldInfos(org.apache.lucene.index.FieldInfos) -> a
org.apache.lucene.index.DocFieldConsumerPerField -> a.a.a.c.an:
    void processFields(org.apache.lucene.document.Fieldable[],int) -> a
    void abort() -> a
    void close() -> b
org.apache.lucene.index.DocFieldConsumerPerThread -> a.a.a.c.ao:
    void startDocument() -> a
    org.apache.lucene.index.DocumentsWriter$DocWriter finishDocument() -> b
    org.apache.lucene.index.DocFieldConsumerPerField addField(org.apache.lucene.index.FieldInfo) -> a
    void abort() -> c
org.apache.lucene.index.DocFieldProcessor -> a.a.a.c.ap:
    org.apache.lucene.index.DocumentsWriter docWriter -> a
    org.apache.lucene.index.FieldInfos fieldInfos -> b
    org.apache.lucene.index.DocFieldConsumer consumer -> c
    org.apache.lucene.index.StoredFieldsWriter fieldsWriter -> d
    void flush(java.util.Collection,org.apache.lucene.index.SegmentWriteState) -> a
    void abort() -> a
    boolean freeRAM() -> b
    org.apache.lucene.index.DocConsumerPerThread addThread(org.apache.lucene.index.DocumentsWriterThreadState) -> a
org.apache.lucene.index.DocFieldProcessorPerField -> a.a.a.c.aq:
    org.apache.lucene.index.DocFieldConsumerPerField consumer -> a
    org.apache.lucene.index.FieldInfo fieldInfo -> b
    org.apache.lucene.index.DocFieldProcessorPerField next -> c
    int lastGen -> d
    int fieldCount -> e
    org.apache.lucene.document.Fieldable[] fields -> f
    void abort() -> a
org.apache.lucene.index.DocFieldProcessorPerThread -> a.a.a.c.ar:
    int fieldGen -> a
    org.apache.lucene.index.DocFieldProcessor docFieldProcessor -> b
    org.apache.lucene.index.FieldInfos fieldInfos -> c
    org.apache.lucene.index.DocFieldConsumerPerThread consumer -> d
    org.apache.lucene.index.DocFieldProcessorPerField[] fields -> e
    int fieldCount -> f
    org.apache.lucene.index.DocFieldProcessorPerField[] fieldHash -> g
    int hashMask -> h
    int totalFieldCount -> i
    org.apache.lucene.index.StoredFieldsWriterPerThread fieldsWriter -> j
    org.apache.lucene.index.DocumentsWriter$DocState docState -> k
    java.util.Comparator fieldsComp -> p
    org.apache.lucene.index.DocFieldProcessorPerThread$PerDoc[] docFreeList -> l
    int freeCount -> m
    int allocCount -> n
    boolean $assertionsDisabled -> o
    void abort() -> b
    java.util.Collection fields() -> c
    void trimFields(org.apache.lucene.index.SegmentWriteState) -> a
    void rehash() -> e
    org.apache.lucene.index.DocumentsWriter$DocWriter processDocument() -> a
    org.apache.lucene.index.DocFieldProcessorPerThread$PerDoc getPerDoc() -> d
    void freePerDoc(org.apache.lucene.index.DocFieldProcessorPerThread$PerDoc) -> a
org.apache.lucene.index.DocFieldProcessorPerThread$1 -> a.a.a.c.as:
    int compare(org.apache.lucene.index.DocFieldProcessorPerField,org.apache.lucene.index.DocFieldProcessorPerField) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
org.apache.lucene.index.DocFieldProcessorPerThread$PerDoc -> a.a.a.c.at:
    org.apache.lucene.index.DocumentsWriter$DocWriter one -> a
    org.apache.lucene.index.DocumentsWriter$DocWriter two -> b
    org.apache.lucene.index.DocFieldProcessorPerThread this$0 -> c
    long sizeInBytes() -> a
    void finish() -> b
    void abort() -> c
org.apache.lucene.index.DocInverter -> a.a.a.c.au:
    org.apache.lucene.index.InvertedDocConsumer consumer -> b
    org.apache.lucene.index.InvertedDocEndConsumer endConsumer -> c
    void setFieldInfos(org.apache.lucene.index.FieldInfos) -> a
    void flush(java.util.Map,org.apache.lucene.index.SegmentWriteState) -> a
    void abort() -> a
    boolean freeRAM() -> b
    org.apache.lucene.index.DocFieldConsumerPerThread addThread(org.apache.lucene.index.DocFieldProcessorPerThread) -> a
org.apache.lucene.index.DocInverterPerField -> a.a.a.c.av:
    org.apache.lucene.index.DocInverterPerThread perThread -> e
    org.apache.lucene.index.FieldInfo fieldInfo -> f
    org.apache.lucene.index.InvertedDocConsumerPerField consumer -> a
    org.apache.lucene.index.InvertedDocEndConsumerPerField endConsumer -> b
    org.apache.lucene.index.DocumentsWriter$DocState docState -> c
    org.apache.lucene.index.FieldInvertState fieldState -> d
    void abort() -> a
    void close() -> b
    void processFields(org.apache.lucene.document.Fieldable[],int) -> a
org.apache.lucene.index.DocInverterPerThread -> a.a.a.c.aw:
    org.apache.lucene.index.DocInverter docInverter -> a
    org.apache.lucene.index.InvertedDocConsumerPerThread consumer -> b
    org.apache.lucene.index.InvertedDocEndConsumerPerThread endConsumer -> c
    org.apache.lucene.index.DocInverterPerThread$SingleTokenAttributeSource singleToken -> d
    org.apache.lucene.index.DocumentsWriter$DocState docState -> e
    org.apache.lucene.index.FieldInvertState fieldState -> f
    org.apache.lucene.index.ReusableStringReader stringReader -> g
    void startDocument() -> a
    org.apache.lucene.index.DocumentsWriter$DocWriter finishDocument() -> b
    void abort() -> c
    org.apache.lucene.index.DocFieldConsumerPerField addField(org.apache.lucene.index.FieldInfo) -> a
org.apache.lucene.index.DocInverterPerThread$1 -> a.a.a.c.ax:
org.apache.lucene.index.DocInverterPerThread$SingleTokenAttributeSource -> a.a.a.c.ay:
    org.apache.lucene.analysis.tokenattributes.CharTermAttribute termAttribute -> a
    org.apache.lucene.analysis.tokenattributes.OffsetAttribute offsetAttribute -> b
    void reinit(java.lang.String,int,int) -> a
org.apache.lucene.index.DocumentsWriter -> a.a.a.c.az:
    java.util.concurrent.atomic.AtomicLong bytesUsed -> a
    org.apache.lucene.index.IndexWriter writer -> b
    org.apache.lucene.store.Directory directory -> c
    java.lang.String segment -> d
    int nextDocID -> q
    int numDocs -> r
    org.apache.lucene.index.DocumentsWriterThreadState[] threadStates -> s
    java.util.HashMap threadBindings -> t
    boolean bufferIsFull -> e
    boolean aborting -> u
    java.io.PrintStream infoStream -> f
    int maxFieldLength -> g
    org.apache.lucene.search.Similarity similarity -> h
    int maxThreadStates -> v
    org.apache.lucene.index.BufferedDeletes pendingDeletes -> w
    org.apache.lucene.index.DocumentsWriter$IndexingChain defaultIndexingChain -> i
    org.apache.lucene.index.DocConsumer consumer -> j
    org.apache.lucene.index.IndexWriterConfig config -> x
    boolean closed -> y
    org.apache.lucene.index.FieldInfos fieldInfos -> z
    org.apache.lucene.index.BufferedDeletesStream bufferedDeletesStream -> A
    org.apache.lucene.index.IndexWriter$FlushControl flushControl -> B
    org.apache.lucene.index.DocumentsWriter$SkipDocWriter skipDocWriter -> k
    java.text.NumberFormat nf -> l
    java.util.List freeIntBlocks -> C
    org.apache.lucene.index.DocumentsWriter$ByteBlockAllocator byteBlockAllocator -> m
    org.apache.lucene.index.DocumentsWriter$ByteBlockAllocator perDocAllocator -> n
    java.util.ArrayList freeCharBlocks -> D
    org.apache.lucene.index.DocumentsWriter$WaitQueue waitQueue -> o
    boolean $assertionsDisabled -> p
    org.apache.lucene.index.DocumentsWriter$PerDocBuffer newPerDocBuffer() -> a
    void deleteDocID(int) -> a
    org.apache.lucene.index.FieldInfos getFieldInfos() -> b
    void setInfoStream(java.io.PrintStream) -> a
    void setMaxFieldLength(int) -> b
    java.lang.String getSegment() -> c
    void message(java.lang.String) -> a
    void setAborting() -> d
    void abort() -> e
    void doAfterFlush() -> m
    boolean allThreadsIdle() -> n
    void pushDeletes(org.apache.lucene.index.SegmentInfo,org.apache.lucene.index.SegmentInfos) -> a
    org.apache.lucene.index.SegmentInfo flush(org.apache.lucene.index.IndexWriter,org.apache.lucene.index.IndexFileDeleter,org.apache.lucene.index.MergePolicy,org.apache.lucene.index.SegmentInfos) -> a
    void close() -> f
    org.apache.lucene.index.DocumentsWriterThreadState getThreadState(org.apache.lucene.index.Term,int) -> a
    boolean updateDocument(org.apache.lucene.document.Document,org.apache.lucene.analysis.Analyzer,org.apache.lucene.index.Term) -> a
    void waitIdle() -> g
    void waitReady(org.apache.lucene.index.DocumentsWriterThreadState) -> a
    void finishDocument(org.apache.lucene.index.DocumentsWriterThreadState,org.apache.lucene.index.DocumentsWriter$DocWriter) -> a
    void waitForWaitQueue() -> h
    int[] getIntBlock() -> i
    void bytesUsed(long) -> a
    long bytesUsed() -> j
    void recycleIntBlocks(int[][],int,int) -> a
    char[] getCharBlock() -> k
    void recycleCharBlocks(char[][],int) -> a
    java.lang.String toMB(long) -> b
    void balanceRAM() -> l
    org.apache.lucene.index.IndexWriterConfig access$100(org.apache.lucene.index.DocumentsWriter) -> a
org.apache.lucene.index.DocumentsWriter$1 -> a.a.a.c.ba:
    org.apache.lucene.index.DocConsumer getChain(org.apache.lucene.index.DocumentsWriter) -> a
org.apache.lucene.index.DocumentsWriter$ByteBlockAllocator -> a.a.a.c.bb:
    int blockSize -> a
    java.util.ArrayList freeByteBlocks -> b
    org.apache.lucene.index.DocumentsWriter this$0 -> c
    byte[] getByteBlock() -> a
    void recycleByteBlocks(byte[][],int,int) -> a
    void recycleByteBlocks(java.util.List) -> a
org.apache.lucene.index.DocumentsWriter$DocState -> a.a.a.c.bc:
    org.apache.lucene.index.DocumentsWriter docWriter -> a
    org.apache.lucene.analysis.Analyzer analyzer -> b
    int maxFieldLength -> c
    java.io.PrintStream infoStream -> d
    org.apache.lucene.search.Similarity similarity -> e
    int docID -> f
    org.apache.lucene.document.Document doc -> g
    java.lang.String maxTermPrefix -> h
    boolean testPoint(java.lang.String) -> a
    void clear() -> a
org.apache.lucene.index.DocumentsWriter$DocWriter -> a.a.a.c.bd:
    org.apache.lucene.index.DocumentsWriter$DocWriter next -> d
    int docID -> e
    void finish() -> b
    void abort() -> c
    long sizeInBytes() -> a
    void setNext(org.apache.lucene.index.DocumentsWriter$DocWriter) -> a
org.apache.lucene.index.DocumentsWriter$IndexingChain -> a.a.a.c.be:
    org.apache.lucene.index.DocConsumer getChain(org.apache.lucene.index.DocumentsWriter) -> a
org.apache.lucene.index.DocumentsWriter$PerDocBuffer -> a.a.a.c.bf:
    boolean $assertionsDisabled -> a
    org.apache.lucene.index.DocumentsWriter this$0 -> b
    byte[] newBuffer(int) -> a
    void recycle() -> a
org.apache.lucene.index.DocumentsWriter$SkipDocWriter -> a.a.a.c.bg:
    void finish() -> b
    void abort() -> c
    long sizeInBytes() -> a
org.apache.lucene.index.DocumentsWriter$WaitQueue -> a.a.a.c.bh:
    org.apache.lucene.index.DocumentsWriter$DocWriter[] waiting -> a
    int nextWriteDocID -> b
    int nextWriteLoc -> c
    int numWaiting -> d
    long waitingBytes -> e
    boolean $assertionsDisabled -> f
    org.apache.lucene.index.DocumentsWriter this$0 -> g
    void reset() -> a
    boolean doResume() -> b
    boolean doPause() -> c
    void abort() -> d
    void writeDocument(org.apache.lucene.index.DocumentsWriter$DocWriter) -> b
    boolean add(org.apache.lucene.index.DocumentsWriter$DocWriter) -> a
org.apache.lucene.index.DocumentsWriterThreadState -> a.a.a.c.bi:
    boolean isIdle -> a
    int numThreads -> b
    org.apache.lucene.index.DocConsumerPerThread consumer -> c
    org.apache.lucene.index.DocumentsWriter$DocState docState -> d
    org.apache.lucene.index.DocumentsWriter docWriter -> e
    void doAfterFlush() -> a
org.apache.lucene.index.FieldInfo -> a.a.a.c.bj:
    java.lang.String name -> a
    int number -> b
    boolean isIndexed -> c
    boolean storeTermVector -> d
    boolean omitNorms -> e
    org.apache.lucene.index.FieldInfo$IndexOptions indexOptions -> f
    boolean storePayloads -> g
    boolean $assertionsDisabled -> h
    java.lang.Object clone() -> clone
    void update(boolean,boolean,boolean,boolean,org.apache.lucene.index.FieldInfo$IndexOptions) -> a
org.apache.lucene.index.FieldInfo$IndexOptions -> a.a.a.c.bk:
    org.apache.lucene.index.FieldInfo$IndexOptions DOCS_ONLY -> a
    org.apache.lucene.index.FieldInfo$IndexOptions DOCS_AND_FREQS -> b
    org.apache.lucene.index.FieldInfo$IndexOptions DOCS_AND_FREQS_AND_POSITIONS -> c
    org.apache.lucene.index.FieldInfo$IndexOptions[] $VALUES -> d
    org.apache.lucene.index.FieldInfo$IndexOptions[] values() -> values
    org.apache.lucene.index.FieldInfo$IndexOptions valueOf(java.lang.String) -> valueOf
org.apache.lucene.index.FieldInfos -> a.a.a.c.bl:
    java.util.ArrayList byNumber -> b
    java.util.HashMap byName -> c
    int format -> d
    boolean $assertionsDisabled -> a
    void add(org.apache.lucene.index.FieldInfos) -> a
    java.lang.Object clone() -> clone
    boolean hasProx() -> a
    org.apache.lucene.index.FieldInfo add(java.lang.String,boolean,boolean,boolean,boolean,org.apache.lucene.index.FieldInfo$IndexOptions) -> a
    org.apache.lucene.index.FieldInfo add(org.apache.lucene.index.FieldInfo) -> a
    org.apache.lucene.index.FieldInfo addInternal(java.lang.String,boolean,boolean,boolean,boolean,org.apache.lucene.index.FieldInfo$IndexOptions) -> b
    int fieldNumber(java.lang.String) -> a
    org.apache.lucene.index.FieldInfo fieldInfo(java.lang.String) -> b
    java.lang.String fieldName(int) -> a
    org.apache.lucene.index.FieldInfo fieldInfo(int) -> b
    java.util.Iterator iterator() -> iterator
    int size() -> b
    boolean hasVectors() -> c
    void write(org.apache.lucene.store.Directory,java.lang.String) -> a
    void write(org.apache.lucene.store.IndexOutput) -> a
    void read(org.apache.lucene.store.IndexInput,java.lang.String) -> a
org.apache.lucene.index.FieldInvertState -> a.a.a.c.bm:
    int position -> a
    int length -> b
    int numOverlap -> c
    int offset -> d
    int maxTermFrequency -> e
    int uniqueTermCount -> f
    float boost -> g
    org.apache.lucene.util.AttributeSource attributeSource -> h
    void reset(float) -> a
    int getLength() -> a
    int getNumOverlap() -> b
    float getBoost() -> c
org.apache.lucene.index.FieldReaderException -> a.a.a.c.bn:
org.apache.lucene.index.FieldsReader -> a.a.a.c.bo:
    org.apache.lucene.index.FieldInfos fieldInfos -> b
    org.apache.lucene.store.IndexInput cloneableFieldsStream -> c
    org.apache.lucene.store.IndexInput fieldsStream -> d
    org.apache.lucene.store.IndexInput cloneableIndexStream -> e
    org.apache.lucene.store.IndexInput indexStream -> f
    int numTotalDocs -> g
    int size -> h
    boolean closed -> i
    int format -> j
    int formatSize -> k
    int docStoreOffset -> l
    org.apache.lucene.util.CloseableThreadLocal fieldsStreamTL -> m
    boolean isOriginal -> n
    boolean $assertionsDisabled -> a
    java.lang.Object clone() -> clone
    java.lang.String detectCodeVersion(org.apache.lucene.store.Directory,java.lang.String) -> a
    void ensureOpen() -> c
    void close() -> close
    int size() -> a
    void seekIndex(int) -> a
    boolean canReadRawDocs() -> b
    org.apache.lucene.document.Document doc(int,org.apache.lucene.document.FieldSelector) -> a
    org.apache.lucene.store.IndexInput rawDocs(int[],int,int) -> a
    void skipField(boolean,boolean,int) -> a
    void skipFieldBytes(boolean,boolean,int) -> b
    org.apache.lucene.document.NumericField loadNumericField(org.apache.lucene.index.FieldInfo,int) -> a
    void addFieldLazy(org.apache.lucene.document.Document,org.apache.lucene.index.FieldInfo,boolean,boolean,boolean,boolean,int) -> a
    void addField(org.apache.lucene.document.Document,org.apache.lucene.index.FieldInfo,boolean,boolean,boolean,int) -> a
    int addFieldSize(org.apache.lucene.document.Document,org.apache.lucene.index.FieldInfo,boolean,boolean,int) -> a
    byte[] uncompress(byte[]) -> a
    org.apache.lucene.util.CloseableThreadLocal access$000(org.apache.lucene.index.FieldsReader) -> a
    org.apache.lucene.store.IndexInput access$100(org.apache.lucene.index.FieldsReader) -> b
    void access$200(org.apache.lucene.index.FieldsReader) -> c
    byte[] access$300(org.apache.lucene.index.FieldsReader,byte[]) -> a
    int access$400(org.apache.lucene.index.FieldsReader) -> d
org.apache.lucene.index.FieldsReader$1 -> a.a.a.c.bp:
    int[] $SwitchMap$org$apache$lucene$document$FieldSelectorResult -> a
org.apache.lucene.index.FieldsReader$LazyField -> a.a.a.c.bq:
    int toRead -> r
    long pointer -> s
    boolean isCompressed -> t
    boolean cacheResult -> u
    org.apache.lucene.index.FieldsReader this$0 -> q
    org.apache.lucene.store.IndexInput getFieldStream() -> r
    java.io.Reader readerValue() -> p
    org.apache.lucene.analysis.TokenStream tokenStreamValue() -> q
    java.lang.String stringValue() -> o
    byte[] getBinaryValue(byte[]) -> a
org.apache.lucene.index.FieldsWriter -> a.a.a.c.br:
    org.apache.lucene.index.FieldInfos fieldInfos -> b
    org.apache.lucene.store.Directory directory -> c
    java.lang.String segment -> d
    org.apache.lucene.store.IndexOutput fieldsStream -> e
    org.apache.lucene.store.IndexOutput indexStream -> f
    boolean $assertionsDisabled -> a
    void setFieldsStream(org.apache.lucene.store.IndexOutput) -> a
    void flushDocument(int,org.apache.lucene.store.RAMOutputStream) -> a
    void skipDocument() -> a
    void finish(int) -> a
    void close() -> b
    void abort() -> c
    void writeField(org.apache.lucene.index.FieldInfo,org.apache.lucene.document.Fieldable) -> a
    void addRawDocuments(org.apache.lucene.store.IndexInput,int[],int) -> a
    void addDocument(org.apache.lucene.document.Document) -> a
org.apache.lucene.index.FieldsWriter$1 -> a.a.a.c.bs:
    int[] $SwitchMap$org$apache$lucene$document$NumericField$DataType -> a
org.apache.lucene.index.FormatPostingsDocsConsumer -> a.a.a.c.bt:
    org.apache.lucene.index.FormatPostingsPositionsConsumer addDoc(int,int) -> a
    void finish() -> a
org.apache.lucene.index.FormatPostingsDocsWriter -> a.a.a.c.bu:
    org.apache.lucene.store.IndexOutput out -> a
    org.apache.lucene.index.FormatPostingsTermsWriter parent -> b
    org.apache.lucene.index.FormatPostingsPositionsWriter posWriter -> c
    org.apache.lucene.index.DefaultSkipListWriter skipListWriter -> d
    int skipInterval -> e
    int totalNumDocs -> f
    boolean omitTermFreqAndPositions -> g
    boolean storePayloads -> h
    org.apache.lucene.index.FieldInfo fieldInfo -> i
    int lastDocID -> j
    int df -> k
    org.apache.lucene.index.TermInfo termInfo -> n
    org.apache.lucene.util.UnicodeUtil$UTF8Result utf8 -> l
    boolean $assertionsDisabled -> m
    void setField(org.apache.lucene.index.FieldInfo) -> a
    org.apache.lucene.index.FormatPostingsPositionsConsumer addDoc(int,int) -> a
    void finish() -> a
    void close() -> close
org.apache.lucene.index.FormatPostingsFieldsConsumer -> a.a.a.c.bv:
    org.apache.lucene.index.FormatPostingsTermsConsumer addField(org.apache.lucene.index.FieldInfo) -> a
    void finish() -> a
org.apache.lucene.index.FormatPostingsFieldsWriter -> a.a.a.c.bw:
    org.apache.lucene.store.Directory dir -> a
    java.lang.String segment -> b
    org.apache.lucene.index.TermInfosWriter termsOut -> c
    org.apache.lucene.index.FieldInfos fieldInfos -> d
    org.apache.lucene.index.FormatPostingsTermsWriter termsWriter -> e
    org.apache.lucene.index.DefaultSkipListWriter skipListWriter -> f
    int totalNumDocs -> g
    org.apache.lucene.index.FormatPostingsTermsConsumer addField(org.apache.lucene.index.FieldInfo) -> a
    void finish() -> a
org.apache.lucene.index.FormatPostingsPositionsConsumer -> a.a.a.c.bx:
    void addPosition(int,byte[],int,int) -> a
    void finish() -> a
org.apache.lucene.index.FormatPostingsPositionsWriter -> a.a.a.c.by:
    org.apache.lucene.index.FormatPostingsDocsWriter parent -> a
    org.apache.lucene.store.IndexOutput out -> b
    boolean omitTermFreqAndPositions -> c
    boolean storePayloads -> d
    int lastPayloadLength -> e
    int lastPosition -> f
    boolean $assertionsDisabled -> g
    void addPosition(int,byte[],int,int) -> a
    void setField(org.apache.lucene.index.FieldInfo) -> a
    void finish() -> a
    void close() -> close
org.apache.lucene.index.FormatPostingsTermsConsumer -> a.a.a.c.bz:
    char[] termBuffer -> a
    org.apache.lucene.index.FormatPostingsDocsConsumer addTerm(char[],int) -> a
    org.apache.lucene.index.FormatPostingsDocsConsumer addTerm(java.lang.String) -> a
    void finish() -> a
org.apache.lucene.index.FormatPostingsTermsWriter -> a.a.a.c.ca:
    org.apache.lucene.index.FormatPostingsFieldsWriter parent -> b
    org.apache.lucene.index.FormatPostingsDocsWriter docsWriter -> c
    org.apache.lucene.index.TermInfosWriter termsOut -> d
    org.apache.lucene.index.FieldInfo fieldInfo -> e
    char[] currentTerm -> f
    int currentTermStart -> g
    long freqStart -> h
    long proxStart -> i
    void setField(org.apache.lucene.index.FieldInfo) -> a
    org.apache.lucene.index.FormatPostingsDocsConsumer addTerm(char[],int) -> a
    void finish() -> a
    void close() -> close
org.apache.lucene.index.FreqProxFieldMergeState -> a.a.a.c.cb:
    org.apache.lucene.index.FreqProxTermsWriterPerField field -> a
    int numPostings -> b
    org.apache.lucene.index.CharBlockPool charPool -> c
    int[] termIDs -> d
    org.apache.lucene.index.FreqProxTermsWriterPerField$FreqProxPostingsArray postings -> e
    int currentTermID -> f
    char[] text -> g
    int textOffset -> h
    int postingUpto -> n
    org.apache.lucene.index.ByteSliceReader freq -> i
    org.apache.lucene.index.ByteSliceReader prox -> j
    int docID -> k
    int termFreq -> l
    boolean $assertionsDisabled -> m
    boolean nextTerm() -> a
    java.lang.String termText() -> b
    boolean nextDoc() -> c
org.apache.lucene.index.FreqProxTermsWriter -> a.a.a.c.cc:
    byte[] payloadBuffer -> c
    org.apache.lucene.util.UnicodeUtil$UTF8Result termsUTF8 -> a
    boolean $assertionsDisabled -> b
    org.apache.lucene.index.TermsHashConsumerPerThread addThread(org.apache.lucene.index.TermsHashPerThread) -> a
    int compareText(char[],int,char[],int) -> a
    void abort() -> a
    void flush(java.util.Map,org.apache.lucene.index.SegmentWriteState) -> a
    void appendPostings(java.lang.String,org.apache.lucene.index.SegmentWriteState,org.apache.lucene.index.FreqProxTermsWriterPerField[],org.apache.lucene.index.FormatPostingsFieldsConsumer) -> a
org.apache.lucene.index.FreqProxTermsWriterPerField -> a.a.a.c.cd:
    org.apache.lucene.index.FreqProxTermsWriterPerThread perThread -> a
    org.apache.lucene.index.TermsHashPerField termsHashPerField -> b
    org.apache.lucene.index.FieldInfo fieldInfo -> c
    org.apache.lucene.index.DocumentsWriter$DocState docState -> d
    org.apache.lucene.index.FieldInvertState fieldState -> e
    org.apache.lucene.index.FieldInfo$IndexOptions indexOptions -> f
    org.apache.lucene.analysis.tokenattributes.PayloadAttribute payloadAttribute -> g
    boolean hasPayloads -> h
    boolean $assertionsDisabled -> i
    int getStreamCount() -> a
    void finish() -> b
    void skippingLongTerm() -> c
    int compareTo(org.apache.lucene.index.FreqProxTermsWriterPerField) -> a
    void reset() -> d
    boolean start(org.apache.lucene.document.Fieldable[],int) -> a
    void start(org.apache.lucene.document.Fieldable) -> a
    void writeProx(int,int) -> a
    void newTerm(int) -> a
    void addTerm(int) -> b
    org.apache.lucene.index.ParallelPostingsArray createPostingsArray(int) -> c
    int compareTo(java.lang.Object) -> compareTo
org.apache.lucene.index.FreqProxTermsWriterPerField$FreqProxPostingsArray -> a.a.a.c.ce:
    int[] docFreqs -> a
    int[] lastDocIDs -> b
    int[] lastDocCodes -> c
    int[] lastPositions -> d
    boolean $assertionsDisabled -> e
    org.apache.lucene.index.ParallelPostingsArray newInstance(int) -> a
    void copyTo(org.apache.lucene.index.ParallelPostingsArray,int) -> a
    int bytesPerPosting() -> a
org.apache.lucene.index.FreqProxTermsWriterPerThread -> a.a.a.c.cf:
    org.apache.lucene.index.TermsHashPerThread termsHashPerThread -> a
    org.apache.lucene.index.DocumentsWriter$DocState docState -> b
    org.apache.lucene.index.TermsHashConsumerPerField addField(org.apache.lucene.index.TermsHashPerField,org.apache.lucene.index.FieldInfo) -> a
    void startDocument() -> a
    org.apache.lucene.index.DocumentsWriter$DocWriter finishDocument() -> b
    void abort() -> c
org.apache.lucene.index.FrozenBufferedDeletes -> a.a.a.c.cg:
    int BYTES_PER_DEL_QUERY -> a
    org.apache.lucene.index.PrefixCodedTerms terms -> b
    int termCount -> c
    org.apache.lucene.search.Query[] queries -> d
    int[] queryLimits -> e
    int bytesUsed -> f
    int numTermDeletes -> g
    long gen -> h
    java.lang.Iterable termsIterable() -> a
    java.lang.Iterable queriesIterable() -> b
    java.lang.String toString() -> toString
    boolean any() -> c
org.apache.lucene.index.FrozenBufferedDeletes$1 -> a.a.a.c.ch:
    org.apache.lucene.index.FrozenBufferedDeletes this$0 -> a
    java.util.Iterator iterator() -> iterator
org.apache.lucene.index.FrozenBufferedDeletes$2 -> a.a.a.c.ci:
    org.apache.lucene.index.FrozenBufferedDeletes this$0 -> a
    java.util.Iterator iterator() -> iterator
org.apache.lucene.index.FrozenBufferedDeletes$2$1 -> a.a.a.c.cj:
    int upto -> b
    org.apache.lucene.index.FrozenBufferedDeletes$2 this$1 -> a
    boolean hasNext() -> hasNext
    org.apache.lucene.index.BufferedDeletesStream$QueryAndLimit next() -> a
    void remove() -> remove
    java.lang.Object next() -> next
org.apache.lucene.index.IndexCommit -> a.a.a.c.ck:
    java.lang.String getSegmentsFileName() -> a
    org.apache.lucene.store.Directory getDirectory() -> b
    void delete() -> c
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    long getVersion() -> d
    long getGeneration() -> e
    int compareTo(org.apache.lucene.index.IndexCommit) -> a
    int compareTo(java.lang.Object) -> compareTo
org.apache.lucene.index.IndexDeletionPolicy -> a.a.a.c.cl:
    void onInit(java.util.List) -> a
    void onCommit(java.util.List) -> b
org.apache.lucene.index.IndexFileDeleter -> a.a.a.c.cm:
    java.util.List deletable -> d
    java.util.Map refCounts -> e
    java.util.List commits -> f
    java.util.List lastFiles -> g
    java.util.List commitsToDelete -> h
    java.io.PrintStream infoStream -> i
    org.apache.lucene.store.Directory directory -> j
    org.apache.lucene.index.IndexDeletionPolicy policy -> k
    boolean startingCommitDeleted -> a
    org.apache.lucene.index.SegmentInfos lastSegmentInfos -> l
    boolean VERBOSE_REF_COUNTS -> b
    org.apache.lucene.index.IndexWriter writer -> m
    boolean $assertionsDisabled -> c
    void message(java.lang.String) -> f
    boolean locked() -> e
    org.apache.lucene.index.SegmentInfos getLastSegmentInfos() -> a
    void deleteCommits() -> f
    void refresh(java.lang.String) -> a
    void refresh() -> b
    void close() -> c
    void deletePendingFiles() -> d
    void checkpoint(org.apache.lucene.index.SegmentInfos,boolean) -> a
    void incRef(org.apache.lucene.index.SegmentInfos,boolean) -> b
    void incRef(java.util.Collection) -> a
    void incRef(java.lang.String) -> b
    void decRef(java.util.Collection) -> b
    void decRef(java.lang.String) -> c
    void decRef(org.apache.lucene.index.SegmentInfos) -> a
    boolean exists(java.lang.String) -> d
    org.apache.lucene.index.IndexFileDeleter$RefCount getRefCount(java.lang.String) -> g
    void deleteNewFiles(java.util.Collection) -> c
    void deleteFile(java.lang.String) -> e
org.apache.lucene.index.IndexFileDeleter$CommitPoint -> a.a.a.c.cn:
    java.util.Collection files -> a
    java.lang.String segmentsFileName -> b
    boolean deleted -> c
    org.apache.lucene.store.Directory directory -> d
    java.util.Collection commitsToDelete -> e
    long version -> f
    long generation -> g
    java.util.Map userData -> h
    int segmentCount -> i
    java.lang.String toString() -> toString
    java.lang.String getSegmentsFileName() -> a
    org.apache.lucene.store.Directory getDirectory() -> b
    long getVersion() -> d
    long getGeneration() -> e
    void delete() -> c
    boolean isDeleted() -> f
org.apache.lucene.index.IndexFileDeleter$RefCount -> a.a.a.c.co:
    java.lang.String fileName -> a
    boolean initDone -> b
    int count -> c
    boolean $assertionsDisabled -> d
    int IncRef() -> a
    int DecRef() -> b
org.apache.lucene.index.IndexFileNameFilter -> a.a.a.c.cp:
    org.apache.lucene.index.IndexFileNameFilter singleton -> a
    java.util.HashSet extensions -> b
    java.util.HashSet extensionsInCFS -> c
    boolean accept(java.io.File,java.lang.String) -> accept
    org.apache.lucene.index.IndexFileNameFilter getFilter() -> a
org.apache.lucene.index.IndexFileNames -> a.a.a.c.cq:
    java.lang.String[] INDEX_EXTENSIONS -> a
    java.lang.String[] INDEX_EXTENSIONS_IN_COMPOUND_FILE -> b
    java.lang.String[] STORE_INDEX_EXTENSIONS -> c
    java.lang.String[] NON_STORE_INDEX_EXTENSIONS -> d
    java.lang.String[] COMPOUND_EXTENSIONS -> e
    java.lang.String[] VECTOR_EXTENSIONS -> f
    java.lang.String fileNameFromGeneration(java.lang.String,java.lang.String,long) -> a
    boolean isDocStoreFile(java.lang.String) -> a
    java.lang.String segmentFileName(java.lang.String,java.lang.String) -> a
    boolean matchesExtension(java.lang.String,java.lang.String) -> b
    java.lang.String stripSegmentName(java.lang.String) -> b
    boolean isSeparateNormsFile(java.lang.String) -> c
org.apache.lucene.index.IndexFormatTooNewException -> a.a.a.c.cr:
    boolean $assertionsDisabled -> a
org.apache.lucene.index.IndexFormatTooOldException -> a.a.a.c.cs:
    boolean $assertionsDisabled -> a
org.apache.lucene.index.IndexNotFoundException -> a.a.a.c.ct:
org.apache.lucene.index.IndexReader -> a.a.a.c.cu:
    java.util.Set readerClosedListeners -> a
    boolean closed -> b
    boolean hasChanges -> e
    java.util.concurrent.atomic.AtomicInteger refCount -> c
    int DEFAULT_TERMS_INDEX_DIVISOR -> f
    org.apache.lucene.util.VirtualMethod reopenMethod1 -> d
    org.apache.lucene.util.VirtualMethod doOpenIfChangedMethod1 -> h
    boolean hasNewReopenAPI1 -> i
    org.apache.lucene.util.VirtualMethod reopenMethod2 -> j
    org.apache.lucene.util.VirtualMethod doOpenIfChangedMethod2 -> k
    boolean hasNewReopenAPI2 -> l
    org.apache.lucene.util.VirtualMethod reopenMethod3 -> m
    org.apache.lucene.util.VirtualMethod doOpenIfChangedMethod3 -> n
    boolean hasNewReopenAPI3 -> o
    org.apache.lucene.util.VirtualMethod reopenMethod4 -> p
    org.apache.lucene.util.VirtualMethod doOpenIfChangedMethod4 -> q
    boolean hasNewReopenAPI4 -> r
    boolean $assertionsDisabled -> g
    void notifyReaderClosedListeners() -> i
    int getRefCount() -> n
    void incRef() -> o
    java.lang.String toString() -> toString
    void decRef() -> p
    void ensureOpen() -> q
    org.apache.lucene.index.IndexReader open(org.apache.lucene.store.Directory) -> a
    java.lang.Object clone() -> clone
    org.apache.lucene.index.IndexReader clone(boolean) -> a
    org.apache.lucene.store.Directory directory() -> m
    org.apache.lucene.index.TermFreqVector[] getTermFreqVectors(int) -> a
    boolean indexExists(org.apache.lucene.store.Directory) -> b
    int numDocs() -> b
    int maxDoc() -> c
    int numDeletedDocs() -> r
    org.apache.lucene.document.Document document(int) -> d
    org.apache.lucene.document.Document document(int,org.apache.lucene.document.FieldSelector) -> a
    boolean isDeleted(int) -> b
    boolean hasDeletions() -> d
    boolean hasNorms(java.lang.String) -> a
    byte[] norms(java.lang.String) -> b
    void norms(java.lang.String,byte[],int) -> a
    org.apache.lucene.index.TermEnum terms() -> e
    org.apache.lucene.index.TermEnum terms(org.apache.lucene.index.Term) -> a
    int docFreq(org.apache.lucene.index.Term) -> b
    org.apache.lucene.index.TermDocs termDocs(org.apache.lucene.index.Term) -> c
    org.apache.lucene.index.TermDocs termDocs() -> f
    org.apache.lucene.index.TermPositions termPositions(org.apache.lucene.index.Term) -> d
    org.apache.lucene.index.TermPositions termPositions() -> g
    void deleteDocument(int) -> e
    void doDelete(int) -> c
    void acquireWriteLock() -> h
    void commit() -> s
    void commit(java.util.Map) -> b
    void doCommit(java.util.Map) -> a
    void close() -> close
    void doClose() -> k
    org.apache.lucene.index.FieldInfos getFieldInfos() -> a
    org.apache.lucene.index.IndexReader[] getSequentialSubReaders() -> l
org.apache.lucene.index.IndexReader$ReaderClosedListener -> a.a.a.c.cv:
    void onClose(org.apache.lucene.index.IndexReader) -> a
org.apache.lucene.index.IndexWriter -> a.a.a.c.cw:
    long WRITE_LOCK_TIMEOUT -> a
    long writeLockTimeout -> k
    int DEFAULT_MAX_FIELD_LENGTH -> b
    java.util.concurrent.atomic.AtomicInteger MESSAGE_ID -> l
    int messageID -> m
    boolean hitOOM -> n
    org.apache.lucene.store.Directory directory -> o
    org.apache.lucene.analysis.Analyzer analyzer -> p
    org.apache.lucene.search.Similarity similarity -> q
    long changeCount -> r
    long lastCommitChangeCount -> s
    java.util.List rollbackSegments -> t
    org.apache.lucene.index.SegmentInfos pendingCommit -> c
    long pendingCommitChangeCount -> d
    org.apache.lucene.index.SegmentInfos segmentInfos -> e
    java.util.Collection filesToCommit -> u
    org.apache.lucene.index.DocumentsWriter docWriter -> v
    org.apache.lucene.index.IndexFileDeleter deleter -> w
    java.util.Map segmentsToMerge -> x
    int mergeMaxNumSegments -> y
    org.apache.lucene.store.Lock writeLock -> z
    boolean closed -> A
    boolean closing -> B
    java.util.HashSet mergingSegments -> C
    org.apache.lucene.index.MergePolicy mergePolicy -> D
    org.apache.lucene.index.MergeScheduler mergeScheduler -> E
    java.util.LinkedList pendingMerges -> F
    java.util.Set runningMerges -> G
    java.util.List mergeExceptions -> H
    long mergeGen -> I
    boolean stopMerges -> J
    java.util.concurrent.atomic.AtomicInteger flushCount -> K
    java.util.concurrent.atomic.AtomicInteger flushDeletesCount -> L
    org.apache.lucene.index.IndexWriter$ReaderPool readerPool -> f
    org.apache.lucene.index.BufferedDeletesStream bufferedDeletesStream -> g
    boolean poolReaders -> M
    org.apache.lucene.index.IndexWriterConfig config -> N
    org.apache.lucene.index.PayloadProcessorProvider payloadProcessorProvider -> O
    boolean anyNonBulkMerges -> h
    int maxFieldLength -> P
    java.io.PrintStream infoStream -> Q
    java.io.PrintStream defaultInfoStream -> R
    java.lang.Object commitLock -> S
    boolean keepFullyDeletedSegments -> T
    org.apache.lucene.index.IndexWriter$FlushControl flushControl -> i
    boolean $assertionsDisabled -> j
    int numDeletedDocs(org.apache.lucene.index.SegmentInfo) -> a
    void ensureOpen(boolean) -> a
    void ensureOpen() -> a
    void message(java.lang.String) -> a
    org.apache.lucene.index.FieldInfos getFieldInfos(org.apache.lucene.index.SegmentInfo) -> c
    org.apache.lucene.index.FieldInfos getCurrentFieldInfos() -> p
    org.apache.lucene.index.IndexWriterConfig getConfig() -> b
    void messageState() -> q
    boolean verbose() -> c
    void close() -> close
    void close(boolean) -> b
    boolean shouldClose() -> r
    void closeInternal(boolean) -> c
    org.apache.lucene.store.Directory getDirectory() -> d
    void addDocument(org.apache.lucene.document.Document) -> a
    void addDocument(org.apache.lucene.document.Document,org.apache.lucene.analysis.Analyzer) -> a
    java.lang.String newSegmentName() -> e
    void maybeMerge() -> f
    void maybeMerge(int) -> a
    void updatePendingMerges(int) -> b
    java.util.Collection getMergingSegments() -> g
    org.apache.lucene.index.MergePolicy$OneMerge getNextMerge() -> h
    void rollbackInternal() -> s
    void finishMerges(boolean) -> d
    void waitForMerges() -> i
    void checkpoint() -> j
    void doAfterFlush() -> k
    void doBeforeFlush() -> l
    void prepareCommit(java.util.Map) -> a
    void commit() -> m
    void commit(java.util.Map) -> b
    void commitInternal(java.util.Map) -> c
    void finishCommit() -> t
    void flush(boolean,boolean) -> a
    boolean doFlush(boolean) -> e
    void ensureValidMerge(org.apache.lucene.index.MergePolicy$OneMerge) -> g
    void commitMergedDeletes(org.apache.lucene.index.MergePolicy$OneMerge,org.apache.lucene.index.SegmentReader) -> a
    boolean commitMerge(org.apache.lucene.index.MergePolicy$OneMerge,org.apache.lucene.index.SegmentReader) -> b
    void handleMergeException(java.lang.Throwable,org.apache.lucene.index.MergePolicy$OneMerge) -> a
    void merge(org.apache.lucene.index.MergePolicy$OneMerge) -> a
    void mergeSuccess(org.apache.lucene.index.MergePolicy$OneMerge) -> b
    boolean registerMerge(org.apache.lucene.index.MergePolicy$OneMerge) -> c
    void mergeInit(org.apache.lucene.index.MergePolicy$OneMerge) -> d
    void _mergeInit(org.apache.lucene.index.MergePolicy$OneMerge) -> h
    void setDiagnostics(org.apache.lucene.index.SegmentInfo,java.lang.String) -> a
    void setDiagnostics(org.apache.lucene.index.SegmentInfo,java.lang.String,java.util.Map) -> a
    void mergeFinish(org.apache.lucene.index.MergePolicy$OneMerge) -> e
    void closeMergeReaders(org.apache.lucene.index.MergePolicy$OneMerge,boolean) -> a
    int mergeMiddle(org.apache.lucene.index.MergePolicy$OneMerge) -> i
    void addMergeException(org.apache.lucene.index.MergePolicy$OneMerge) -> f
    java.lang.String segString() -> n
    java.lang.String segString(java.lang.Iterable) -> a
    java.lang.String segString(org.apache.lucene.index.SegmentInfo) -> b
    void doWait() -> u
    boolean filesExist(org.apache.lucene.index.SegmentInfos) -> a
    void startCommit(org.apache.lucene.index.SegmentInfos,java.util.Map) -> a
    void handleOOM(java.lang.OutOfMemoryError,java.lang.String) -> a
    boolean testPoint(java.lang.String) -> b
    void deletePendingFiles() -> o
    boolean access$000(org.apache.lucene.index.IndexWriter) -> a
    org.apache.lucene.index.IndexFileDeleter access$100(org.apache.lucene.index.IndexWriter) -> b
    org.apache.lucene.index.IndexWriterConfig access$200(org.apache.lucene.index.IndexWriter) -> c
    org.apache.lucene.store.Directory access$300(org.apache.lucene.index.IndexWriter) -> d
    java.io.PrintStream access$400(org.apache.lucene.index.IndexWriter) -> e
    org.apache.lucene.index.DocumentsWriter access$500(org.apache.lucene.index.IndexWriter) -> f
org.apache.lucene.index.IndexWriter$FlushControl -> a.a.a.c.cx:
    boolean flushPending -> b
    boolean flushDeletes -> c
    int delCount -> d
    int docCount -> e
    boolean flushing -> f
    org.apache.lucene.index.IndexWriter this$0 -> a
    boolean setFlushPending(java.lang.String,boolean) -> a
    void setFlushPendingNoWait(java.lang.String) -> a
    boolean getFlushDeletes() -> a
    void clearFlushPending() -> b
    void clearDeletes() -> c
    boolean waitUpdate(int,int) -> a
    boolean waitUpdate(int,int,boolean) -> a
    boolean flushByRAMUsage(java.lang.String) -> b
org.apache.lucene.index.IndexWriter$IndexReaderWarmer -> a.a.a.c.cy:
    void warm(org.apache.lucene.index.IndexReader) -> a
org.apache.lucene.index.IndexWriter$MaxFieldLength -> a.a.a.c.cz:
    int limit -> c
    java.lang.String name -> d
    org.apache.lucene.index.IndexWriter$MaxFieldLength UNLIMITED -> a
    org.apache.lucene.index.IndexWriter$MaxFieldLength LIMITED -> b
    int getLimit() -> a
    java.lang.String toString() -> toString
org.apache.lucene.index.IndexWriter$ReaderPool -> a.a.a.c.da:
    java.util.Map readerMap -> c
    boolean $assertionsDisabled -> a
    org.apache.lucene.index.IndexWriter this$0 -> b
    void clear(java.util.List) -> a
    boolean infoIsLive(org.apache.lucene.index.SegmentInfo) -> a
    boolean release(org.apache.lucene.index.SegmentReader) -> a
    boolean release(org.apache.lucene.index.SegmentReader,boolean) -> a
    void drop(java.util.List) -> b
    void drop(org.apache.lucene.index.SegmentInfo) -> b
    void close() -> a
    void commit(org.apache.lucene.index.SegmentInfos) -> a
    org.apache.lucene.index.SegmentReader get(org.apache.lucene.index.SegmentInfo,boolean) -> a
    org.apache.lucene.index.SegmentReader get(org.apache.lucene.index.SegmentInfo,boolean,int,int) -> a
    org.apache.lucene.index.SegmentReader getIfExists(org.apache.lucene.index.SegmentInfo) -> c
org.apache.lucene.index.IndexWriterConfig -> a.a.a.c.db:
    long WRITE_LOCK_TIMEOUT -> a
    int DEFAULT_READER_TERMS_INDEX_DIVISOR -> b
    org.apache.lucene.analysis.Analyzer analyzer -> c
    org.apache.lucene.index.IndexDeletionPolicy delPolicy -> d
    org.apache.lucene.index.IndexCommit commit -> e
    org.apache.lucene.index.IndexWriterConfig$OpenMode openMode -> f
    org.apache.lucene.search.Similarity similarity -> g
    int termIndexInterval -> h
    org.apache.lucene.index.MergeScheduler mergeScheduler -> i
    long writeLockTimeout -> j
    int maxBufferedDeleteTerms -> k
    double ramBufferSizeMB -> l
    int maxBufferedDocs -> m
    org.apache.lucene.index.DocumentsWriter$IndexingChain indexingChain -> n
    org.apache.lucene.index.IndexWriter$IndexReaderWarmer mergedSegmentWarmer -> o
    org.apache.lucene.index.MergePolicy mergePolicy -> p
    int maxThreadStates -> q
    boolean readerPooling -> r
    int readerTermsIndexDivisor -> s
    org.apache.lucene.util.Version matchVersion -> t
    java.lang.Object clone() -> clone
    org.apache.lucene.analysis.Analyzer getAnalyzer() -> a
    org.apache.lucene.index.IndexWriterConfig$OpenMode getOpenMode() -> b
    org.apache.lucene.index.IndexDeletionPolicy getIndexDeletionPolicy() -> c
    org.apache.lucene.index.IndexCommit getIndexCommit() -> d
    org.apache.lucene.search.Similarity getSimilarity() -> e
    int getTermIndexInterval() -> f
    org.apache.lucene.index.MergeScheduler getMergeScheduler() -> g
    long getWriteLockTimeout() -> h
    int getMaxBufferedDeleteTerms() -> i
    double getRAMBufferSizeMB() -> j
    int getMaxBufferedDocs() -> k
    org.apache.lucene.index.IndexWriter$IndexReaderWarmer getMergedSegmentWarmer() -> l
    org.apache.lucene.index.MergePolicy getMergePolicy() -> m
    int getMaxThreadStates() -> n
    boolean getReaderPooling() -> o
    org.apache.lucene.index.DocumentsWriter$IndexingChain getIndexingChain() -> p
    int getReaderTermsIndexDivisor() -> q
    java.lang.String toString() -> toString
org.apache.lucene.index.IndexWriterConfig$OpenMode -> a.a.a.c.dc:
    org.apache.lucene.index.IndexWriterConfig$OpenMode CREATE -> a
    org.apache.lucene.index.IndexWriterConfig$OpenMode APPEND -> b
    org.apache.lucene.index.IndexWriterConfig$OpenMode CREATE_OR_APPEND -> c
    org.apache.lucene.index.IndexWriterConfig$OpenMode[] $VALUES -> d
    org.apache.lucene.index.IndexWriterConfig$OpenMode[] values() -> values
    org.apache.lucene.index.IndexWriterConfig$OpenMode valueOf(java.lang.String) -> valueOf
org.apache.lucene.index.IntBlockPool -> a.a.a.c.dd:
    int[][] buffers -> a
    int bufferUpto -> b
    int intUpto -> c
    int[] buffer -> d
    int intOffset -> e
    org.apache.lucene.index.DocumentsWriter docWriter -> f
    void reset() -> a
    void nextBuffer() -> b
org.apache.lucene.index.InvertedDocConsumer -> a.a.a.c.de:
    org.apache.lucene.index.FieldInfos fieldInfos -> a
    org.apache.lucene.index.InvertedDocConsumerPerThread addThread(org.apache.lucene.index.DocInverterPerThread) -> a
    void abort() -> a
    void flush(java.util.Map,org.apache.lucene.index.SegmentWriteState) -> a
    boolean freeRAM() -> b
    void setFieldInfos(org.apache.lucene.index.FieldInfos) -> a
org.apache.lucene.index.InvertedDocConsumerPerField -> a.a.a.c.df:
    boolean start(org.apache.lucene.document.Fieldable[],int) -> a
    void start(org.apache.lucene.document.Fieldable) -> a
    void add() -> a
    void finish() -> b
    void abort() -> c
    void close() -> d
org.apache.lucene.index.InvertedDocConsumerPerThread -> a.a.a.c.dg:
    void startDocument() -> a
    org.apache.lucene.index.InvertedDocConsumerPerField addField(org.apache.lucene.index.DocInverterPerField,org.apache.lucene.index.FieldInfo) -> a
    org.apache.lucene.index.DocumentsWriter$DocWriter finishDocument() -> b
    void abort() -> c
org.apache.lucene.index.InvertedDocEndConsumer -> a.a.a.c.dh:
    org.apache.lucene.index.InvertedDocEndConsumerPerThread addThread(org.apache.lucene.index.DocInverterPerThread) -> a
    void flush(java.util.Map,org.apache.lucene.index.SegmentWriteState) -> a
    void abort() -> a
    void setFieldInfos(org.apache.lucene.index.FieldInfos) -> a
org.apache.lucene.index.InvertedDocEndConsumerPerField -> a.a.a.c.di:
    void finish() -> a
    void abort() -> b
org.apache.lucene.index.InvertedDocEndConsumerPerThread -> a.a.a.c.dj:
    void startDocument() -> a
    org.apache.lucene.index.InvertedDocEndConsumerPerField addField(org.apache.lucene.index.DocInverterPerField,org.apache.lucene.index.FieldInfo) -> a
    void finishDocument() -> b
    void abort() -> c
org.apache.lucene.index.KeepOnlyLastCommitDeletionPolicy -> a.a.a.c.dk:
    void onInit(java.util.List) -> a
    void onCommit(java.util.List) -> b
org.apache.lucene.index.LogByteSizeMergePolicy -> a.a.a.c.dl:
    long size(org.apache.lucene.index.SegmentInfo) -> a
org.apache.lucene.index.LogMergePolicy -> a.a.a.c.dm:
    int mergeFactor -> a
    long minMergeSize -> b
    long maxMergeSize -> c
    long maxMergeSizeForForcedMerge -> d
    int maxMergeDocs -> e
    double noCFSRatio -> f
    boolean calibrateSizeByDeletes -> g
    boolean useCompoundFile -> h
    boolean $assertionsDisabled -> i
    boolean verbose() -> a
    void message(java.lang.String) -> a
    boolean useCompoundFile(org.apache.lucene.index.SegmentInfos,org.apache.lucene.index.SegmentInfo) -> a
    void close() -> close
    long size(org.apache.lucene.index.SegmentInfo) -> a
    long sizeDocs(org.apache.lucene.index.SegmentInfo) -> b
    long sizeBytes(org.apache.lucene.index.SegmentInfo) -> c
    boolean isMerged(org.apache.lucene.index.SegmentInfos,int,java.util.Map) -> a
    boolean isMerged(org.apache.lucene.index.SegmentInfo) -> d
    org.apache.lucene.index.MergePolicy$MergeSpecification findForcedMergesSizeLimit(org.apache.lucene.index.SegmentInfos,int,int) -> a
    org.apache.lucene.index.MergePolicy$MergeSpecification findForcedMergesMaxNumSegments(org.apache.lucene.index.SegmentInfos,int,int) -> b
    org.apache.lucene.index.MergePolicy$MergeSpecification findForcedMerges(org.apache.lucene.index.SegmentInfos,int,java.util.Map) -> b
    org.apache.lucene.index.MergePolicy$MergeSpecification findMerges(org.apache.lucene.index.SegmentInfos) -> a
    java.lang.String toString() -> toString
org.apache.lucene.index.LogMergePolicy$SegmentInfoAndLevel -> a.a.a.c.dn:
    org.apache.lucene.index.SegmentInfo info -> a
    float level -> b
    int index -> c
    int compareTo(org.apache.lucene.index.LogMergePolicy$SegmentInfoAndLevel) -> a
    int compareTo(java.lang.Object) -> compareTo
org.apache.lucene.index.MergePolicy -> a.a.a.c.do:
    org.apache.lucene.util.SetOnce writer -> j
    void setIndexWriter(org.apache.lucene.index.IndexWriter) -> a
    org.apache.lucene.index.MergePolicy$MergeSpecification findMerges(org.apache.lucene.index.SegmentInfos) -> a
    org.apache.lucene.index.MergePolicy$MergeSpecification findForcedMerges(org.apache.lucene.index.SegmentInfos,int,java.util.Map) -> b
    void close() -> close
    boolean useCompoundFile(org.apache.lucene.index.SegmentInfos,org.apache.lucene.index.SegmentInfo) -> a
org.apache.lucene.index.MergePolicy$MergeAbortedException -> a.a.a.c.dp:
org.apache.lucene.index.MergePolicy$MergeException -> a.a.a.c.dq:
    org.apache.lucene.store.Directory dir -> a
org.apache.lucene.index.MergePolicy$MergeSpecification -> a.a.a.c.dr:
    java.util.List merges -> a
    void add(org.apache.lucene.index.MergePolicy$OneMerge) -> a
org.apache.lucene.index.MergePolicy$OneMerge -> a.a.a.c.ds:
    org.apache.lucene.index.SegmentInfo info -> a
    boolean registerDone -> b
    long mergeGen -> c
    boolean isExternal -> d
    int maxNumSegments -> e
    long estimatedMergeBytes -> f
    java.util.List readers -> g
    java.util.List readerClones -> h
    java.util.List segments -> i
    int totalDocCount -> j
    boolean aborted -> k
    java.lang.Throwable error -> l
    boolean paused -> m
    void setException(java.lang.Throwable) -> a
    java.lang.Throwable getException() -> a
    void abort() -> b
    boolean isAborted() -> c
    void checkAborted(org.apache.lucene.store.Directory) -> a
    void setPause(boolean) -> a
    boolean getPause() -> d
    java.lang.String segString(org.apache.lucene.store.Directory) -> b
org.apache.lucene.index.MergeScheduler -> a.a.a.c.dt:
    void merge(org.apache.lucene.index.IndexWriter) -> a
    void close() -> c
org.apache.lucene.index.MultiLevelSkipListReader -> a.a.a.c.du:
    int maxNumberOfSkipLevels -> a
    int numberOfSkipLevels -> b
    int numberOfLevelsToBuffer -> c
    int docCount -> d
    boolean haveSkipped -> e
    org.apache.lucene.store.IndexInput[] skipStream -> f
    long[] skipPointer -> g
    int[] skipInterval -> h
    int[] numSkipped -> i
    int[] skipDoc -> j
    int lastDoc -> k
    long[] childPointer -> l
    long lastChildPointer -> m
    boolean inputIsBuffered -> n
    int getDoc() -> d
    int skipTo(int) -> c
    boolean loadNextSkip(int) -> d
    void seekChild(int) -> a
    void close() -> e
    void init(long,int) -> a
    void loadSkipLevels() -> a
    int readSkipData(int,org.apache.lucene.store.IndexInput) -> a
    void setLastSkipData(int) -> b
org.apache.lucene.index.MultiLevelSkipListReader$SkipBuffer -> a.a.a.c.dv:
    byte[] data -> a
    long pointer -> b
    int pos -> c
    void close() -> close
    long getFilePointer() -> d
    long length() -> e
    byte readByte() -> b
    void readBytes(byte[],int,int) -> a
    void seek(long) -> a
org.apache.lucene.index.MultiLevelSkipListWriter -> a.a.a.c.dw:
    int numberOfSkipLevels -> a
    int skipInterval -> b
    org.apache.lucene.store.RAMOutputStream[] skipBuffer -> c
    void init() -> b
    void resetSkip() -> a
    void writeSkipData(int,org.apache.lucene.store.IndexOutput) -> a
    void bufferSkip(int) -> a
    long writeSkip(org.apache.lucene.store.IndexOutput) -> c
org.apache.lucene.index.MultipleTermPositions -> a.a.a.c.dx:
    int _doc -> a
    int _freq -> b
    org.apache.lucene.index.MultipleTermPositions$TermPositionsQueue _termPositionsQueue -> c
    org.apache.lucene.index.MultipleTermPositions$IntQueue _posList -> d
    boolean next() -> c
    int nextPosition() -> d
    boolean skipTo(int) -> a
    int doc() -> a
    int freq() -> b
    void close() -> close
    void seek(org.apache.lucene.index.Term) -> a
    void seek(org.apache.lucene.index.TermEnum) -> a
    int read(int[],int[]) -> a
    int getPayloadLength() -> e
    byte[] getPayload(byte[],int) -> a
org.apache.lucene.index.MultipleTermPositions$1 -> a.a.a.c.dy:
org.apache.lucene.index.MultipleTermPositions$IntQueue -> a.a.a.c.dz:
    int _arraySize -> a
    int _index -> b
    int _lastIndex -> c
    int[] _array -> d
    void add(int) -> a
    int next() -> a
    void sort() -> b
    void clear() -> c
    int size() -> d
    void growArray() -> e
org.apache.lucene.index.MultipleTermPositions$TermPositionsQueue -> a.a.a.c.ea:
    org.apache.lucene.index.TermPositions peek() -> a
    boolean lessThan(org.apache.lucene.index.TermPositions,org.apache.lucene.index.TermPositions) -> a
    boolean lessThan(java.lang.Object,java.lang.Object) -> a
org.apache.lucene.index.NormsWriter -> a.a.a.c.eb:
    byte defaultNorm -> b
    org.apache.lucene.index.FieldInfos fieldInfos -> c
    boolean $assertionsDisabled -> a
    org.apache.lucene.index.InvertedDocEndConsumerPerThread addThread(org.apache.lucene.index.DocInverterPerThread) -> a
    void abort() -> a
    void setFieldInfos(org.apache.lucene.index.FieldInfos) -> a
    void flush(java.util.Map,org.apache.lucene.index.SegmentWriteState) -> a
org.apache.lucene.index.NormsWriterPerField -> a.a.a.c.ec:
    org.apache.lucene.index.NormsWriterPerThread perThread -> a
    org.apache.lucene.index.FieldInfo fieldInfo -> b
    org.apache.lucene.index.DocumentsWriter$DocState docState -> c
    int[] docIDs -> d
    byte[] norms -> e
    int upto -> f
    org.apache.lucene.index.FieldInvertState fieldState -> g
    boolean $assertionsDisabled -> h
    void reset() -> c
    void abort() -> b
    int compareTo(org.apache.lucene.index.NormsWriterPerField) -> a
    void finish() -> a
    int compareTo(java.lang.Object) -> compareTo
org.apache.lucene.index.NormsWriterPerThread -> a.a.a.c.ed:
    org.apache.lucene.index.NormsWriter normsWriter -> a
    org.apache.lucene.index.DocumentsWriter$DocState docState -> b
    org.apache.lucene.index.InvertedDocEndConsumerPerField addField(org.apache.lucene.index.DocInverterPerField,org.apache.lucene.index.FieldInfo) -> a
    void abort() -> c
    void startDocument() -> a
    void finishDocument() -> b
org.apache.lucene.index.ParallelArrayTermVectorMapper -> a.a.a.c.ee:
    java.lang.String[] terms -> a
    int[] termFreqs -> b
    int[][] positions -> c
    org.apache.lucene.index.TermVectorOffsetInfo[][] offsets -> d
    int currentPosition -> e
    boolean storingOffsets -> f
    boolean storingPositions -> g
    java.lang.String field -> h
    void setExpectations(java.lang.String,int,boolean,boolean) -> a
    void map(java.lang.String,int,org.apache.lucene.index.TermVectorOffsetInfo[],int[]) -> a
    org.apache.lucene.index.TermFreqVector materializeVector() -> a
org.apache.lucene.index.ParallelPostingsArray -> a.a.a.c.ef:
    int size -> f
    int[] textStarts -> g
    int[] intStarts -> h
    int[] byteStarts -> i
    int bytesPerPosting() -> a
    org.apache.lucene.index.ParallelPostingsArray newInstance(int) -> a
    org.apache.lucene.index.ParallelPostingsArray grow() -> b
    void copyTo(org.apache.lucene.index.ParallelPostingsArray,int) -> a
org.apache.lucene.index.Payload -> a.a.a.c.eg:
    byte[] data -> a
    int offset -> b
    int length -> c
    byte[] toByteArray() -> a
    java.lang.Object clone() -> clone
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.apache.lucene.index.PayloadProcessorProvider -> a.a.a.c.eh:
    org.apache.lucene.index.PayloadProcessorProvider$ReaderPayloadProcessor getReaderProcessor(org.apache.lucene.index.IndexReader) -> a
    org.apache.lucene.index.PayloadProcessorProvider$DirPayloadProcessor getDirProcessor(org.apache.lucene.store.Directory) -> a
org.apache.lucene.index.PayloadProcessorProvider$DirPayloadProcessor -> a.a.a.c.ei:
org.apache.lucene.index.PayloadProcessorProvider$PayloadProcessor -> a.a.a.c.ej:
    int payloadLength() -> a
    byte[] processPayload(byte[],int,int) -> a
org.apache.lucene.index.PayloadProcessorProvider$ReaderPayloadProcessor -> a.a.a.c.ek:
    org.apache.lucene.index.PayloadProcessorProvider$PayloadProcessor getProcessor(org.apache.lucene.index.Term) -> a
org.apache.lucene.index.PrefixCodedTerms -> a.a.a.c.el:
    org.apache.lucene.store.RAMFile buffer -> a
    long getSizeInBytes() -> a
    java.util.Iterator iterator() -> iterator
org.apache.lucene.index.PrefixCodedTerms$1 -> a.a.a.c.em:
org.apache.lucene.index.PrefixCodedTerms$Builder -> a.a.a.c.en:
    org.apache.lucene.store.RAMFile buffer -> b
    org.apache.lucene.store.RAMOutputStream output -> c
    org.apache.lucene.index.Term lastTerm -> d
    org.apache.lucene.util.BytesRef lastBytes -> e
    org.apache.lucene.util.BytesRef scratch -> f
    boolean $assertionsDisabled -> a
    void add(org.apache.lucene.index.Term) -> a
    org.apache.lucene.index.PrefixCodedTerms finish() -> a
    int sharedPrefix(org.apache.lucene.util.BytesRef,org.apache.lucene.util.BytesRef) -> a
org.apache.lucene.index.PrefixCodedTerms$PrefixCodedTermsIterator -> a.a.a.c.eo:
    org.apache.lucene.store.IndexInput input -> a
    java.lang.String field -> b
    org.apache.lucene.util.BytesRef bytes -> c
    org.apache.lucene.index.Term term -> d
    boolean $assertionsDisabled -> e
    org.apache.lucene.index.PrefixCodedTerms this$0 -> f
    boolean hasNext() -> hasNext
    org.apache.lucene.index.Term next() -> a
    void remove() -> remove
    java.lang.Object next() -> next
org.apache.lucene.index.ReadOnlyDirectoryReader -> a.a.a.c.ep:
    void acquireWriteLock() -> h
org.apache.lucene.index.ReadOnlySegmentReader -> a.a.a.c.eq:
    void noWrite() -> i
    void acquireWriteLock() -> h
    boolean isDeleted(int) -> b
org.apache.lucene.index.ReusableStringReader -> a.a.a.c.er:
    int upto -> a
    int left -> b
    java.lang.String s -> c
    void init(java.lang.String) -> a
    int read(char[]) -> read
    int read(char[],int,int) -> read
    void close() -> close
org.apache.lucene.index.SegmentCoreReaders -> a.a.a.c.es:
    java.util.concurrent.atomic.AtomicInteger ref -> p
    java.lang.String segment -> a
    org.apache.lucene.index.FieldInfos fieldInfos -> b
    org.apache.lucene.store.IndexInput freqStream -> c
    org.apache.lucene.store.IndexInput proxStream -> d
    org.apache.lucene.index.TermInfosReader tisNoIndex -> e
    org.apache.lucene.store.Directory dir -> f
    org.apache.lucene.store.Directory cfsDir -> g
    int readBufferSize -> h
    int termsIndexDivisor -> i
    org.apache.lucene.index.SegmentReader owner -> q
    org.apache.lucene.index.TermInfosReader tis -> j
    org.apache.lucene.index.FieldsReader fieldsReaderOrig -> k
    org.apache.lucene.index.TermVectorsReader termVectorsReaderOrig -> l
    org.apache.lucene.index.CompoundFileReader cfsReader -> m
    org.apache.lucene.index.CompoundFileReader storeCFSReader -> n
    java.util.Set coreClosedListeners -> r
    boolean $assertionsDisabled -> o
    org.apache.lucene.index.TermVectorsReader getTermVectorsReaderOrig() -> a
    org.apache.lucene.index.FieldsReader getFieldsReaderOrig() -> b
    void incRef() -> c
    org.apache.lucene.store.Directory getCFSReader() -> d
    org.apache.lucene.index.TermInfosReader getTermsReader() -> e
    boolean termsIndexIsLoaded() -> f
    void loadTermsIndex(org.apache.lucene.index.SegmentInfo,int) -> a
    void decRef() -> g
    void notifyCoreClosedListeners() -> h
    void openDocStores(org.apache.lucene.index.SegmentInfo) -> a
    java.lang.String toString() -> toString
org.apache.lucene.index.SegmentInfo -> a.a.a.c.et:
    java.lang.String name -> a
    int docCount -> b
    org.apache.lucene.store.Directory dir -> c
    boolean preLockless -> e
    long delGen -> f
    long[] normGen -> g
    byte isCompoundFile -> h
    boolean hasSingleNormFile -> i
    java.util.List files -> j
    long sizeInBytesNoStore -> k
    long sizeInBytesWithStore -> l
    int docStoreOffset -> m
    java.lang.String docStoreSegment -> n
    boolean docStoreIsCompoundFile -> o
    int delCount -> p
    boolean hasProx -> q
    boolean hasVectors -> r
    java.util.Map diagnostics -> s
    java.lang.String version -> t
    long bufferedDeletesGen -> u
    boolean $assertionsDisabled -> d
    void reset(org.apache.lucene.index.SegmentInfo) -> a
    void setDiagnostics(java.util.Map) -> a
    void setNumFields(int) -> a
    long sizeInBytes(boolean) -> a
    boolean getHasVectors() -> a
    void setHasVectors(boolean) -> b
    boolean hasDeletions() -> b
    void advanceDelGen() -> c
    java.lang.Object clone() -> clone
    java.lang.String getDelFileName() -> d
    boolean hasSeparateNorms(int) -> b
    boolean hasSeparateNorms() -> e
    void advanceNormGen(int) -> c
    java.lang.String getNormFileName(int) -> d
    void setUseCompoundFile(boolean) -> c
    boolean getUseCompoundFile() -> f
    int getDelCount() -> g
    void setDelCount(int) -> e
    int getDocStoreOffset() -> h
    boolean getDocStoreIsCompoundFile() -> i
    java.lang.String getDocStoreSegment() -> j
    void write(org.apache.lucene.store.IndexOutput) -> a
    void setHasProx(boolean) -> d
    void addIfExists(java.util.Set,java.lang.String) -> a
    java.util.List files() -> k
    void clearFiles() -> n
    java.lang.String toString() -> toString
    java.lang.String toString(org.apache.lucene.store.Directory,int) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void setVersion(java.lang.String) -> a
    java.lang.String getVersion() -> l
    long getBufferedDeletesGen() -> m
    void setBufferedDeletesGen(long) -> a
org.apache.lucene.index.SegmentInfos -> a.a.a.c.eu:
    int counter -> a
    long version -> b
    long generation -> e
    long lastGeneration -> f
    java.util.Map userData -> g
    int format -> h
    java.util.List segments -> i
    java.util.Set segmentSet -> j
    java.util.List cachedUnmodifiableList -> k
    java.util.Set cachedUnmodifiableSet -> l
    java.io.PrintStream infoStream -> m
    org.apache.lucene.store.ChecksumIndexOutput pendingSegnOutput -> c
    int defaultGenLookaheadCount -> n
    boolean $assertionsDisabled -> d
    int getFormat() -> a
    org.apache.lucene.index.SegmentInfo info(int) -> a
    long getLastCommitGeneration(java.lang.String[]) -> a
    java.lang.String getSegmentsFileName() -> b
    long generationFromSegmentsFileName(java.lang.String) -> a
    java.lang.String getNextSegmentFileName() -> c
    void read(org.apache.lucene.store.Directory,java.lang.String) -> a
    void read(org.apache.lucene.store.Directory) -> a
    void write(org.apache.lucene.store.Directory) -> g
    void pruneDeletedSegments() -> d
    java.lang.Object clone() -> clone
    long getVersion() -> e
    long getGeneration() -> f
    long readCurrentVersion(org.apache.lucene.store.Directory) -> b
    void message(java.lang.String) -> c
    void updateGeneration(org.apache.lucene.index.SegmentInfos) -> a
    void rollbackCommit(org.apache.lucene.store.Directory) -> c
    void prepareCommit(org.apache.lucene.store.Directory) -> d
    java.util.Collection files(org.apache.lucene.store.Directory,boolean) -> a
    void finishCommit(org.apache.lucene.store.Directory) -> e
    void commit(org.apache.lucene.store.Directory) -> f
    java.util.Map getUserData() -> g
    void setUserData(java.util.Map) -> a
    void replace(org.apache.lucene.index.SegmentInfos) -> b
    void changed() -> h
    void applyMergeChanges(org.apache.lucene.index.MergePolicy$OneMerge,boolean) -> a
    java.util.List createBackupSegmentInfos(boolean) -> a
    void rollbackSegmentInfos(java.util.List) -> a
    java.util.Iterator iterator() -> iterator
    java.util.List asList() -> i
    int size() -> j
    void add(org.apache.lucene.index.SegmentInfo) -> a
    void addAll(java.lang.Iterable) -> a
    void clear() -> k
    void remove(org.apache.lucene.index.SegmentInfo) -> b
    void remove(int) -> b
    boolean contains(org.apache.lucene.index.SegmentInfo) -> c
    int indexOf(org.apache.lucene.index.SegmentInfo) -> d
    java.io.PrintStream access$000() -> l
    void access$100(java.lang.String) -> b
    int access$200() -> m
org.apache.lucene.index.SegmentInfos$1 -> a.a.a.c.ev:
    org.apache.lucene.index.SegmentInfos this$0 -> a
    java.lang.Object doBody(java.lang.String) -> a
org.apache.lucene.index.SegmentInfos$FindSegmentsFile -> a.a.a.c.ew:
    org.apache.lucene.store.Directory directory -> d
    java.lang.Object run() -> a
    java.lang.Object run(org.apache.lucene.index.IndexCommit) -> a
    java.lang.Object doBody(java.lang.String) -> a
org.apache.lucene.index.SegmentMergeInfo -> a.a.a.c.ex:
    org.apache.lucene.index.Term term -> a
    int base -> b
    int ord -> c
    org.apache.lucene.index.TermEnum termEnum -> d
    org.apache.lucene.index.IndexReader reader -> e
    int delCount -> f
    org.apache.lucene.index.TermPositions postings -> h
    int[] docMap -> i
    org.apache.lucene.index.PayloadProcessorProvider$ReaderPayloadProcessor readerPayloadProcessor -> g
    int[] getDocMap() -> a
    org.apache.lucene.index.TermPositions getPositions() -> b
    boolean next() -> c
    void close() -> d
org.apache.lucene.index.SegmentMergeQueue -> a.a.a.c.ey:
    boolean lessThan(org.apache.lucene.index.SegmentMergeInfo,org.apache.lucene.index.SegmentMergeInfo) -> a
    void close() -> a
    boolean lessThan(java.lang.Object,java.lang.Object) -> a
org.apache.lucene.index.SegmentMerger -> a.a.a.c.ez:
    org.apache.lucene.store.Directory directory -> c
    java.lang.String segment -> d
    int termIndexInterval -> e
    java.util.List readers -> f
    org.apache.lucene.index.FieldInfos fieldInfos -> g
    int mergedDocs -> h
    org.apache.lucene.index.SegmentMerger$CheckAbort checkAbort -> i
    org.apache.lucene.index.SegmentWriteState segmentWriteState -> j
    org.apache.lucene.index.PayloadProcessorProvider payloadProcessorProvider -> k
    org.apache.lucene.index.SegmentReader[] matchingSegmentReaders -> l
    int[] rawDocLengths -> m
    int[] rawDocLengths2 -> n
    int matchedCount -> o
    org.apache.lucene.index.SegmentMergeQueue queue -> p
    org.apache.lucene.index.FieldInfo$IndexOptions indexOptions -> a
    byte[] payloadBuffer -> q
    int[][] docMaps -> r
    boolean $assertionsDisabled -> b
    org.apache.lucene.index.FieldInfos fieldInfos() -> a
    void add(org.apache.lucene.index.IndexReader) -> a
    int merge() -> b
    java.util.Collection createCompoundFile(java.lang.String,org.apache.lucene.index.SegmentInfo) -> a
    int getMatchedSubReaderCount() -> c
    void setMatchingSegmentReaders() -> e
    int mergeFields() -> f
    int copyFieldsWithDeletions(org.apache.lucene.index.FieldsWriter,org.apache.lucene.index.IndexReader,org.apache.lucene.index.FieldsReader) -> a
    int copyFieldsNoDeletions(org.apache.lucene.index.FieldsWriter,org.apache.lucene.index.IndexReader,org.apache.lucene.index.FieldsReader) -> b
    void mergeVectors() -> g
    void copyVectorsWithDeletions(org.apache.lucene.index.TermVectorsWriter,org.apache.lucene.index.TermVectorsReader,org.apache.lucene.index.IndexReader) -> a
    void copyVectorsNoDeletions(org.apache.lucene.index.TermVectorsWriter,org.apache.lucene.index.TermVectorsReader,org.apache.lucene.index.IndexReader) -> b
    void mergeTerms() -> h
    void mergeTermInfos(org.apache.lucene.index.FormatPostingsFieldsConsumer) -> a
    int appendPostings(org.apache.lucene.index.FormatPostingsTermsConsumer,org.apache.lucene.index.SegmentMergeInfo[],int) -> a
    boolean getAnyNonBulkMerges() -> d
    void mergeNorms() -> i
org.apache.lucene.index.SegmentMerger$1 -> a.a.a.c.fa:
    org.apache.lucene.index.SegmentMerger this$0 -> a
    void work(double) -> a
org.apache.lucene.index.SegmentMerger$CheckAbort -> a.a.a.c.fb:
    double workCount -> a
    org.apache.lucene.index.MergePolicy$OneMerge merge -> b
    org.apache.lucene.store.Directory dir -> c
    void work(double) -> a
org.apache.lucene.index.SegmentNorms -> a.a.a.c.fc:
    byte[] NORMS_HEADER -> a
    int refCount -> b
    org.apache.lucene.index.SegmentNorms origNorm -> f
    org.apache.lucene.store.IndexInput in -> g
    long normSeek -> h
    java.util.concurrent.atomic.AtomicInteger bytesRef -> i
    byte[] bytes -> j
    int number -> k
    boolean dirty -> c
    boolean rollbackDirty -> d
    org.apache.lucene.index.SegmentReader owner -> l
    boolean $assertionsDisabled -> e
    void incRef() -> a
    void closeInput() -> d
    void decRef() -> b
    void bytes(byte[],int,int) -> a
    byte[] bytes() -> c
    java.lang.Object clone() -> clone
    void reWrite(org.apache.lucene.index.SegmentInfo) -> a
org.apache.lucene.index.SegmentReader -> a.a.a.c.fd:
    boolean readOnly -> a
    org.apache.lucene.index.SegmentInfo si -> n
    int readBufferSize -> o
    org.apache.lucene.util.CloseableThreadLocal fieldsReaderLocal -> b
    org.apache.lucene.util.CloseableThreadLocal termVectorsLocal -> c
    org.apache.lucene.util.BitVector deletedDocs -> d
    java.util.concurrent.atomic.AtomicInteger deletedDocsRef -> h
    boolean deletedDocsDirty -> p
    boolean normsDirty -> q
    int pendingDeleteCount -> r
    boolean rollbackHasChanges -> s
    boolean rollbackDeletedDocsDirty -> t
    boolean rollbackNormsDirty -> u
    org.apache.lucene.index.SegmentInfo rollbackSegmentInfo -> v
    int rollbackPendingDeleteCount -> w
    org.apache.lucene.store.IndexInput singleNormStream -> i
    java.util.concurrent.atomic.AtomicInteger singleNormRef -> j
    org.apache.lucene.index.SegmentCoreReaders core -> k
    java.util.Map norms -> l
    boolean $assertionsDisabled -> m
    org.apache.lucene.index.SegmentReader get(boolean,org.apache.lucene.index.SegmentInfo,int) -> a
    org.apache.lucene.index.SegmentReader get(boolean,org.apache.lucene.store.Directory,org.apache.lucene.index.SegmentInfo,int,boolean,int) -> a
    void openDocStores() -> j
    boolean checkDeletedCounts() -> i
    void loadDeletedDocs() -> A
    org.apache.lucene.util.BitVector cloneDeletedDocs(org.apache.lucene.util.BitVector) -> a
    java.lang.Object clone() -> clone
    org.apache.lucene.index.IndexReader clone(boolean) -> a
    org.apache.lucene.index.SegmentReader reopenSegment(org.apache.lucene.index.SegmentInfo,boolean,boolean) -> a
    void doCommit(java.util.Map) -> a
    void commitChanges(java.util.Map) -> c
    org.apache.lucene.index.FieldsReader getFieldsReader() -> t
    void doClose() -> k
    boolean hasDeletions(org.apache.lucene.index.SegmentInfo) -> a
    boolean hasDeletions() -> d
    void doDelete(int) -> c
    org.apache.lucene.index.TermEnum terms() -> e
    org.apache.lucene.index.TermEnum terms(org.apache.lucene.index.Term) -> a
    org.apache.lucene.index.FieldInfos getFieldInfos() -> a
    org.apache.lucene.document.Document document(int,org.apache.lucene.document.FieldSelector) -> a
    boolean isDeleted(int) -> b
    org.apache.lucene.index.TermDocs termDocs(org.apache.lucene.index.Term) -> c
    org.apache.lucene.index.TermDocs termDocs() -> f
    org.apache.lucene.index.TermPositions termPositions() -> g
    int docFreq(org.apache.lucene.index.Term) -> b
    int numDocs() -> b
    int maxDoc() -> c
    boolean hasNorms(java.lang.String) -> a
    byte[] norms(java.lang.String) -> b
    void norms(java.lang.String,byte[],int) -> a
    void openNorms(org.apache.lucene.store.Directory,int) -> a
    boolean termsIndexLoaded() -> u
    void loadTermsIndex(int) -> f
    org.apache.lucene.index.TermVectorsReader getTermVectorsReader() -> v
    org.apache.lucene.index.TermFreqVector[] getTermFreqVectors(int) -> a
    java.lang.String toString() -> toString
    java.lang.String getSegmentName() -> w
    org.apache.lucene.index.SegmentInfo getSegmentInfo() -> x
    void startCommit() -> y
    void rollbackCommit() -> z
    org.apache.lucene.store.Directory directory() -> m
org.apache.lucene.index.SegmentReader$1 -> a.a.a.c.fe:
org.apache.lucene.index.SegmentReader$CoreClosedListener -> a.a.a.c.ff:
    void onClose(org.apache.lucene.index.SegmentReader) -> a
org.apache.lucene.index.SegmentReader$FieldsReaderLocal -> a.a.a.c.fg:
    org.apache.lucene.index.SegmentReader this$0 -> a
    org.apache.lucene.index.FieldsReader initialValue() -> a
    java.lang.Object initialValue() -> b
org.apache.lucene.index.SegmentTermDocs -> a.a.a.c.fh:
    org.apache.lucene.index.SegmentReader parent -> a
    org.apache.lucene.store.IndexInput freqStream -> b
    int count -> c
    int df -> d
    org.apache.lucene.util.BitVector deletedDocs -> e
    int doc -> f
    int freq -> g
    int skipInterval -> j
    int maxSkipLevels -> k
    org.apache.lucene.index.DefaultSkipListReader skipListReader -> l
    long freqBasePointer -> m
    long proxBasePointer -> n
    long skipPointer -> o
    boolean haveSkipped -> p
    boolean currentFieldStoresPayloads -> h
    org.apache.lucene.index.FieldInfo$IndexOptions indexOptions -> i
    void seek(org.apache.lucene.index.Term) -> a
    void seek(org.apache.lucene.index.TermEnum) -> a
    void seek(org.apache.lucene.index.TermInfo,org.apache.lucene.index.Term) -> a
    void close() -> close
    int doc() -> a
    int freq() -> b
    void skippingDoc() -> f
    boolean next() -> c
    int read(int[],int[]) -> a
    int readNoTf(int[],int[],int) -> a
    void skipProx(long,int) -> a
    boolean skipTo(int) -> a
org.apache.lucene.index.SegmentTermEnum -> a.a.a.c.fi:
    org.apache.lucene.store.IndexInput input -> i
    org.apache.lucene.index.FieldInfos fieldInfos -> a
    long size -> b
    long position -> c
    boolean first -> j
    org.apache.lucene.index.TermBuffer termBuffer -> k
    org.apache.lucene.index.TermBuffer prevBuffer -> l
    org.apache.lucene.index.TermBuffer scanBuffer -> m
    org.apache.lucene.index.TermInfo termInfo -> n
    int format -> o
    boolean isIndex -> p
    long indexPointer -> d
    int indexInterval -> e
    int skipInterval -> f
    int maxSkipLevels -> g
    int formatM1SkipInterval -> q
    boolean $assertionsDisabled -> h
    java.lang.Object clone() -> clone
    void seek(long,long,org.apache.lucene.index.Term,org.apache.lucene.index.TermInfo) -> a
    boolean next() -> a
    int scanTo(org.apache.lucene.index.Term) -> a
    org.apache.lucene.index.Term term() -> b
    org.apache.lucene.index.Term prev() -> d
    org.apache.lucene.index.TermInfo termInfo() -> e
    int docFreq() -> c
    void close() -> close
org.apache.lucene.index.SegmentTermPositionVector -> a.a.a.c.fj:
    int[][] positions -> a
    org.apache.lucene.index.TermVectorOffsetInfo[][] offsets -> b
    int[] EMPTY_TERM_POS -> c
    org.apache.lucene.index.TermVectorOffsetInfo[] getOffsets(int) -> a
    int[] getTermPositions(int) -> b
org.apache.lucene.index.SegmentTermPositions -> a.a.a.c.fk:
    org.apache.lucene.store.IndexInput proxStream -> k
    int proxCount -> l
    int position -> m
    int payloadLength -> n
    boolean needToLoadPayload -> o
    long lazySkipPointer -> p
    int lazySkipProxCount -> q
    boolean $assertionsDisabled -> j
    void seek(org.apache.lucene.index.TermInfo,org.apache.lucene.index.Term) -> a
    void close() -> close
    int nextPosition() -> d
    int readDeltaPosition() -> g
    void skippingDoc() -> f
    boolean next() -> c
    int read(int[],int[]) -> a
    void skipProx(long,int) -> a
    void skipPositions(int) -> b
    void skipPayload() -> h
    void lazySkip() -> i
    int getPayloadLength() -> e
    byte[] getPayload(byte[],int) -> a
org.apache.lucene.index.SegmentTermVector -> a.a.a.c.fl:
    java.lang.String field -> a
    java.lang.String[] terms -> b
    int[] termFreqs -> c
    java.lang.String getField() -> a
    java.lang.String toString() -> toString
    int size() -> b
    java.lang.String[] getTerms() -> c
    int[] getTermFrequencies() -> d
org.apache.lucene.index.SegmentWriteState -> a.a.a.c.fm:
    java.io.PrintStream infoStream -> a
    org.apache.lucene.store.Directory directory -> b
    java.lang.String segmentName -> c
    org.apache.lucene.index.FieldInfos fieldInfos -> d
    int numDocs -> e
    boolean hasVectors -> f
    org.apache.lucene.index.BufferedDeletes segDeletes -> g
    org.apache.lucene.util.BitVector deletedDocs -> h
    int termIndexInterval -> i
    int skipInterval -> j
    int maxSkipLevels -> k
org.apache.lucene.index.StaleReaderException -> a.a.a.c.fn:
org.apache.lucene.index.StoredFieldsWriter -> a.a.a.c.fo:
    org.apache.lucene.index.FieldsWriter fieldsWriter -> a
    org.apache.lucene.index.DocumentsWriter docWriter -> b
    org.apache.lucene.index.FieldInfos fieldInfos -> c
    int lastDocID -> d
    org.apache.lucene.index.StoredFieldsWriter$PerDoc[] docFreeList -> e
    int freeCount -> f
    int allocCount -> g
    boolean $assertionsDisabled -> h
    org.apache.lucene.index.StoredFieldsWriterPerThread addThread(org.apache.lucene.index.DocumentsWriter$DocState) -> a
    void flush(org.apache.lucene.index.SegmentWriteState) -> a
    void initFieldsWriter() -> c
    org.apache.lucene.index.StoredFieldsWriter$PerDoc getPerDoc() -> a
    void abort() -> b
    void fill(int) -> a
    void finishDocument(org.apache.lucene.index.StoredFieldsWriter$PerDoc) -> a
    void free(org.apache.lucene.index.StoredFieldsWriter$PerDoc) -> b
org.apache.lucene.index.StoredFieldsWriter$PerDoc -> a.a.a.c.fp:
    org.apache.lucene.index.DocumentsWriter$PerDocBuffer buffer -> a
    org.apache.lucene.store.RAMOutputStream fdt -> b
    int numStoredFields -> c
    org.apache.lucene.index.StoredFieldsWriter this$0 -> f
    void reset() -> d
    void abort() -> c
    long sizeInBytes() -> a
    void finish() -> b
org.apache.lucene.index.StoredFieldsWriterPerThread -> a.a.a.c.fq:
    org.apache.lucene.index.FieldsWriter localFieldsWriter -> a
    org.apache.lucene.index.StoredFieldsWriter storedFieldsWriter -> b
    org.apache.lucene.index.DocumentsWriter$DocState docState -> c
    org.apache.lucene.index.StoredFieldsWriter$PerDoc doc -> d
    boolean $assertionsDisabled -> e
    void startDocument() -> a
    void addField(org.apache.lucene.document.Fieldable,org.apache.lucene.index.FieldInfo) -> a
    org.apache.lucene.index.DocumentsWriter$DocWriter finishDocument() -> b
    void abort() -> c
org.apache.lucene.index.Term -> a.a.a.c.fr:
    java.lang.String field -> a
    java.lang.String text -> b
    java.lang.String field() -> a
    java.lang.String text() -> b
    org.apache.lucene.index.Term createTerm(java.lang.String) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int compareTo(org.apache.lucene.index.Term) -> a
    void set(java.lang.String,java.lang.String) -> a
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
org.apache.lucene.index.TermBuffer -> a.a.a.c.fs:
    java.lang.String field -> a
    org.apache.lucene.index.Term term -> b
    boolean preUTF8Strings -> c
    boolean dirty -> d
    org.apache.lucene.util.UnicodeUtil$UTF16Result text -> e
    org.apache.lucene.util.UnicodeUtil$UTF8Result bytes -> f
    int compareTo(org.apache.lucene.index.TermBuffer) -> a
    int compareChars(char[],int,char[],int) -> a
    void setPreUTF8Strings() -> a
    void read(org.apache.lucene.store.IndexInput,org.apache.lucene.index.FieldInfos) -> a
    void set(org.apache.lucene.index.Term) -> a
    void set(org.apache.lucene.index.TermBuffer) -> b
    void reset() -> b
    org.apache.lucene.index.Term toTerm() -> c
    java.lang.Object clone() -> clone
org.apache.lucene.index.TermDocs -> a.a.a.c.ft:
    void seek(org.apache.lucene.index.Term) -> a
    void seek(org.apache.lucene.index.TermEnum) -> a
    int doc() -> a
    int freq() -> b
    boolean next() -> c
    int read(int[],int[]) -> a
    boolean skipTo(int) -> a
    void close() -> close
org.apache.lucene.index.TermEnum -> a.a.a.c.fu:
    boolean next() -> a
    org.apache.lucene.index.Term term() -> b
    int docFreq() -> c
    void close() -> close
org.apache.lucene.index.TermFreqVector -> a.a.a.c.fv:
    java.lang.String getField() -> a
    int size() -> b
    java.lang.String[] getTerms() -> c
    int[] getTermFrequencies() -> d
org.apache.lucene.index.TermInfo -> a.a.a.c.fw:
    int docFreq -> a
    long freqPointer -> b
    long proxPointer -> c
    int skipOffset -> d
    void set(int,long,long,int) -> a
    void set(org.apache.lucene.index.TermInfo) -> a
org.apache.lucene.index.TermInfosReader -> a.a.a.c.fx:
    org.apache.lucene.store.Directory directory -> b
    java.lang.String segment -> c
    org.apache.lucene.index.FieldInfos fieldInfos -> d
    org.apache.lucene.util.CloseableThreadLocal threadResources -> e
    org.apache.lucene.index.SegmentTermEnum origEnum -> f
    long size -> g
    org.apache.lucene.index.TermInfosReaderIndex index -> h
    int indexLength -> i
    int totalIndexInterval -> j
    org.apache.lucene.util.DoubleBarrelLRUCache termsCache -> k
    boolean $assertionsDisabled -> a
    int getSkipInterval() -> a
    int getMaxSkipLevels() -> b
    void close() -> close
    org.apache.lucene.index.TermInfosReader$ThreadResources getThreadResources() -> d
    org.apache.lucene.index.TermInfo get(org.apache.lucene.index.Term) -> a
    org.apache.lucene.index.TermInfo get(org.apache.lucene.index.Term,boolean,org.apache.lucene.util.BytesRef) -> a
    boolean sameTermInfo(org.apache.lucene.index.TermInfo,org.apache.lucene.index.TermInfo,org.apache.lucene.index.SegmentTermEnum) -> a
    void ensureIndexIsRead() -> e
    org.apache.lucene.index.SegmentTermEnum terms() -> c
    org.apache.lucene.index.SegmentTermEnum terms(org.apache.lucene.index.Term) -> b
org.apache.lucene.index.TermInfosReader$1 -> a.a.a.c.fy:
org.apache.lucene.index.TermInfosReader$CloneableTerm -> a.a.a.c.fz:
    org.apache.lucene.index.Term term -> a
    java.lang.Object clone() -> clone
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.apache.lucene.index.TermInfosReader$TermInfoAndOrd -> a.a.a.c.ga:
    long termOrd -> e
    boolean $assertionsDisabled -> f
org.apache.lucene.index.TermInfosReader$ThreadResources -> a.a.a.c.gb:
    org.apache.lucene.index.SegmentTermEnum termEnum -> a
org.apache.lucene.index.TermInfosReaderIndex -> a.a.a.c.gc:
    org.apache.lucene.index.Term[] fields -> a
    int totalIndexInterval -> b
    java.util.Comparator comparator -> c
    org.apache.lucene.util.PagedBytes$PagedBytesDataInput dataInput -> d
    org.apache.lucene.util.packed.PackedInts$Reader indexToDataOffset -> e
    int indexSize -> f
    int skipInterval -> g
    int estimatePageBits(long) -> a
    void seekEnum(org.apache.lucene.index.SegmentTermEnum,int) -> a
    int getIndexOffset(org.apache.lucene.index.Term,org.apache.lucene.util.BytesRef) -> a
    int length() -> a
    int compareTo(org.apache.lucene.index.Term,org.apache.lucene.util.BytesRef,int) -> a
    int compareTo(org.apache.lucene.index.Term,org.apache.lucene.util.BytesRef,int,org.apache.lucene.util.PagedBytes$PagedBytesDataInput,org.apache.lucene.util.BytesRef) -> a
    int compareField(org.apache.lucene.index.Term,int,org.apache.lucene.util.PagedBytes$PagedBytesDataInput) -> a
org.apache.lucene.index.TermInfosWriter -> a.a.a.c.gd:
    org.apache.lucene.index.FieldInfos fieldInfos -> g
    org.apache.lucene.store.IndexOutput output -> h
    org.apache.lucene.index.TermInfo lastTi -> i
    long size -> j
    int indexInterval -> a
    int skipInterval -> b
    int maxSkipLevels -> c
    long lastIndexPointer -> k
    boolean isIndex -> l
    byte[] lastTermBytes -> m
    int lastTermBytesLength -> n
    int lastFieldNumber -> o
    org.apache.lucene.index.TermInfosWriter other -> p
    org.apache.lucene.util.UnicodeUtil$UTF8Result utf8Result -> q
    org.apache.lucene.util.UnicodeUtil$UTF16Result utf16Result1 -> d
    org.apache.lucene.util.UnicodeUtil$UTF16Result utf16Result2 -> e
    boolean $assertionsDisabled -> f
    void initialize(org.apache.lucene.store.Directory,java.lang.String,org.apache.lucene.index.FieldInfos,int,boolean) -> a
    boolean initUTF16Results() -> a
    int compareToLastTerm(int,byte[],int) -> a
    void add(int,byte[],int,org.apache.lucene.index.TermInfo) -> a
    void writeTerm(int,byte[],int) -> b
    void close() -> close
org.apache.lucene.index.TermPositionVector -> a.a.a.c.ge:
    int[] getTermPositions(int) -> b
    org.apache.lucene.index.TermVectorOffsetInfo[] getOffsets(int) -> a
org.apache.lucene.index.TermPositions -> a.a.a.c.gf:
    int nextPosition() -> d
    int getPayloadLength() -> e
    byte[] getPayload(byte[],int) -> a
org.apache.lucene.index.TermVectorMapper -> a.a.a.c.gg:
    boolean ignoringPositions -> a
    boolean ignoringOffsets -> b
    void setExpectations(java.lang.String,int,boolean,boolean) -> a
    void map(java.lang.String,int,org.apache.lucene.index.TermVectorOffsetInfo[],int[]) -> a
    boolean isIgnoringPositions() -> b
    boolean isIgnoringOffsets() -> c
    void setDocumentNumber(int) -> a
org.apache.lucene.index.TermVectorOffsetInfo -> a.a.a.c.gh:
    org.apache.lucene.index.TermVectorOffsetInfo[] EMPTY_OFFSET_INFO -> a
    int startOffset -> b
    int endOffset -> c
    int getEndOffset() -> a
    int getStartOffset() -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.apache.lucene.index.TermVectorsReader -> a.a.a.c.gi:
    org.apache.lucene.index.FieldInfos fieldInfos -> b
    org.apache.lucene.store.IndexInput tvx -> c
    org.apache.lucene.store.IndexInput tvd -> d
    org.apache.lucene.store.IndexInput tvf -> e
    int size -> f
    int numTotalDocs -> g
    int docStoreOffset -> h
    int format -> i
    boolean $assertionsDisabled -> a
    org.apache.lucene.store.IndexInput getTvdStream() -> a
    org.apache.lucene.store.IndexInput getTvfStream() -> b
    void seekTvx(int) -> b
    boolean canReadRawDocs() -> c
    void rawDocs(int[],int[],int,int) -> a
    int checkValidFormat(java.lang.String,org.apache.lucene.store.IndexInput) -> a
    void close() -> close
    java.lang.String[] readFields(int) -> c
    long[] readTvfPointers(int) -> d
    org.apache.lucene.index.TermFreqVector[] get(int) -> a
    org.apache.lucene.index.SegmentTermVector[] readTermVectors(int,java.lang.String[],long[]) -> a
    void readTermVector(java.lang.String,long,org.apache.lucene.index.TermVectorMapper) -> a
    java.lang.Object clone() -> clone
org.apache.lucene.index.TermVectorsTermsWriter -> a.a.a.c.gj:
    org.apache.lucene.index.DocumentsWriter docWriter -> a
    org.apache.lucene.index.TermVectorsTermsWriter$PerDoc[] docFreeList -> b
    int freeCount -> c
    org.apache.lucene.store.IndexOutput tvx -> d
    org.apache.lucene.store.IndexOutput tvd -> e
    org.apache.lucene.store.IndexOutput tvf -> f
    int lastDocID -> g
    boolean hasVectors -> h
    int allocCount -> i
    boolean $assertionsDisabled -> j
    org.apache.lucene.index.TermsHashConsumerPerThread addThread(org.apache.lucene.index.TermsHashPerThread) -> a
    void flush(java.util.Map,org.apache.lucene.index.SegmentWriteState) -> a
    org.apache.lucene.index.TermVectorsTermsWriter$PerDoc getPerDoc() -> b
    void fill(int) -> a
    void initTermVectorsWriter() -> c
    void finishDocument(org.apache.lucene.index.TermVectorsTermsWriter$PerDoc) -> a
    void abort() -> a
    void free(org.apache.lucene.index.TermVectorsTermsWriter$PerDoc) -> b
org.apache.lucene.index.TermVectorsTermsWriter$PerDoc -> a.a.a.c.gk:
    org.apache.lucene.index.DocumentsWriter$PerDocBuffer buffer -> a
    org.apache.lucene.store.RAMOutputStream perDocTvf -> b
    int numVectorFields -> c
    int[] fieldNumbers -> f
    long[] fieldPointers -> g
    org.apache.lucene.index.TermVectorsTermsWriter this$0 -> h
    void reset() -> d
    void abort() -> c
    void addField(int) -> a
    long sizeInBytes() -> a
    void finish() -> b
org.apache.lucene.index.TermVectorsTermsWriterPerField -> a.a.a.c.gl:
    org.apache.lucene.index.TermVectorsTermsWriterPerThread perThread -> a
    org.apache.lucene.index.TermsHashPerField termsHashPerField -> b
    org.apache.lucene.index.TermVectorsTermsWriter termsWriter -> c
    org.apache.lucene.index.FieldInfo fieldInfo -> d
    org.apache.lucene.index.DocumentsWriter$DocState docState -> e
    org.apache.lucene.index.FieldInvertState fieldState -> f
    boolean doVectors -> g
    boolean doVectorPositions -> h
    boolean doVectorOffsets -> i
    int maxNumPostings -> j
    org.apache.lucene.analysis.tokenattributes.OffsetAttribute offsetAttribute -> k
    boolean $assertionsDisabled -> l
    int getStreamCount() -> a
    boolean start(org.apache.lucene.document.Fieldable[],int) -> a
    void finish() -> b
    void shrinkHash() -> d
    void start(org.apache.lucene.document.Fieldable) -> a
    void newTerm(int) -> a
    void addTerm(int) -> b
    void skippingLongTerm() -> c
    org.apache.lucene.index.ParallelPostingsArray createPostingsArray(int) -> c
org.apache.lucene.index.TermVectorsTermsWriterPerField$TermVectorsPostingsArray -> a.a.a.c.gm:
    int[] freqs -> a
    int[] lastOffsets -> b
    int[] lastPositions -> c
    boolean $assertionsDisabled -> d
    org.apache.lucene.index.ParallelPostingsArray newInstance(int) -> a
    void copyTo(org.apache.lucene.index.ParallelPostingsArray,int) -> a
    int bytesPerPosting() -> a
org.apache.lucene.index.TermVectorsTermsWriterPerThread -> a.a.a.c.gn:
    org.apache.lucene.index.TermVectorsTermsWriter termsWriter -> a
    org.apache.lucene.index.TermsHashPerThread termsHashPerThread -> b
    org.apache.lucene.index.DocumentsWriter$DocState docState -> c
    org.apache.lucene.index.TermVectorsTermsWriter$PerDoc doc -> d
    org.apache.lucene.index.ByteSliceReader vectorSliceReader -> e
    org.apache.lucene.util.UnicodeUtil$UTF8Result[] utf8Results -> f
    java.lang.String lastVectorFieldName -> g
    boolean $assertionsDisabled -> h
    void startDocument() -> a
    org.apache.lucene.index.DocumentsWriter$DocWriter finishDocument() -> b
    org.apache.lucene.index.TermsHashConsumerPerField addField(org.apache.lucene.index.TermsHashPerField,org.apache.lucene.index.FieldInfo) -> a
    void abort() -> c
    boolean clearLastVectorFieldName() -> d
    boolean vectorFieldsInOrder(org.apache.lucene.index.FieldInfo) -> a
org.apache.lucene.index.TermVectorsWriter -> a.a.a.c.go:
    org.apache.lucene.store.IndexOutput tvx -> e
    org.apache.lucene.store.IndexOutput tvd -> f
    org.apache.lucene.store.IndexOutput tvf -> g
    org.apache.lucene.index.FieldInfos fieldInfos -> h
    org.apache.lucene.util.UnicodeUtil$UTF8Result[] utf8Results -> a
    java.lang.String segment -> b
    org.apache.lucene.store.Directory directory -> c
    boolean $assertionsDisabled -> d
    void addAllDocVectors(org.apache.lucene.index.TermFreqVector[]) -> a
    void addRawDocuments(org.apache.lucene.index.TermVectorsReader,int[],int[],int) -> a
    void finish(int) -> a
    void close() -> a
org.apache.lucene.index.TermsHash -> a.a.a.c.gp:
    org.apache.lucene.index.TermsHashConsumer consumer -> b
    org.apache.lucene.index.TermsHash nextTermsHash -> c
    org.apache.lucene.index.DocumentsWriter docWriter -> d
    boolean trackAllocations -> e
    org.apache.lucene.index.InvertedDocConsumerPerThread addThread(org.apache.lucene.index.DocInverterPerThread) -> a
    org.apache.lucene.index.TermsHashPerThread addThread(org.apache.lucene.index.DocInverterPerThread,org.apache.lucene.index.TermsHashPerThread) -> a
    void setFieldInfos(org.apache.lucene.index.FieldInfos) -> a
    void abort() -> a
    void flush(java.util.Map,org.apache.lucene.index.SegmentWriteState) -> a
    boolean freeRAM() -> b
org.apache.lucene.index.TermsHashConsumer -> a.a.a.c.gq:
    org.apache.lucene.index.FieldInfos fieldInfos -> k
    org.apache.lucene.index.TermsHashConsumerPerThread addThread(org.apache.lucene.index.TermsHashPerThread) -> a
    void flush(java.util.Map,org.apache.lucene.index.SegmentWriteState) -> a
    void abort() -> a
    void setFieldInfos(org.apache.lucene.index.FieldInfos) -> a
org.apache.lucene.index.TermsHashConsumerPerField -> a.a.a.c.gr:
    boolean start(org.apache.lucene.document.Fieldable[],int) -> a
    void finish() -> b
    void skippingLongTerm() -> c
    void start(org.apache.lucene.document.Fieldable) -> a
    void newTerm(int) -> a
    void addTerm(int) -> b
    int getStreamCount() -> a
    org.apache.lucene.index.ParallelPostingsArray createPostingsArray(int) -> c
org.apache.lucene.index.TermsHashConsumerPerThread -> a.a.a.c.gs:
    void startDocument() -> a
    org.apache.lucene.index.DocumentsWriter$DocWriter finishDocument() -> b
    org.apache.lucene.index.TermsHashConsumerPerField addField(org.apache.lucene.index.TermsHashPerField,org.apache.lucene.index.FieldInfo) -> a
    void abort() -> c
org.apache.lucene.index.TermsHashPerField -> a.a.a.c.gt:
    org.apache.lucene.index.TermsHashConsumerPerField consumer -> a
    org.apache.lucene.index.TermsHashPerField nextPerField -> b
    org.apache.lucene.index.TermsHashPerThread perThread -> c
    org.apache.lucene.index.DocumentsWriter$DocState docState -> d
    org.apache.lucene.index.FieldInvertState fieldState -> e
    org.apache.lucene.analysis.tokenattributes.CharTermAttribute termAtt -> f
    org.apache.lucene.index.CharBlockPool charPool -> g
    org.apache.lucene.index.IntBlockPool intPool -> h
    org.apache.lucene.index.ByteBlockPool bytePool -> i
    int streamCount -> j
    int numPostingInt -> k
    org.apache.lucene.index.FieldInfo fieldInfo -> l
    boolean postingsCompacted -> m
    int numPostings -> n
    int postingsHashSize -> s
    int postingsHashHalfSize -> t
    int postingsHashMask -> u
    int[] postingsHash -> v
    org.apache.lucene.index.ParallelPostingsArray postingsArray -> o
    boolean doCall -> w
    boolean doNextCall -> x
    int[] intUptos -> p
    int intUptoStart -> q
    boolean $assertionsDisabled -> r
    void close() -> d
    void initPostingsArray() -> g
    void bytesUsed(long) -> a
    void shrinkHash(int) -> a
    void reset() -> e
    void abort() -> c
    void growParallelPostingsArray() -> h
    void initReader(org.apache.lucene.index.ByteSliceReader,int,int) -> a
    void compactPostings() -> i
    int[] sortPostings() -> f
    boolean postingEquals(int,char[],int) -> a
    void start(org.apache.lucene.document.Fieldable) -> a
    boolean start(org.apache.lucene.document.Fieldable[],int) -> a
    void add(int) -> b
    void add() -> a
    void writeByte(int,byte) -> a
    void writeBytes(int,byte[],int,int) -> a
    void writeVInt(int,int) -> a
    void finish() -> b
    void rehashPostings(int) -> c
org.apache.lucene.index.TermsHashPerField$1 -> a.a.a.c.gu:
    int pivotTerm -> d
    int pivotBufPos -> e
    char[] pivotBuf -> f
    boolean $assertionsDisabled -> a
    int[] val$postingsHash -> b
    org.apache.lucene.index.TermsHashPerField this$0 -> c
    void swap(int,int) -> a
    int compare(int,int) -> b
    void setPivot(int) -> a
    int comparePivot(int) -> b
    int comparePostings(char[],int,char[],int) -> a
org.apache.lucene.index.TermsHashPerThread -> a.a.a.c.gv:
    org.apache.lucene.index.TermsHash termsHash -> a
    org.apache.lucene.index.TermsHashConsumerPerThread consumer -> b
    org.apache.lucene.index.TermsHashPerThread nextPerThread -> c
    org.apache.lucene.index.CharBlockPool charPool -> d
    org.apache.lucene.index.IntBlockPool intPool -> e
    org.apache.lucene.index.ByteBlockPool bytePool -> f
    boolean primary -> g
    org.apache.lucene.index.DocumentsWriter$DocState docState -> h
    org.apache.lucene.index.InvertedDocConsumerPerField addField(org.apache.lucene.index.DocInverterPerField,org.apache.lucene.index.FieldInfo) -> a
    void abort() -> c
    void startDocument() -> a
    org.apache.lucene.index.DocumentsWriter$DocWriter finishDocument() -> b
    void reset(boolean) -> a
org.apache.lucene.index.TieredMergePolicy -> a.a.a.c.gw:
    int maxMergeAtOnce -> b
    long maxMergedSegmentBytes -> c
    int maxMergeAtOnceExplicit -> d
    long floorSegmentBytes -> e
    double segsPerTier -> f
    double forceMergeDeletesPctAllowed -> g
    boolean useCompoundFile -> h
    double noCFSRatio -> i
    double reclaimDeletesWeight -> k
    java.util.Comparator segmentByteSizeDescending -> l
    boolean $assertionsDisabled -> a
    org.apache.lucene.index.MergePolicy$MergeSpecification findMerges(org.apache.lucene.index.SegmentInfos) -> a
    org.apache.lucene.index.TieredMergePolicy$MergeScore score(java.util.List,boolean,long) -> a
    org.apache.lucene.index.MergePolicy$MergeSpecification findForcedMerges(org.apache.lucene.index.SegmentInfos,int,java.util.Map) -> b
    boolean useCompoundFile(org.apache.lucene.index.SegmentInfos,org.apache.lucene.index.SegmentInfo) -> a
    void close() -> close
    boolean isMerged(org.apache.lucene.index.SegmentInfo) -> a
    long size(org.apache.lucene.index.SegmentInfo) -> b
    long floorSize(long) -> a
    boolean verbose() -> a
    void message(java.lang.String) -> a
    java.lang.String toString() -> toString
    long access$000(org.apache.lucene.index.TieredMergePolicy,org.apache.lucene.index.SegmentInfo) -> a
org.apache.lucene.index.TieredMergePolicy$1 -> a.a.a.c.gx:
    double val$finalMergeScore -> a
    double val$skew -> b
    double val$nonDelRatio -> c
    org.apache.lucene.index.TieredMergePolicy this$0 -> d
    double getScore() -> a
    java.lang.String getExplanation() -> b
org.apache.lucene.index.TieredMergePolicy$MergeScore -> a.a.a.c.gy:
    double getScore() -> a
    java.lang.String getExplanation() -> b
org.apache.lucene.index.TieredMergePolicy$SegmentByteSizeDescending -> a.a.a.c.gz:
    org.apache.lucene.index.TieredMergePolicy this$0 -> a
    int compare(org.apache.lucene.index.SegmentInfo,org.apache.lucene.index.SegmentInfo) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
org.apache.lucene.messages.Message -> a.a.a.d.a:
    java.lang.String getKey() -> a
    java.lang.String getLocalizedMessage(java.util.Locale) -> a
org.apache.lucene.messages.MessageImpl -> a.a.a.d.b:
    java.lang.String key -> a
    java.lang.Object[] arguments -> b
    java.lang.Object[] getArguments() -> b
    java.lang.String getKey() -> a
    java.lang.String getLocalizedMessage(java.util.Locale) -> a
    java.lang.String toString() -> toString
org.apache.lucene.messages.NLS -> a.a.a.d.c:
    java.util.Map bundles -> a
    java.lang.String getLocalizedMessage(java.lang.String) -> a
    java.lang.String getLocalizedMessage(java.lang.String,java.util.Locale) -> a
    java.lang.String getLocalizedMessage(java.lang.String,java.util.Locale,java.lang.Object[]) -> a
    void initializeMessages(java.lang.String,java.lang.Class) -> a
    java.lang.Object getResourceBundleObject(java.lang.String,java.util.Locale) -> b
    void load(java.lang.Class) -> a
    void loadfieldValue(java.lang.reflect.Field,boolean,java.lang.Class) -> a
    void validateMessage(java.lang.String,java.lang.Class) -> b
    void makeAccessible(java.lang.reflect.Field) -> a
org.apache.lucene.messages.NLS$1 -> a.a.a.d.d:
    java.lang.reflect.Field val$field -> a
    java.lang.Void run() -> a
    java.lang.Object run() -> run
org.apache.lucene.queryParser.CharStream -> a.a.a.e.a:
    char readChar() -> a
    int getEndColumn() -> b
    int getEndLine() -> c
    int getBeginColumn() -> d
    int getBeginLine() -> e
    void backup(int) -> a
    char BeginToken() -> f
    java.lang.String GetImage() -> g
org.apache.lucene.queryParser.FastCharStream -> a.a.a.e.b:
    char[] buffer -> a
    int bufferLength -> b
    int bufferPosition -> c
    int tokenStart -> d
    int bufferStart -> e
    java.io.Reader input -> f
    char readChar() -> a
    void refill() -> h
    char BeginToken() -> f
    void backup(int) -> a
    java.lang.String GetImage() -> g
    int getEndColumn() -> b
    int getEndLine() -> c
    int getBeginColumn() -> d
    int getBeginLine() -> e
org.apache.lucene.queryParser.ParseException -> a.a.a.e.c:
    org.apache.lucene.queryParser.Token currentToken -> a
    int[][] expectedTokenSequences -> b
    java.lang.String[] tokenImage -> c
    java.lang.String eol -> d
    java.lang.String initialise(org.apache.lucene.queryParser.Token,int[][],java.lang.String[]) -> a
    java.lang.String add_escapes(java.lang.String) -> a
org.apache.lucene.queryParser.QueryParser -> a.a.a.e.d:
    org.apache.lucene.queryParser.QueryParser$Operator AND_OPERATOR -> a
    org.apache.lucene.queryParser.QueryParser$Operator OR_OPERATOR -> b
    org.apache.lucene.queryParser.QueryParser$Operator operator -> u
    boolean lowercaseExpandedTerms -> c
    org.apache.lucene.search.MultiTermQuery$RewriteMethod multiTermRewriteMethod -> d
    boolean allowLeadingWildcard -> e
    boolean enablePositionIncrements -> f
    org.apache.lucene.analysis.Analyzer analyzer -> g
    java.lang.String field -> h
    int phraseSlop -> i
    float fuzzyMinSim -> j
    int fuzzyPrefixLength -> k
    java.util.Locale locale -> l
    org.apache.lucene.document.DateTools$Resolution dateResolution -> m
    java.util.Map fieldToDateResolution -> n
    java.text.Collator rangeCollator -> o
    org.apache.lucene.util.VirtualMethod getFieldQueryMethod -> v
    org.apache.lucene.util.VirtualMethod getFieldQueryWithQuotedMethod -> w
    boolean hasNewAPI -> x
    boolean autoGeneratePhraseQueries -> y
    org.apache.lucene.queryParser.QueryParserTokenManager token_source -> p
    org.apache.lucene.queryParser.Token token -> q
    org.apache.lucene.queryParser.Token jj_nt -> r
    int jj_ntk -> z
    org.apache.lucene.queryParser.Token jj_scanpos -> A
    org.apache.lucene.queryParser.Token jj_lastpos -> B
    int jj_la -> C
    int jj_gen -> D
    int[] jj_la1 -> E
    int[] jj_la1_0 -> F
    int[] jj_la1_1 -> G
    org.apache.lucene.queryParser.QueryParser$JJCalls[] jj_2_rtns -> H
    boolean jj_rescan -> I
    int jj_gc -> J
    org.apache.lucene.queryParser.QueryParser$LookaheadSuccess jj_ls -> K
    java.util.List jj_expentries -> L
    int[] jj_expentry -> M
    int jj_kind -> N
    int[] jj_lasttokens -> O
    int jj_endpos -> P
    boolean $assertionsDisabled -> s
    org.apache.lucene.search.Query parse(java.lang.String) -> a
    void setAutoGeneratePhraseQueries(boolean) -> a
    void setPhraseSlop(int) -> a
    org.apache.lucene.document.DateTools$Resolution getDateResolution(java.lang.String) -> b
    void addClause(java.util.List,int,int,org.apache.lucene.search.Query) -> a
    org.apache.lucene.search.Query getFieldQuery(java.lang.String,java.lang.String) -> a
    org.apache.lucene.search.Query getFieldQuery(java.lang.String,java.lang.String,boolean) -> a
    org.apache.lucene.search.Query getFieldQuery(java.lang.String,java.lang.String,int) -> a
    org.apache.lucene.search.Query getRangeQuery(java.lang.String,java.lang.String,java.lang.String,boolean) -> a
    org.apache.lucene.search.BooleanQuery newBooleanQuery(boolean) -> b
    org.apache.lucene.search.BooleanClause newBooleanClause(org.apache.lucene.search.Query,org.apache.lucene.search.BooleanClause$Occur) -> a
    org.apache.lucene.search.Query newTermQuery(org.apache.lucene.index.Term) -> a
    org.apache.lucene.search.PhraseQuery newPhraseQuery() -> a
    org.apache.lucene.search.MultiPhraseQuery newMultiPhraseQuery() -> b
    org.apache.lucene.search.Query newPrefixQuery(org.apache.lucene.index.Term) -> b
    org.apache.lucene.search.Query newFuzzyQuery(org.apache.lucene.index.Term,float,int) -> a
    org.apache.lucene.search.Query newRangeQuery(java.lang.String,java.lang.String,java.lang.String,boolean) -> b
    org.apache.lucene.search.Query newMatchAllDocsQuery() -> c
    org.apache.lucene.search.Query newWildcardQuery(org.apache.lucene.index.Term) -> c
    org.apache.lucene.search.Query getBooleanQuery(java.util.List) -> a
    org.apache.lucene.search.Query getBooleanQuery(java.util.List,boolean) -> a
    org.apache.lucene.search.Query getWildcardQuery(java.lang.String,java.lang.String) -> b
    org.apache.lucene.search.Query getPrefixQuery(java.lang.String,java.lang.String) -> c
    org.apache.lucene.search.Query getFuzzyQuery(java.lang.String,java.lang.String,float) -> a
    java.lang.String discardEscapeChar(java.lang.String) -> g
    int hexToInt(char) -> a
    int Conjunction() -> d
    int Modifiers() -> e
    org.apache.lucene.search.Query TopLevelQuery(java.lang.String) -> c
    org.apache.lucene.search.Query Query(java.lang.String) -> d
    org.apache.lucene.search.Query Clause(java.lang.String) -> e
    org.apache.lucene.search.Query Term(java.lang.String) -> f
    boolean jj_2_1(int) -> b
    boolean jj_3_1() -> g
    boolean jj_3R_3() -> h
    boolean jj_3R_2() -> i
    void jj_la1_init_0() -> j
    void jj_la1_init_1() -> k
    void ReInit(org.apache.lucene.queryParser.CharStream) -> a
    org.apache.lucene.queryParser.Token jj_consume_token(int) -> c
    boolean jj_scan_token(int) -> d
    int jj_ntk() -> l
    void jj_add_error_token(int,int) -> a
    org.apache.lucene.queryParser.ParseException generateParseException() -> f
    void jj_rescan_token() -> m
    void jj_save(int,int) -> b
org.apache.lucene.queryParser.QueryParser$1 -> a.a.a.e.e:
org.apache.lucene.queryParser.QueryParser$JJCalls -> a.a.a.e.f:
    int gen -> a
    org.apache.lucene.queryParser.Token first -> b
    int arg -> c
    org.apache.lucene.queryParser.QueryParser$JJCalls next -> d
org.apache.lucene.queryParser.QueryParser$LookaheadSuccess -> a.a.a.e.g:
org.apache.lucene.queryParser.QueryParser$Operator -> a.a.a.e.h:
    org.apache.lucene.queryParser.QueryParser$Operator OR -> a
    org.apache.lucene.queryParser.QueryParser$Operator AND -> b
    org.apache.lucene.queryParser.QueryParser$Operator[] $VALUES -> c
    org.apache.lucene.queryParser.QueryParser$Operator[] values() -> values
    org.apache.lucene.queryParser.QueryParser$Operator valueOf(java.lang.String) -> valueOf
org.apache.lucene.queryParser.QueryParserConstants -> a.a.a.e.i:
    java.lang.String[] tokenImage -> t
org.apache.lucene.queryParser.QueryParserTokenManager -> a.a.a.e.j:
    java.io.PrintStream debugStream -> a
    long[] jjbitVec0 -> b
    long[] jjbitVec1 -> c
    long[] jjbitVec3 -> d
    long[] jjbitVec4 -> e
    int[] jjnextStates -> f
    java.lang.String[] jjstrLiteralImages -> g
    java.lang.String[] lexStateNames -> h
    int[] jjnewLexState -> i
    long[] jjtoToken -> j
    long[] jjtoSkip -> k
    org.apache.lucene.queryParser.CharStream input_stream -> l
    int[] jjrounds -> u
    int[] jjstateSet -> v
    char curChar -> m
    int curLexState -> n
    int defaultLexState -> o
    int jjnewStateCnt -> p
    int jjround -> q
    int jjmatchedPos -> r
    int jjmatchedKind -> s
    int jjStopAtPos(int,int) -> a
    int jjMoveStringLiteralDfa0_3() -> c
    int jjStartNfaWithStates_3(int,int,int) -> a
    int jjMoveNfa_3(int,int) -> b
    int jjStopStringLiteralDfa_1(int,long) -> a
    int jjStartNfa_1(int,long) -> b
    int jjMoveStringLiteralDfa0_1() -> d
    int jjMoveStringLiteralDfa1_1(long) -> a
    int jjStartNfaWithStates_1(int,int,int) -> b
    int jjMoveNfa_1(int,int) -> c
    int jjMoveStringLiteralDfa0_0() -> e
    int jjMoveNfa_0(int,int) -> d
    int jjStopStringLiteralDfa_2(int,long) -> c
    int jjStartNfa_2(int,long) -> d
    int jjMoveStringLiteralDfa0_2() -> f
    int jjMoveStringLiteralDfa1_2(long) -> b
    int jjStartNfaWithStates_2(int,int,int) -> c
    int jjMoveNfa_2(int,int) -> e
    boolean jjCanMove_0(int,int,int,long,long) -> a
    boolean jjCanMove_1(int,int,int,long,long) -> b
    boolean jjCanMove_2(int,int,int,long,long) -> c
    void ReInit(org.apache.lucene.queryParser.CharStream) -> a
    void ReInitRounds() -> g
    org.apache.lucene.queryParser.Token jjFillToken() -> a
    org.apache.lucene.queryParser.Token getNextToken() -> b
    void jjCheckNAdd(int) -> a
    void jjAddStates(int,int) -> f
    void jjCheckNAddTwoStates(int,int) -> g
    void jjCheckNAddStates(int,int) -> h
org.apache.lucene.queryParser.Token -> a.a.a.e.k:
    int kind -> a
    int beginLine -> b
    int beginColumn -> c
    int endLine -> d
    int endColumn -> e
    java.lang.String image -> f
    org.apache.lucene.queryParser.Token next -> g
    java.lang.String toString() -> toString
    org.apache.lucene.queryParser.Token newToken(int,java.lang.String) -> a
org.apache.lucene.queryParser.TokenMgrError -> a.a.a.e.l:
    int errorCode -> a
    java.lang.String addEscapes(java.lang.String) -> a
    java.lang.String LexicalError(boolean,int,int,int,java.lang.String,char) -> a
    java.lang.String getMessage() -> getMessage
org.apache.lucene.queryParser.core.QueryNodeError -> a.a.a.e.a.a:
    org.apache.lucene.messages.Message message -> a
org.apache.lucene.queryParser.core.QueryNodeException -> a.a.a.e.a.b:
    org.apache.lucene.messages.Message message -> a
    java.lang.String getMessage() -> getMessage
    java.lang.String getLocalizedMessage() -> getLocalizedMessage
    java.lang.String getLocalizedMessage(java.util.Locale) -> a
    java.lang.String toString() -> toString
org.apache.lucene.queryParser.core.QueryNodeParseException -> a.a.a.e.a.c:
    java.lang.CharSequence query -> b
    int beginColumn -> c
    int beginLine -> d
    java.lang.String errorToken -> e
    void setQuery(java.lang.CharSequence) -> a
    void setNonLocalizedMessage(org.apache.lucene.messages.Message) -> a
org.apache.lucene.queryParser.core.QueryParserHelper -> a.a.a.e.a.d:
    org.apache.lucene.queryParser.core.processors.QueryNodeProcessor processor -> a
    org.apache.lucene.queryParser.core.parser.SyntaxParser syntaxParser -> b
    org.apache.lucene.queryParser.core.builders.QueryBuilder builder -> c
    org.apache.lucene.queryParser.core.config.QueryConfigHandler config -> d
    org.apache.lucene.queryParser.core.processors.QueryNodeProcessor getQueryNodeProcessor() -> a
    org.apache.lucene.queryParser.core.config.QueryConfigHandler getQueryConfigHandler() -> b
    org.apache.lucene.queryParser.core.builders.QueryBuilder getQueryBuilder() -> c
    org.apache.lucene.queryParser.core.parser.SyntaxParser getSyntaxParser() -> d
    java.lang.Object parse(java.lang.String,java.lang.String) -> a
org.apache.lucene.queryParser.core.builders.QueryBuilder -> a.a.a.e.a.a.a:
    java.lang.Object build(org.apache.lucene.queryParser.core.nodes.QueryNode) -> a
org.apache.lucene.queryParser.core.builders.QueryTreeBuilder -> a.a.a.e.a.a.b:
    java.lang.String QUERY_TREE_BUILDER_TAGID -> a
    java.util.HashMap queryNodeBuilders -> b
    java.util.HashMap fieldNameBuilders -> c
    void setBuilder(java.lang.Class,org.apache.lucene.queryParser.core.builders.QueryBuilder) -> a
    void process(org.apache.lucene.queryParser.core.nodes.QueryNode) -> b
    org.apache.lucene.queryParser.core.builders.QueryBuilder getBuilder(org.apache.lucene.queryParser.core.nodes.QueryNode) -> c
    void processNode(org.apache.lucene.queryParser.core.nodes.QueryNode,org.apache.lucene.queryParser.core.builders.QueryBuilder) -> a
    org.apache.lucene.queryParser.core.builders.QueryBuilder getQueryBuilder(java.lang.Class) -> a
    java.lang.Object build(org.apache.lucene.queryParser.core.nodes.QueryNode) -> a
org.apache.lucene.queryParser.core.config.AbstractQueryConfig -> a.a.a.e.a.b.a:
    java.util.HashMap configMap -> a
    java.lang.Object get(org.apache.lucene.queryParser.core.config.ConfigurationKey) -> a
    java.lang.Object get(org.apache.lucene.queryParser.core.config.ConfigurationKey,java.lang.Object) -> a
    boolean has(org.apache.lucene.queryParser.core.config.ConfigurationKey) -> b
    void set(org.apache.lucene.queryParser.core.config.ConfigurationKey,java.lang.Object) -> b
    org.apache.lucene.util.Attribute addAttribute(java.lang.Class) -> a
    boolean unset(org.apache.lucene.queryParser.core.config.ConfigurationKey) -> c
org.apache.lucene.queryParser.core.config.ConfigAttribute -> a.a.a.e.a.b.b:
    void setQueryConfigHandler(org.apache.lucene.queryParser.core.config.AbstractQueryConfig) -> a
org.apache.lucene.queryParser.core.config.ConfigurationKey -> a.a.a.e.a.b.c:
    org.apache.lucene.queryParser.core.config.ConfigurationKey newInstance() -> a
org.apache.lucene.queryParser.core.config.FieldConfig -> a.a.a.e.a.b.d:
    java.lang.String fieldName -> a
    java.lang.String getField() -> a
    java.lang.String toString() -> toString
org.apache.lucene.queryParser.core.config.FieldConfigListener -> a.a.a.e.a.b.e:
    void buildFieldConfig(org.apache.lucene.queryParser.core.config.FieldConfig) -> a
org.apache.lucene.queryParser.core.config.QueryConfigHandler -> a.a.a.e.a.b.f:
    java.util.LinkedList listeners -> a
    org.apache.lucene.queryParser.core.config.FieldConfig getFieldConfig(java.lang.String) -> a
    void addFieldConfigListener(org.apache.lucene.queryParser.core.config.FieldConfigListener) -> a
org.apache.lucene.queryParser.core.messages.QueryParserMessages -> a.a.a.e.a.c.a:
    java.lang.String BUNDLE_NAME -> p
    java.lang.String INVALID_SYNTAX -> a
    java.lang.String INVALID_SYNTAX_CANNOT_PARSE -> b
    java.lang.String INVALID_SYNTAX_FUZZY_LIMITS -> c
    java.lang.String INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION -> d
    java.lang.String INVALID_SYNTAX_ESCAPE_CHARACTER -> e
    java.lang.String INVALID_SYNTAX_ESCAPE_NONE_HEX_UNICODE -> f
    java.lang.String NODE_ACTION_NOT_SUPPORTED -> g
    java.lang.String PARAMETER_VALUE_NOT_SUPPORTED -> h
    java.lang.String LUCENE_QUERY_CONVERSION_ERROR -> i
    java.lang.String EMPTY_MESSAGE -> j
    java.lang.String TOO_MANY_BOOLEAN_CLAUSES -> k
    java.lang.String LEADING_WILDCARD_NOT_ALLOWED -> l
    java.lang.String COULD_NOT_PARSE_NUMBER -> m
    java.lang.String NUMBER_CLASS_NOT_SUPPORTED_BY_NUMERIC_RANGE_QUERY -> n
    java.lang.String UNSUPPORTED_NUMERIC_DATA_TYPE -> o
org.apache.lucene.queryParser.core.nodes.AndQueryNode -> a.a.a.e.a.d.a:
    java.lang.String toString() -> toString
    java.lang.CharSequence toQueryString(org.apache.lucene.queryParser.core.parser.EscapeQuerySyntax) -> a
org.apache.lucene.queryParser.core.nodes.BooleanQueryNode -> a.a.a.e.a.d.b:
    java.lang.String toString() -> toString
    java.lang.CharSequence toQueryString(org.apache.lucene.queryParser.core.parser.EscapeQuerySyntax) -> a
    org.apache.lucene.queryParser.core.nodes.QueryNode cloneTree() -> a
org.apache.lucene.queryParser.core.nodes.BoostQueryNode -> a.a.a.e.a.d.c:
    float value -> a
    org.apache.lucene.queryParser.core.nodes.QueryNode getChild() -> b
    float getValue() -> c
    java.lang.CharSequence getValueString() -> d
    java.lang.String toString() -> toString
    java.lang.CharSequence toQueryString(org.apache.lucene.queryParser.core.parser.EscapeQuerySyntax) -> a
    org.apache.lucene.queryParser.core.nodes.QueryNode cloneTree() -> a
org.apache.lucene.queryParser.core.nodes.DeletedQueryNode -> a.a.a.e.a.d.d:
    java.lang.CharSequence toQueryString(org.apache.lucene.queryParser.core.parser.EscapeQuerySyntax) -> a
    java.lang.String toString() -> toString
    org.apache.lucene.queryParser.core.nodes.QueryNode cloneTree() -> a
org.apache.lucene.queryParser.core.nodes.FieldQueryNode -> a.a.a.e.a.d.e:
    java.lang.CharSequence field -> a
    java.lang.CharSequence text -> b
    int begin -> c
    int end -> d
    int positionIncrement -> e
    java.lang.CharSequence getTermEscaped(org.apache.lucene.queryParser.core.parser.EscapeQuerySyntax) -> b
    java.lang.CharSequence getTermEscapeQuoted(org.apache.lucene.queryParser.core.parser.EscapeQuerySyntax) -> c
    java.lang.CharSequence toQueryString(org.apache.lucene.queryParser.core.parser.EscapeQuerySyntax) -> a
    java.lang.String toString() -> toString
    java.lang.String getTextAsString() -> b
    java.lang.String getFieldAsString() -> c
    int getBegin() -> d
    int getEnd() -> e
    java.lang.CharSequence getField() -> f
    void setField(java.lang.CharSequence) -> a
    int getPositionIncrement() -> g
    void setPositionIncrement(int) -> a
    java.lang.CharSequence getText() -> h
    void setText(java.lang.CharSequence) -> b
    org.apache.lucene.queryParser.core.nodes.FieldQueryNode cloneTree() -> i
    org.apache.lucene.queryParser.core.nodes.QueryNode cloneTree() -> a
org.apache.lucene.queryParser.core.nodes.FieldValuePairQueryNode -> a.a.a.e.a.d.f:
org.apache.lucene.queryParser.core.nodes.FieldableNode -> a.a.a.e.a.d.g:
    java.lang.CharSequence getField() -> f
    void setField(java.lang.CharSequence) -> a
org.apache.lucene.queryParser.core.nodes.FuzzyQueryNode -> a.a.a.e.a.d.h:
    float similarity -> g
    int prefixLength -> h
    void setPrefixLength(int) -> b
    int getPrefixLength() -> j
    java.lang.CharSequence toQueryString(org.apache.lucene.queryParser.core.parser.EscapeQuerySyntax) -> a
    java.lang.String toString() -> toString
    void setSimilarity(float) -> a
    org.apache.lucene.queryParser.core.nodes.FuzzyQueryNode cloneTree() -> k
    float getSimilarity() -> l
    org.apache.lucene.queryParser.core.nodes.FieldQueryNode cloneTree() -> i
    org.apache.lucene.queryParser.core.nodes.QueryNode cloneTree() -> a
org.apache.lucene.queryParser.core.nodes.GroupQueryNode -> a.a.a.e.a.d.i:
    org.apache.lucene.queryParser.core.nodes.QueryNode getChild() -> b
    java.lang.String toString() -> toString
    java.lang.CharSequence toQueryString(org.apache.lucene.queryParser.core.parser.EscapeQuerySyntax) -> a
    org.apache.lucene.queryParser.core.nodes.QueryNode cloneTree() -> a
org.apache.lucene.queryParser.core.nodes.MatchAllDocsQueryNode -> a.a.a.e.a.d.j:
    java.lang.String toString() -> toString
    java.lang.CharSequence toQueryString(org.apache.lucene.queryParser.core.parser.EscapeQuerySyntax) -> a
    org.apache.lucene.queryParser.core.nodes.MatchAllDocsQueryNode cloneTree() -> b
    org.apache.lucene.queryParser.core.nodes.QueryNode cloneTree() -> a
org.apache.lucene.queryParser.core.nodes.MatchNoDocsQueryNode -> a.a.a.e.a.d.k:
    java.lang.String toString() -> toString
org.apache.lucene.queryParser.core.nodes.ModifierQueryNode -> a.a.a.e.a.d.l:
    org.apache.lucene.queryParser.core.nodes.ModifierQueryNode$Modifier modifier -> a
    org.apache.lucene.queryParser.core.nodes.QueryNode getChild() -> b
    org.apache.lucene.queryParser.core.nodes.ModifierQueryNode$Modifier getModifier() -> c
    java.lang.String toString() -> toString
    java.lang.CharSequence toQueryString(org.apache.lucene.queryParser.core.parser.EscapeQuerySyntax) -> a
    org.apache.lucene.queryParser.core.nodes.QueryNode cloneTree() -> a
org.apache.lucene.queryParser.core.nodes.ModifierQueryNode$1 -> a.a.a.e.a.d.m:
    int[] $SwitchMap$org$apache$lucene$queryParser$core$nodes$ModifierQueryNode$Modifier -> a
org.apache.lucene.queryParser.core.nodes.ModifierQueryNode$Modifier -> a.a.a.e.a.d.n:
    org.apache.lucene.queryParser.core.nodes.ModifierQueryNode$Modifier MOD_NONE -> a
    org.apache.lucene.queryParser.core.nodes.ModifierQueryNode$Modifier MOD_NOT -> b
    org.apache.lucene.queryParser.core.nodes.ModifierQueryNode$Modifier MOD_REQ -> c
    org.apache.lucene.queryParser.core.nodes.ModifierQueryNode$Modifier[] $VALUES -> d
    org.apache.lucene.queryParser.core.nodes.ModifierQueryNode$Modifier[] values() -> values
    org.apache.lucene.queryParser.core.nodes.ModifierQueryNode$Modifier valueOf(java.lang.String) -> valueOf
    java.lang.String toString() -> toString
    java.lang.String toDigitString() -> a
    java.lang.String toLargeString() -> b
org.apache.lucene.queryParser.core.nodes.NoTokenFoundQueryNode -> a.a.a.e.a.d.o:
    java.lang.CharSequence toQueryString(org.apache.lucene.queryParser.core.parser.EscapeQuerySyntax) -> a
    java.lang.String toString() -> toString
    org.apache.lucene.queryParser.core.nodes.QueryNode cloneTree() -> a
org.apache.lucene.queryParser.core.nodes.OrQueryNode -> a.a.a.e.a.d.p:
    java.lang.String toString() -> toString
    java.lang.CharSequence toQueryString(org.apache.lucene.queryParser.core.parser.EscapeQuerySyntax) -> a
org.apache.lucene.queryParser.core.nodes.ParametricQueryNode -> a.a.a.e.a.d.q:
    org.apache.lucene.queryParser.core.nodes.ParametricQueryNode$CompareOperator operator -> g
    java.lang.CharSequence toQueryString(org.apache.lucene.queryParser.core.parser.EscapeQuerySyntax) -> a
    java.lang.String toString() -> toString
    org.apache.lucene.queryParser.core.nodes.ParametricQueryNode cloneTree() -> j
    org.apache.lucene.queryParser.core.nodes.ParametricQueryNode$CompareOperator getOperator() -> k
    org.apache.lucene.queryParser.core.nodes.FieldQueryNode cloneTree() -> i
    org.apache.lucene.queryParser.core.nodes.QueryNode cloneTree() -> a
org.apache.lucene.queryParser.core.nodes.ParametricQueryNode$1 -> a.a.a.e.a.d.r:
org.apache.lucene.queryParser.core.nodes.ParametricQueryNode$CompareOperator -> a.a.a.e.a.d.s:
    org.apache.lucene.queryParser.core.nodes.ParametricQueryNode$CompareOperator LE -> a
    org.apache.lucene.queryParser.core.nodes.ParametricQueryNode$CompareOperator LT -> b
    org.apache.lucene.queryParser.core.nodes.ParametricQueryNode$CompareOperator GE -> c
    org.apache.lucene.queryParser.core.nodes.ParametricQueryNode$CompareOperator GT -> d
    org.apache.lucene.queryParser.core.nodes.ParametricQueryNode$CompareOperator EQ -> e
    org.apache.lucene.queryParser.core.nodes.ParametricQueryNode$CompareOperator NE -> f
    org.apache.lucene.queryParser.core.nodes.ParametricQueryNode$CompareOperator[] $VALUES -> g
    org.apache.lucene.queryParser.core.nodes.ParametricQueryNode$CompareOperator[] values() -> values
    org.apache.lucene.queryParser.core.nodes.ParametricQueryNode$CompareOperator valueOf(java.lang.String) -> valueOf
org.apache.lucene.queryParser.core.nodes.ParametricQueryNode$CompareOperator$1 -> a.a.a.e.a.d.t:
    java.lang.String toString() -> toString
org.apache.lucene.queryParser.core.nodes.ParametricQueryNode$CompareOperator$2 -> a.a.a.e.a.d.u:
    java.lang.String toString() -> toString
org.apache.lucene.queryParser.core.nodes.ParametricQueryNode$CompareOperator$3 -> a.a.a.e.a.d.v:
    java.lang.String toString() -> toString
org.apache.lucene.queryParser.core.nodes.ParametricQueryNode$CompareOperator$4 -> a.a.a.e.a.d.w:
    java.lang.String toString() -> toString
org.apache.lucene.queryParser.core.nodes.ParametricQueryNode$CompareOperator$5 -> a.a.a.e.a.d.x:
    java.lang.String toString() -> toString
org.apache.lucene.queryParser.core.nodes.ParametricQueryNode$CompareOperator$6 -> a.a.a.e.a.d.y:
    java.lang.String toString() -> toString
org.apache.lucene.queryParser.core.nodes.ParametricRangeQueryNode -> a.a.a.e.a.d.z:
    org.apache.lucene.queryParser.core.nodes.ParametricQueryNode getUpperBound() -> b
    org.apache.lucene.queryParser.core.nodes.ParametricQueryNode getLowerBound() -> c
    java.lang.CharSequence toQueryString(org.apache.lucene.queryParser.core.parser.EscapeQuerySyntax) -> a
    java.lang.CharSequence getField() -> f
    java.lang.String toString() -> toString
    org.apache.lucene.queryParser.core.nodes.ParametricRangeQueryNode cloneTree() -> d
    void setField(java.lang.CharSequence) -> a
    org.apache.lucene.queryParser.core.nodes.QueryNode cloneTree() -> a
org.apache.lucene.queryParser.core.nodes.QueryNode -> a.a.a.e.a.d.aa:
    java.lang.CharSequence toQueryString(org.apache.lucene.queryParser.core.parser.EscapeQuerySyntax) -> a
    java.util.List getChildren() -> m
    boolean isLeaf() -> n
    boolean containsTag(java.lang.String) -> a
    java.lang.Object getTag(java.lang.String) -> b
    org.apache.lucene.queryParser.core.nodes.QueryNode getParent() -> o
    org.apache.lucene.queryParser.core.nodes.QueryNode cloneTree() -> a
    void set(java.util.List) -> a
    void setTag(java.lang.String,java.lang.Object) -> a
org.apache.lucene.queryParser.core.nodes.QueryNodeImpl -> a.a.a.e.a.d.ab:
    boolean isLeaf -> a
    java.util.Hashtable tags -> b
    java.util.List clauses -> c
    org.apache.lucene.queryParser.core.nodes.QueryNode parent -> d
    boolean toQueryStringIgnoreFields -> f
    void allocate() -> p
    void add(org.apache.lucene.queryParser.core.nodes.QueryNode) -> a
    boolean isLeaf() -> n
    void set(java.util.List) -> a
    org.apache.lucene.queryParser.core.nodes.QueryNode cloneTree() -> a
    java.lang.Object clone() -> clone
    void setLeaf(boolean) -> a
    java.util.List getChildren() -> m
    void setTag(java.lang.String,java.lang.Object) -> a
    boolean containsTag(java.lang.String) -> a
    java.lang.Object getTag(java.lang.String) -> b
    void setParent(org.apache.lucene.queryParser.core.nodes.QueryNode) -> b
    org.apache.lucene.queryParser.core.nodes.QueryNode getParent() -> o
    boolean isRoot() -> q
    boolean isDefaultField(java.lang.CharSequence) -> c
    java.lang.String toString() -> toString
org.apache.lucene.queryParser.core.nodes.QuotedFieldQueryNode -> a.a.a.e.a.d.ac:
    java.lang.CharSequence toQueryString(org.apache.lucene.queryParser.core.parser.EscapeQuerySyntax) -> a
    java.lang.String toString() -> toString
    org.apache.lucene.queryParser.core.nodes.QuotedFieldQueryNode cloneTree() -> j
    org.apache.lucene.queryParser.core.nodes.FieldQueryNode cloneTree() -> i
    org.apache.lucene.queryParser.core.nodes.QueryNode cloneTree() -> a
org.apache.lucene.queryParser.core.nodes.RangeQueryNode -> a.a.a.e.a.d.ad:
org.apache.lucene.queryParser.core.nodes.SlopQueryNode -> a.a.a.e.a.d.ae:
    int value -> a
    org.apache.lucene.queryParser.core.nodes.QueryNode getChild() -> b
    int getValue() -> c
    java.lang.CharSequence getValueString() -> d
    java.lang.String toString() -> toString
    java.lang.CharSequence toQueryString(org.apache.lucene.queryParser.core.parser.EscapeQuerySyntax) -> a
    org.apache.lucene.queryParser.core.nodes.QueryNode cloneTree() -> a
    java.lang.CharSequence getField() -> f
    void setField(java.lang.CharSequence) -> a
org.apache.lucene.queryParser.core.nodes.TextableQueryNode -> a.a.a.e.a.d.af:
org.apache.lucene.queryParser.core.nodes.TokenizedPhraseQueryNode -> a.a.a.e.a.d.ag:
    java.lang.String toString() -> toString
    java.lang.CharSequence toQueryString(org.apache.lucene.queryParser.core.parser.EscapeQuerySyntax) -> a
    org.apache.lucene.queryParser.core.nodes.QueryNode cloneTree() -> a
    java.lang.CharSequence getField() -> f
    void setField(java.lang.CharSequence) -> a
org.apache.lucene.queryParser.core.nodes.ValueQueryNode -> a.a.a.e.a.d.ah:
org.apache.lucene.queryParser.core.parser.EscapeQuerySyntax -> a.a.a.e.a.e.a:
    java.lang.CharSequence escape(java.lang.CharSequence,java.util.Locale,org.apache.lucene.queryParser.core.parser.EscapeQuerySyntax$Type) -> a
org.apache.lucene.queryParser.core.parser.EscapeQuerySyntax$Type -> a.a.a.e.a.e.b:
    org.apache.lucene.queryParser.core.parser.EscapeQuerySyntax$Type STRING -> a
    org.apache.lucene.queryParser.core.parser.EscapeQuerySyntax$Type NORMAL -> b
    org.apache.lucene.queryParser.core.parser.EscapeQuerySyntax$Type[] $VALUES -> c
    org.apache.lucene.queryParser.core.parser.EscapeQuerySyntax$Type[] values() -> values
    org.apache.lucene.queryParser.core.parser.EscapeQuerySyntax$Type valueOf(java.lang.String) -> valueOf
org.apache.lucene.queryParser.core.parser.SyntaxParser -> a.a.a.e.a.e.c:
    org.apache.lucene.queryParser.core.nodes.QueryNode parse(java.lang.CharSequence,java.lang.CharSequence) -> a
org.apache.lucene.queryParser.core.processors.NoChildOptimizationQueryNodeProcessor -> a.a.a.e.a.f.a:
    org.apache.lucene.queryParser.core.nodes.QueryNode postProcessNode(org.apache.lucene.queryParser.core.nodes.QueryNode) -> a
    org.apache.lucene.queryParser.core.nodes.QueryNode preProcessNode(org.apache.lucene.queryParser.core.nodes.QueryNode) -> b
    java.util.List setChildrenOrder(java.util.List) -> a
org.apache.lucene.queryParser.core.processors.QueryNodeProcessor -> a.a.a.e.a.f.b:
    org.apache.lucene.queryParser.core.nodes.QueryNode process(org.apache.lucene.queryParser.core.nodes.QueryNode) -> c
    void setQueryConfigHandler(org.apache.lucene.queryParser.core.config.QueryConfigHandler) -> a
org.apache.lucene.queryParser.core.processors.QueryNodeProcessorImpl -> a.a.a.e.a.f.c:
    java.util.ArrayList childrenListPool -> a
    org.apache.lucene.queryParser.core.config.QueryConfigHandler queryConfig -> b
    org.apache.lucene.queryParser.core.nodes.QueryNode process(org.apache.lucene.queryParser.core.nodes.QueryNode) -> c
    org.apache.lucene.queryParser.core.nodes.QueryNode processIteration(org.apache.lucene.queryParser.core.nodes.QueryNode) -> e
    void processChildren(org.apache.lucene.queryParser.core.nodes.QueryNode) -> d
    org.apache.lucene.queryParser.core.processors.QueryNodeProcessorImpl$ChildrenList allocateChildrenList() -> b
    void setQueryConfigHandler(org.apache.lucene.queryParser.core.config.QueryConfigHandler) -> a
    org.apache.lucene.queryParser.core.config.QueryConfigHandler getQueryConfigHandler() -> a
    org.apache.lucene.queryParser.core.nodes.QueryNode preProcessNode(org.apache.lucene.queryParser.core.nodes.QueryNode) -> b
    org.apache.lucene.queryParser.core.nodes.QueryNode postProcessNode(org.apache.lucene.queryParser.core.nodes.QueryNode) -> a
    java.util.List setChildrenOrder(java.util.List) -> a
org.apache.lucene.queryParser.core.processors.QueryNodeProcessorImpl$1 -> a.a.a.e.a.f.d:
org.apache.lucene.queryParser.core.processors.QueryNodeProcessorImpl$ChildrenList -> a.a.a.e.a.f.e:
    boolean beingUsed -> a
org.apache.lucene.queryParser.core.processors.QueryNodeProcessorPipeline -> a.a.a.e.a.f.f:
    java.util.LinkedList processors -> a
    org.apache.lucene.queryParser.core.config.QueryConfigHandler queryConfig -> b
    org.apache.lucene.queryParser.core.nodes.QueryNode process(org.apache.lucene.queryParser.core.nodes.QueryNode) -> c
    void setQueryConfigHandler(org.apache.lucene.queryParser.core.config.QueryConfigHandler) -> a
    boolean add(org.apache.lucene.queryParser.core.processors.QueryNodeProcessor) -> a
    void add(int,org.apache.lucene.queryParser.core.processors.QueryNodeProcessor) -> a
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(int,java.util.Collection) -> addAll
    void clear() -> clear
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    org.apache.lucene.queryParser.core.processors.QueryNodeProcessor get(int) -> a
    int indexOf(java.lang.Object) -> indexOf
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    int lastIndexOf(java.lang.Object) -> lastIndexOf
    java.util.ListIterator listIterator() -> listIterator
    java.util.ListIterator listIterator(int) -> listIterator
    boolean remove(java.lang.Object) -> remove
    org.apache.lucene.queryParser.core.processors.QueryNodeProcessor remove(int) -> b
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    org.apache.lucene.queryParser.core.processors.QueryNodeProcessor set(int,org.apache.lucene.queryParser.core.processors.QueryNodeProcessor) -> b
    int size() -> size
    java.util.List subList(int,int) -> subList
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    java.lang.Object[] toArray() -> toArray
    java.lang.Object remove(int) -> remove
    void add(int,java.lang.Object) -> add
    java.lang.Object set(int,java.lang.Object) -> set
    java.lang.Object get(int) -> get
    boolean add(java.lang.Object) -> add
org.apache.lucene.queryParser.core.processors.RemoveDeletedQueryNodesProcessor -> a.a.a.e.a.f.g:
    org.apache.lucene.queryParser.core.nodes.QueryNode process(org.apache.lucene.queryParser.core.nodes.QueryNode) -> c
    org.apache.lucene.queryParser.core.nodes.QueryNode postProcessNode(org.apache.lucene.queryParser.core.nodes.QueryNode) -> a
    java.util.List setChildrenOrder(java.util.List) -> a
    org.apache.lucene.queryParser.core.nodes.QueryNode preProcessNode(org.apache.lucene.queryParser.core.nodes.QueryNode) -> b
org.apache.lucene.queryParser.core.util.StringUtils -> a.a.a.e.a.g.a:
    java.lang.String toString(java.lang.Object) -> a
org.apache.lucene.queryParser.core.util.UnescapedCharSequence -> a.a.a.e.a.g.b:
    char[] chars -> a
    boolean[] wasEscaped -> b
    char charAt(int) -> charAt
    int length() -> length
    java.lang.CharSequence subSequence(int,int) -> subSequence
    java.lang.String toString() -> toString
    java.lang.String toStringEscaped(char[]) -> a
    boolean wasEscaped(java.lang.CharSequence,int) -> a
    java.lang.CharSequence toLowerCase(java.lang.CharSequence) -> a
org.apache.lucene.queryParser.standard.StandardQueryParser -> a.a.a.e.b.a:
    java.lang.String toString() -> toString
    org.apache.lucene.search.Query parse(java.lang.String,java.lang.String) -> b
    void setAnalyzer(org.apache.lucene.analysis.Analyzer) -> a
    java.lang.Object parse(java.lang.String,java.lang.String) -> a
org.apache.lucene.queryParser.standard.builders.BooleanQueryNodeBuilder -> a.a.a.e.b.a.a:
    org.apache.lucene.search.BooleanQuery build(org.apache.lucene.queryParser.core.nodes.QueryNode) -> b
    org.apache.lucene.search.BooleanClause$Occur getModifierValue(org.apache.lucene.queryParser.core.nodes.QueryNode) -> c
    java.lang.Object build(org.apache.lucene.queryParser.core.nodes.QueryNode) -> a
org.apache.lucene.queryParser.standard.builders.BooleanQueryNodeBuilder$1 -> a.a.a.e.b.a.b:
    int[] $SwitchMap$org$apache$lucene$queryParser$core$nodes$ModifierQueryNode$Modifier -> a
org.apache.lucene.queryParser.standard.builders.BoostQueryNodeBuilder -> a.a.a.e.b.a.c:
    org.apache.lucene.search.Query build(org.apache.lucene.queryParser.core.nodes.QueryNode) -> b
    java.lang.Object build(org.apache.lucene.queryParser.core.nodes.QueryNode) -> a
org.apache.lucene.queryParser.standard.builders.DummyQueryNodeBuilder -> a.a.a.e.b.a.d:
    org.apache.lucene.search.TermQuery build(org.apache.lucene.queryParser.core.nodes.QueryNode) -> b
    java.lang.Object build(org.apache.lucene.queryParser.core.nodes.QueryNode) -> a
org.apache.lucene.queryParser.standard.builders.FieldQueryNodeBuilder -> a.a.a.e.b.a.e:
    org.apache.lucene.search.TermQuery build(org.apache.lucene.queryParser.core.nodes.QueryNode) -> b
    java.lang.Object build(org.apache.lucene.queryParser.core.nodes.QueryNode) -> a
org.apache.lucene.queryParser.standard.builders.FuzzyQueryNodeBuilder -> a.a.a.e.b.a.f:
    org.apache.lucene.search.FuzzyQuery build(org.apache.lucene.queryParser.core.nodes.QueryNode) -> b
    java.lang.Object build(org.apache.lucene.queryParser.core.nodes.QueryNode) -> a
org.apache.lucene.queryParser.standard.builders.GroupQueryNodeBuilder -> a.a.a.e.b.a.g:
    org.apache.lucene.search.Query build(org.apache.lucene.queryParser.core.nodes.QueryNode) -> b
    java.lang.Object build(org.apache.lucene.queryParser.core.nodes.QueryNode) -> a
org.apache.lucene.queryParser.standard.builders.MatchAllDocsQueryNodeBuilder -> a.a.a.e.b.a.h:
    org.apache.lucene.search.MatchAllDocsQuery build(org.apache.lucene.queryParser.core.nodes.QueryNode) -> b
    java.lang.Object build(org.apache.lucene.queryParser.core.nodes.QueryNode) -> a
org.apache.lucene.queryParser.standard.builders.MatchNoDocsQueryNodeBuilder -> a.a.a.e.b.a.i:
    org.apache.lucene.search.BooleanQuery build(org.apache.lucene.queryParser.core.nodes.QueryNode) -> b
    java.lang.Object build(org.apache.lucene.queryParser.core.nodes.QueryNode) -> a
org.apache.lucene.queryParser.standard.builders.ModifierQueryNodeBuilder -> a.a.a.e.b.a.j:
    org.apache.lucene.search.Query build(org.apache.lucene.queryParser.core.nodes.QueryNode) -> b
    java.lang.Object build(org.apache.lucene.queryParser.core.nodes.QueryNode) -> a
org.apache.lucene.queryParser.standard.builders.MultiPhraseQueryNodeBuilder -> a.a.a.e.b.a.k:
    org.apache.lucene.search.MultiPhraseQuery build(org.apache.lucene.queryParser.core.nodes.QueryNode) -> b
    java.lang.Object build(org.apache.lucene.queryParser.core.nodes.QueryNode) -> a
org.apache.lucene.queryParser.standard.builders.NumericRangeQueryNodeBuilder -> a.a.a.e.b.a.l:
    org.apache.lucene.search.NumericRangeQuery build(org.apache.lucene.queryParser.core.nodes.QueryNode) -> b
    java.lang.Object build(org.apache.lucene.queryParser.core.nodes.QueryNode) -> a
org.apache.lucene.queryParser.standard.builders.NumericRangeQueryNodeBuilder$1 -> a.a.a.e.b.a.m:
    int[] $SwitchMap$org$apache$lucene$document$NumericField$DataType -> a
org.apache.lucene.queryParser.standard.builders.PhraseQueryNodeBuilder -> a.a.a.e.b.a.n:
    org.apache.lucene.search.PhraseQuery build(org.apache.lucene.queryParser.core.nodes.QueryNode) -> b
    java.lang.Object build(org.apache.lucene.queryParser.core.nodes.QueryNode) -> a
org.apache.lucene.queryParser.standard.builders.PrefixWildcardQueryNodeBuilder -> a.a.a.e.b.a.o:
    org.apache.lucene.search.PrefixQuery build(org.apache.lucene.queryParser.core.nodes.QueryNode) -> b
    java.lang.Object build(org.apache.lucene.queryParser.core.nodes.QueryNode) -> a
org.apache.lucene.queryParser.standard.builders.RangeQueryNodeBuilder -> a.a.a.e.b.a.p:
    org.apache.lucene.search.TermRangeQuery build(org.apache.lucene.queryParser.core.nodes.QueryNode) -> b
    java.lang.Object build(org.apache.lucene.queryParser.core.nodes.QueryNode) -> a
org.apache.lucene.queryParser.standard.builders.SlopQueryNodeBuilder -> a.a.a.e.b.a.q:
    org.apache.lucene.search.Query build(org.apache.lucene.queryParser.core.nodes.QueryNode) -> b
    java.lang.Object build(org.apache.lucene.queryParser.core.nodes.QueryNode) -> a
org.apache.lucene.queryParser.standard.builders.StandardBooleanQueryNodeBuilder -> a.a.a.e.b.a.r:
    org.apache.lucene.search.BooleanQuery build(org.apache.lucene.queryParser.core.nodes.QueryNode) -> b
    org.apache.lucene.search.BooleanClause$Occur getModifierValue(org.apache.lucene.queryParser.core.nodes.QueryNode) -> c
    java.lang.Object build(org.apache.lucene.queryParser.core.nodes.QueryNode) -> a
org.apache.lucene.queryParser.standard.builders.StandardQueryBuilder -> a.a.a.e.b.a.s:
org.apache.lucene.queryParser.standard.builders.StandardQueryTreeBuilder -> a.a.a.e.b.a.t:
    org.apache.lucene.search.Query build(org.apache.lucene.queryParser.core.nodes.QueryNode) -> b
    java.lang.Object build(org.apache.lucene.queryParser.core.nodes.QueryNode) -> a
org.apache.lucene.queryParser.standard.builders.TermRangeQueryNodeBuilder -> a.a.a.e.b.a.u:
    org.apache.lucene.search.TermRangeQuery build(org.apache.lucene.queryParser.core.nodes.QueryNode) -> b
    java.lang.Object build(org.apache.lucene.queryParser.core.nodes.QueryNode) -> a
org.apache.lucene.queryParser.standard.builders.WildcardQueryNodeBuilder -> a.a.a.e.b.a.v:
    org.apache.lucene.search.WildcardQuery build(org.apache.lucene.queryParser.core.nodes.QueryNode) -> b
    java.lang.Object build(org.apache.lucene.queryParser.core.nodes.QueryNode) -> a
org.apache.lucene.queryParser.standard.config.AllowLeadingWildcardAttribute -> a.a.a.e.b.b.a:
org.apache.lucene.queryParser.standard.config.AnalyzerAttribute -> a.a.a.e.b.b.b:
    void setAnalyzer(org.apache.lucene.analysis.Analyzer) -> a
org.apache.lucene.queryParser.standard.config.BoostAttribute -> a.a.a.e.b.b.c:
    void setBoost(float) -> a
org.apache.lucene.queryParser.standard.config.DateResolutionAttribute -> a.a.a.e.b.b.d:
    void setDateResolution(org.apache.lucene.document.DateTools$Resolution) -> a
org.apache.lucene.queryParser.standard.config.DefaultOperatorAttribute -> a.a.a.e.b.b.e:
org.apache.lucene.queryParser.standard.config.DefaultPhraseSlopAttribute -> a.a.a.e.b.b.f:
org.apache.lucene.queryParser.standard.config.FieldBoostMapAttribute -> a.a.a.e.b.b.g:
org.apache.lucene.queryParser.standard.config.FieldBoostMapFCListener -> a.a.a.e.b.b.h:
    org.apache.lucene.queryParser.core.config.QueryConfigHandler config -> a
    void buildFieldConfig(org.apache.lucene.queryParser.core.config.FieldConfig) -> a
org.apache.lucene.queryParser.standard.config.FieldDateResolutionFCListener -> a.a.a.e.b.b.i:
    org.apache.lucene.queryParser.core.config.QueryConfigHandler config -> a
    void buildFieldConfig(org.apache.lucene.queryParser.core.config.FieldConfig) -> a
org.apache.lucene.queryParser.standard.config.FuzzyAttribute -> a.a.a.e.b.b.j:
org.apache.lucene.queryParser.standard.config.FuzzyConfig -> a.a.a.e.b.b.k:
    int prefixLength -> a
    float minSimilarity -> b
    int getPrefixLength() -> a
    float getMinSimilarity() -> b
org.apache.lucene.queryParser.standard.config.LocaleAttribute -> a.a.a.e.b.b.l:
org.apache.lucene.queryParser.standard.config.LowercaseExpandedTermsAttribute -> a.a.a.e.b.b.m:
org.apache.lucene.queryParser.standard.config.MultiTermRewriteMethodAttribute -> a.a.a.e.b.b.n:
org.apache.lucene.queryParser.standard.config.NumericConfig -> a.a.a.e.b.b.o:
    int precisionStep -> a
    java.text.NumberFormat format -> b
    org.apache.lucene.document.NumericField$DataType type -> c
    int getPrecisionStep() -> a
    java.text.NumberFormat getNumberFormat() -> b
    org.apache.lucene.document.NumericField$DataType getType() -> c
    boolean equals(java.lang.Object) -> equals
org.apache.lucene.queryParser.standard.config.NumericFieldConfigListener -> a.a.a.e.b.b.p:
    org.apache.lucene.queryParser.core.config.QueryConfigHandler config -> a
    void buildFieldConfig(org.apache.lucene.queryParser.core.config.FieldConfig) -> a
org.apache.lucene.queryParser.standard.config.PositionIncrementsAttribute -> a.a.a.e.b.b.q:
org.apache.lucene.queryParser.standard.config.RangeCollatorAttribute -> a.a.a.e.b.b.r:
org.apache.lucene.queryParser.standard.config.StandardQueryConfigHandler -> a.a.a.e.b.b.s:
org.apache.lucene.queryParser.standard.config.StandardQueryConfigHandler$ConfigurationKeys -> a.a.a.e.b.b.t:
    org.apache.lucene.queryParser.core.config.ConfigurationKey ENABLE_POSITION_INCREMENTS -> a
    org.apache.lucene.queryParser.core.config.ConfigurationKey LOWERCASE_EXPANDED_TERMS -> b
    org.apache.lucene.queryParser.core.config.ConfigurationKey ALLOW_LEADING_WILDCARD -> c
    org.apache.lucene.queryParser.core.config.ConfigurationKey ANALYZER -> d
    org.apache.lucene.queryParser.core.config.ConfigurationKey DEFAULT_OPERATOR -> e
    org.apache.lucene.queryParser.core.config.ConfigurationKey PHRASE_SLOP -> f
    org.apache.lucene.queryParser.core.config.ConfigurationKey LOCALE -> g
    org.apache.lucene.queryParser.core.config.ConfigurationKey MULTI_TERM_REWRITE_METHOD -> h
    org.apache.lucene.queryParser.core.config.ConfigurationKey MULTI_FIELDS -> i
    org.apache.lucene.queryParser.core.config.ConfigurationKey FIELD_BOOST_MAP -> j
    org.apache.lucene.queryParser.core.config.ConfigurationKey FIELD_DATE_RESOLUTION_MAP -> k
    org.apache.lucene.queryParser.core.config.ConfigurationKey FUZZY_CONFIG -> l
    org.apache.lucene.queryParser.core.config.ConfigurationKey DATE_RESOLUTION -> m
    org.apache.lucene.queryParser.core.config.ConfigurationKey BOOST -> n
    org.apache.lucene.queryParser.core.config.ConfigurationKey NUMERIC_CONFIG -> o
    org.apache.lucene.queryParser.core.config.ConfigurationKey NUMERIC_CONFIG_MAP -> p
    org.apache.lucene.queryParser.core.config.ConfigurationKey RANGE_COLLATOR -> q
org.apache.lucene.queryParser.standard.config.StandardQueryConfigHandler$Operator -> a.a.a.e.b.b.u:
    org.apache.lucene.queryParser.standard.config.StandardQueryConfigHandler$Operator AND -> a
    org.apache.lucene.queryParser.standard.config.StandardQueryConfigHandler$Operator OR -> b
    org.apache.lucene.queryParser.standard.config.StandardQueryConfigHandler$Operator[] $VALUES -> c
    org.apache.lucene.queryParser.standard.config.StandardQueryConfigHandler$Operator[] values() -> values
    org.apache.lucene.queryParser.standard.config.StandardQueryConfigHandler$Operator valueOf(java.lang.String) -> valueOf
org.apache.lucene.queryParser.standard.nodes.AbstractRangeQueryNode -> a.a.a.e.b.c.a:
    boolean lowerInclusive -> a
    boolean upperInclusive -> b
    java.lang.CharSequence getField() -> f
    void setField(java.lang.CharSequence) -> a
    org.apache.lucene.queryParser.core.nodes.FieldValuePairQueryNode getLowerBound() -> b
    org.apache.lucene.queryParser.core.nodes.FieldValuePairQueryNode getUpperBound() -> c
    boolean isLowerInclusive() -> d
    boolean isUpperInclusive() -> e
    void setBounds(org.apache.lucene.queryParser.core.nodes.FieldValuePairQueryNode,org.apache.lucene.queryParser.core.nodes.FieldValuePairQueryNode,boolean,boolean) -> a
    java.lang.CharSequence toQueryString(org.apache.lucene.queryParser.core.parser.EscapeQuerySyntax) -> a
org.apache.lucene.queryParser.standard.nodes.BooleanModifierNode -> a.a.a.e.b.c.b:
org.apache.lucene.queryParser.standard.nodes.MultiPhraseQueryNode -> a.a.a.e.b.c.c:
    java.lang.String toString() -> toString
    java.lang.CharSequence toQueryString(org.apache.lucene.queryParser.core.parser.EscapeQuerySyntax) -> a
    org.apache.lucene.queryParser.core.nodes.QueryNode cloneTree() -> a
    java.lang.CharSequence getField() -> f
    void setField(java.lang.CharSequence) -> a
org.apache.lucene.queryParser.standard.nodes.NumericQueryNode -> a.a.a.e.b.c.d:
    java.text.NumberFormat numberFormat -> a
    java.lang.CharSequence field -> b
    java.lang.Number value -> c
    java.lang.CharSequence getField() -> f
    void setField(java.lang.CharSequence) -> a
    java.lang.CharSequence getTermEscaped(org.apache.lucene.queryParser.core.parser.EscapeQuerySyntax) -> b
    java.lang.CharSequence toQueryString(org.apache.lucene.queryParser.core.parser.EscapeQuerySyntax) -> a
    void setNumberFormat(java.text.NumberFormat) -> a
    java.lang.Number getValue() -> b
    void setValue(java.lang.Number) -> a
    java.lang.String toString() -> toString
org.apache.lucene.queryParser.standard.nodes.NumericRangeQueryNode -> a.a.a.e.b.c.e:
    org.apache.lucene.queryParser.standard.config.NumericConfig numericConfig -> a
    org.apache.lucene.document.NumericField$DataType getNumericDataType(java.lang.Number) -> a
    void setBounds(org.apache.lucene.queryParser.standard.nodes.NumericQueryNode,org.apache.lucene.queryParser.standard.nodes.NumericQueryNode,boolean,boolean,org.apache.lucene.queryParser.standard.config.NumericConfig) -> a
    org.apache.lucene.queryParser.standard.config.NumericConfig getNumericConfig() -> g
    java.lang.String toString() -> toString
org.apache.lucene.queryParser.standard.nodes.PrefixWildcardQueryNode -> a.a.a.e.b.c.f:
    java.lang.String toString() -> toString
    org.apache.lucene.queryParser.standard.nodes.PrefixWildcardQueryNode cloneTree() -> j
    org.apache.lucene.queryParser.standard.nodes.WildcardQueryNode cloneTree() -> k
    org.apache.lucene.queryParser.core.nodes.FieldQueryNode cloneTree() -> i
    org.apache.lucene.queryParser.core.nodes.QueryNode cloneTree() -> a
org.apache.lucene.queryParser.standard.nodes.RangeQueryNode -> a.a.a.e.b.c.g:
    java.text.Collator collator -> a
    org.apache.lucene.queryParser.core.nodes.ParametricQueryNode getLowerBound() -> g
    org.apache.lucene.queryParser.core.nodes.ParametricQueryNode getUpperBound() -> h
    void setBounds(org.apache.lucene.queryParser.core.nodes.FieldQueryNode,org.apache.lucene.queryParser.core.nodes.FieldQueryNode,boolean,boolean) -> a
    java.lang.String toString() -> toString
    java.text.Collator getCollator() -> i
    void setBounds(org.apache.lucene.queryParser.core.nodes.FieldValuePairQueryNode,org.apache.lucene.queryParser.core.nodes.FieldValuePairQueryNode,boolean,boolean) -> a
    org.apache.lucene.queryParser.core.nodes.FieldValuePairQueryNode getUpperBound() -> c
    org.apache.lucene.queryParser.core.nodes.FieldValuePairQueryNode getLowerBound() -> b
org.apache.lucene.queryParser.standard.nodes.StandardBooleanQueryNode -> a.a.a.e.b.c.h:
    boolean disableCoord -> a
    boolean isDisableCoord() -> b
org.apache.lucene.queryParser.standard.nodes.TermRangeQueryNode -> a.a.a.e.b.c.i:
org.apache.lucene.queryParser.standard.nodes.WildcardQueryNode -> a.a.a.e.b.c.j:
    java.lang.CharSequence toQueryString(org.apache.lucene.queryParser.core.parser.EscapeQuerySyntax) -> a
    java.lang.String toString() -> toString
    org.apache.lucene.queryParser.standard.nodes.WildcardQueryNode cloneTree() -> k
    org.apache.lucene.queryParser.core.nodes.FieldQueryNode cloneTree() -> i
    org.apache.lucene.queryParser.core.nodes.QueryNode cloneTree() -> a
org.apache.lucene.queryParser.standard.parser.EscapeQuerySyntaxImpl -> a.a.a.e.b.d.a:
    char[] wildcardChars -> a
    java.lang.String[] escapableTermExtraFirstChars -> b
    java.lang.String[] escapableTermChars -> c
    java.lang.String[] escapableQuotedChars -> d
    java.lang.String[] escapableWhiteChars -> e
    java.lang.String[] escapableWordTokens -> f
    java.lang.CharSequence escapeChar(java.lang.CharSequence,java.util.Locale) -> a
    java.lang.CharSequence escapeQuoted(java.lang.CharSequence,java.util.Locale) -> b
    java.lang.CharSequence escapeTerm(java.lang.CharSequence,java.util.Locale) -> c
    java.lang.CharSequence replaceIgnoreCase(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,java.util.Locale) -> a
    java.lang.CharSequence escapeWhiteChar(java.lang.CharSequence,java.util.Locale) -> d
    java.lang.CharSequence escape(java.lang.CharSequence,java.util.Locale,org.apache.lucene.queryParser.core.parser.EscapeQuerySyntax$Type) -> a
    org.apache.lucene.queryParser.core.util.UnescapedCharSequence discardEscapeChar(java.lang.CharSequence) -> a
    int hexToInt(char) -> a
org.apache.lucene.queryParser.standard.parser.JavaCharStream -> a.a.a.e.b.d.b:
    int bufpos -> a
    int bufsize -> b
    int available -> c
    int tokenBegin -> d
    int[] bufline -> e
    int[] bufcolumn -> f
    int column -> g
    int line -> h
    boolean prevCharIsCR -> i
    boolean prevCharIsLF -> j
    java.io.Reader inputStream -> k
    char[] nextCharBuf -> l
    char[] buffer -> m
    int maxNextCharInd -> n
    int nextCharInd -> o
    int inBuf -> p
    int tabSize -> q
    int hexval(char) -> a
    void ExpandBuff(boolean) -> a
    void FillBuff() -> a
    char ReadByte() -> b
    char BeginToken() -> c
    void AdjustBuffSize() -> d
    void UpdateLineColumn(char) -> b
    char readChar() -> e
    int getEndColumn() -> f
    int getEndLine() -> g
    int getBeginColumn() -> h
    int getBeginLine() -> i
    void backup(int) -> a
    void ReInit(java.io.Reader,int,int,int) -> a
    void ReInit(java.io.Reader,int,int) -> a
    java.lang.String GetImage() -> j
org.apache.lucene.queryParser.standard.parser.ParseException -> a.a.a.e.b.d.c:
    org.apache.lucene.queryParser.standard.parser.Token currentToken -> b
    int[][] expectedTokenSequences -> c
    java.lang.String[] tokenImage -> d
    java.lang.String eol -> e
    java.lang.String initialise(org.apache.lucene.queryParser.standard.parser.Token,int[][],java.lang.String[]) -> a
    java.lang.String add_escapes(java.lang.String) -> a
org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser -> a.a.a.e.b.d.d:
    org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager token_source -> a
    org.apache.lucene.queryParser.standard.parser.JavaCharStream jj_input_stream -> b
    org.apache.lucene.queryParser.standard.parser.Token token -> c
    org.apache.lucene.queryParser.standard.parser.Token jj_nt -> d
    int jj_ntk -> f
    org.apache.lucene.queryParser.standard.parser.Token jj_scanpos -> g
    org.apache.lucene.queryParser.standard.parser.Token jj_lastpos -> h
    int jj_la -> i
    int jj_gen -> j
    int[] jj_la1 -> k
    int[] jj_la1_0 -> l
    org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser$JJCalls[] jj_2_rtns -> m
    boolean jj_rescan -> n
    int jj_gc -> o
    org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser$LookaheadSuccess jj_ls -> p
    java.util.List jj_expentries -> q
    int[] jj_expentry -> r
    int jj_kind -> s
    int[] jj_lasttokens -> t
    int jj_endpos -> u
    org.apache.lucene.queryParser.core.nodes.QueryNode parse(java.lang.CharSequence,java.lang.CharSequence) -> a
    org.apache.lucene.queryParser.core.nodes.ModifierQueryNode$Modifier Modifiers() -> a
    org.apache.lucene.queryParser.core.nodes.QueryNode TopLevelQuery(java.lang.CharSequence) -> a
    org.apache.lucene.queryParser.core.nodes.QueryNode Query(java.lang.CharSequence) -> b
    org.apache.lucene.queryParser.core.nodes.QueryNode DisjQuery(java.lang.CharSequence) -> c
    org.apache.lucene.queryParser.core.nodes.QueryNode ConjQuery(java.lang.CharSequence) -> d
    org.apache.lucene.queryParser.core.nodes.QueryNode ModClause(java.lang.CharSequence) -> e
    org.apache.lucene.queryParser.core.nodes.QueryNode Clause(java.lang.CharSequence) -> f
    org.apache.lucene.queryParser.core.nodes.QueryNode Term(java.lang.CharSequence) -> g
    boolean jj_2_1(int) -> a
    boolean jj_3_1() -> c
    void jj_la1_init_0() -> d
    void ReInit(java.io.Reader) -> a
    org.apache.lucene.queryParser.standard.parser.Token jj_consume_token(int) -> b
    boolean jj_scan_token(int) -> c
    int jj_ntk() -> e
    void jj_add_error_token(int,int) -> a
    org.apache.lucene.queryParser.standard.parser.ParseException generateParseException() -> b
    void jj_rescan_token() -> f
    void jj_save(int,int) -> b
org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser$1 -> a.a.a.e.b.d.e:
org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser$JJCalls -> a.a.a.e.b.d.f:
    int gen -> a
    org.apache.lucene.queryParser.standard.parser.Token first -> b
    int arg -> c
    org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser$JJCalls next -> d
org.apache.lucene.queryParser.standard.parser.StandardSyntaxParser$LookaheadSuccess -> a.a.a.e.b.d.g:
org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserConstants -> a.a.a.e.b.d.h:
    java.lang.String[] tokenImage -> e
org.apache.lucene.queryParser.standard.parser.StandardSyntaxParserTokenManager -> a.a.a.e.b.d.i:
    java.io.PrintStream debugStream -> a
    long[] jjbitVec0 -> b
    long[] jjbitVec1 -> c
    long[] jjbitVec3 -> d
    long[] jjbitVec4 -> f
    int[] jjnextStates -> g
    java.lang.String[] jjstrLiteralImages -> h
    java.lang.String[] lexStateNames -> i
    int[] jjnewLexState -> j
    long[] jjtoToken -> k
    long[] jjtoSkip -> l
    org.apache.lucene.queryParser.standard.parser.JavaCharStream input_stream -> m
    int[] jjrounds -> u
    int[] jjstateSet -> v
    char curChar -> n
    int curLexState -> o
    int defaultLexState -> p
    int jjnewStateCnt -> q
    int jjround -> r
    int jjmatchedPos -> s
    int jjmatchedKind -> t
    int jjStopAtPos(int,int) -> a
    int jjMoveStringLiteralDfa0_3() -> c
    int jjMoveNfa_3(int,int) -> b
    int jjStopStringLiteralDfa_1(int,long) -> a
    int jjStartNfa_1(int,long) -> b
    int jjMoveStringLiteralDfa0_1() -> d
    int jjMoveStringLiteralDfa1_1(long) -> a
    int jjStartNfaWithStates_1(int,int,int) -> a
    int jjMoveNfa_1(int,int) -> c
    int jjMoveStringLiteralDfa0_0() -> e
    int jjMoveNfa_0(int,int) -> d
    int jjStopStringLiteralDfa_2(int,long) -> c
    int jjStartNfa_2(int,long) -> d
    int jjMoveStringLiteralDfa0_2() -> f
    int jjMoveStringLiteralDfa1_2(long) -> b
    int jjStartNfaWithStates_2(int,int,int) -> b
    int jjMoveNfa_2(int,int) -> e
    boolean jjCanMove_0(int,int,int,long,long) -> a
    boolean jjCanMove_1(int,int,int,long,long) -> b
    boolean jjCanMove_2(int,int,int,long,long) -> c
    void ReInit(org.apache.lucene.queryParser.standard.parser.JavaCharStream) -> a
    void ReInitRounds() -> g
    org.apache.lucene.queryParser.standard.parser.Token jjFillToken() -> a
    org.apache.lucene.queryParser.standard.parser.Token getNextToken() -> b
    void jjCheckNAdd(int) -> a
    void jjAddStates(int,int) -> f
    void jjCheckNAddTwoStates(int,int) -> g
    void jjCheckNAddStates(int,int) -> h
org.apache.lucene.queryParser.standard.parser.Token -> a.a.a.e.b.d.j:
    int kind -> a
    int beginLine -> b
    int beginColumn -> c
    int endLine -> d
    int endColumn -> e
    java.lang.String image -> f
    org.apache.lucene.queryParser.standard.parser.Token next -> g
    java.lang.String toString() -> toString
    org.apache.lucene.queryParser.standard.parser.Token newToken(int,java.lang.String) -> a
org.apache.lucene.queryParser.standard.parser.TokenMgrError -> a.a.a.e.b.d.k:
    int errorCode -> a
    java.lang.String addEscapes(java.lang.String) -> a
    java.lang.String LexicalError(boolean,int,int,int,java.lang.String,char) -> a
    java.lang.String getMessage() -> getMessage
org.apache.lucene.queryParser.standard.processors.AllowLeadingWildcardProcessor -> a.a.a.e.b.e.a:
    org.apache.lucene.queryParser.core.nodes.QueryNode process(org.apache.lucene.queryParser.core.nodes.QueryNode) -> c
    org.apache.lucene.queryParser.core.nodes.QueryNode postProcessNode(org.apache.lucene.queryParser.core.nodes.QueryNode) -> a
    org.apache.lucene.queryParser.core.nodes.QueryNode preProcessNode(org.apache.lucene.queryParser.core.nodes.QueryNode) -> b
    java.util.List setChildrenOrder(java.util.List) -> a
org.apache.lucene.queryParser.standard.processors.AnalyzerQueryNodeProcessor -> a.a.a.e.b.e.b:
    org.apache.lucene.analysis.Analyzer analyzer -> b
    boolean positionIncrementsEnabled -> c
    boolean $assertionsDisabled -> a
    org.apache.lucene.queryParser.core.nodes.QueryNode process(org.apache.lucene.queryParser.core.nodes.QueryNode) -> c
    org.apache.lucene.queryParser.core.nodes.QueryNode postProcessNode(org.apache.lucene.queryParser.core.nodes.QueryNode) -> a
    org.apache.lucene.queryParser.core.nodes.QueryNode preProcessNode(org.apache.lucene.queryParser.core.nodes.QueryNode) -> b
    java.util.List setChildrenOrder(java.util.List) -> a
org.apache.lucene.queryParser.standard.processors.BooleanQuery2ModifierNodeProcessor -> a.a.a.e.b.e.c:
    org.apache.lucene.queryParser.core.config.QueryConfigHandler queryConfigHandler -> a
    java.util.ArrayList childrenBuffer -> b
    java.lang.Boolean usingAnd -> c
    org.apache.lucene.queryParser.core.nodes.QueryNode process(org.apache.lucene.queryParser.core.nodes.QueryNode) -> c
    void processChildren(org.apache.lucene.queryParser.core.nodes.QueryNode) -> a
    org.apache.lucene.queryParser.core.nodes.QueryNode processIteration(org.apache.lucene.queryParser.core.nodes.QueryNode) -> g
    void fillChildrenBufferAndApplyModifiery(org.apache.lucene.queryParser.core.nodes.QueryNode) -> b
    org.apache.lucene.queryParser.core.nodes.QueryNode postProcessNode(org.apache.lucene.queryParser.core.nodes.QueryNode) -> d
    org.apache.lucene.queryParser.core.nodes.QueryNode preProcessNode(org.apache.lucene.queryParser.core.nodes.QueryNode) -> e
    boolean isDefaultBooleanQueryNode(org.apache.lucene.queryParser.core.nodes.QueryNode) -> f
    org.apache.lucene.queryParser.core.nodes.QueryNode applyModifier(org.apache.lucene.queryParser.core.nodes.QueryNode,org.apache.lucene.queryParser.core.nodes.ModifierQueryNode$Modifier) -> b
    void tagModifierButDoNotOverride(org.apache.lucene.queryParser.core.nodes.QueryNode,org.apache.lucene.queryParser.core.nodes.ModifierQueryNode$Modifier) -> a
    void setQueryConfigHandler(org.apache.lucene.queryParser.core.config.QueryConfigHandler) -> a
    org.apache.lucene.queryParser.core.config.QueryConfigHandler getQueryConfigHandler() -> a
org.apache.lucene.queryParser.standard.processors.BooleanSingleChildOptimizationQueryNodeProcessor -> a.a.a.e.b.e.d:
    org.apache.lucene.queryParser.core.nodes.QueryNode postProcessNode(org.apache.lucene.queryParser.core.nodes.QueryNode) -> a
    org.apache.lucene.queryParser.core.nodes.QueryNode preProcessNode(org.apache.lucene.queryParser.core.nodes.QueryNode) -> b
    java.util.List setChildrenOrder(java.util.List) -> a
org.apache.lucene.queryParser.standard.processors.BoostQueryNodeProcessor -> a.a.a.e.b.e.e:
    org.apache.lucene.queryParser.core.nodes.QueryNode postProcessNode(org.apache.lucene.queryParser.core.nodes.QueryNode) -> a
    org.apache.lucene.queryParser.core.nodes.QueryNode preProcessNode(org.apache.lucene.queryParser.core.nodes.QueryNode) -> b
    java.util.List setChildrenOrder(java.util.List) -> a
org.apache.lucene.queryParser.standard.processors.DefaultPhraseSlopQueryNodeProcessor -> a.a.a.e.b.e.f:
    boolean processChildren -> a
    int defaultPhraseSlop -> b
    org.apache.lucene.queryParser.core.nodes.QueryNode process(org.apache.lucene.queryParser.core.nodes.QueryNode) -> c
    org.apache.lucene.queryParser.core.nodes.QueryNode postProcessNode(org.apache.lucene.queryParser.core.nodes.QueryNode) -> a
    org.apache.lucene.queryParser.core.nodes.QueryNode preProcessNode(org.apache.lucene.queryParser.core.nodes.QueryNode) -> b
    void processChildren(org.apache.lucene.queryParser.core.nodes.QueryNode) -> d
    java.util.List setChildrenOrder(java.util.List) -> a
org.apache.lucene.queryParser.standard.processors.FuzzyQueryNodeProcessor -> a.a.a.e.b.e.g:
    org.apache.lucene.queryParser.core.nodes.QueryNode postProcessNode(org.apache.lucene.queryParser.core.nodes.QueryNode) -> a
    org.apache.lucene.queryParser.core.nodes.QueryNode preProcessNode(org.apache.lucene.queryParser.core.nodes.QueryNode) -> b
    java.util.List setChildrenOrder(java.util.List) -> a
org.apache.lucene.queryParser.standard.processors.LowercaseExpandedTermsQueryNodeProcessor -> a.a.a.e.b.e.h:
    org.apache.lucene.queryParser.core.nodes.QueryNode process(org.apache.lucene.queryParser.core.nodes.QueryNode) -> c
    org.apache.lucene.queryParser.core.nodes.QueryNode postProcessNode(org.apache.lucene.queryParser.core.nodes.QueryNode) -> a
    org.apache.lucene.queryParser.core.nodes.QueryNode preProcessNode(org.apache.lucene.queryParser.core.nodes.QueryNode) -> b
    java.util.List setChildrenOrder(java.util.List) -> a
org.apache.lucene.queryParser.standard.processors.MatchAllDocsQueryNodeProcessor -> a.a.a.e.b.e.i:
    org.apache.lucene.queryParser.core.nodes.QueryNode postProcessNode(org.apache.lucene.queryParser.core.nodes.QueryNode) -> a
    org.apache.lucene.queryParser.core.nodes.QueryNode preProcessNode(org.apache.lucene.queryParser.core.nodes.QueryNode) -> b
    java.util.List setChildrenOrder(java.util.List) -> a
org.apache.lucene.queryParser.standard.processors.MultiFieldQueryNodeProcessor -> a.a.a.e.b.e.j:
    boolean processChildren -> a
    org.apache.lucene.queryParser.core.nodes.QueryNode postProcessNode(org.apache.lucene.queryParser.core.nodes.QueryNode) -> a
    void processChildren(org.apache.lucene.queryParser.core.nodes.QueryNode) -> d
    org.apache.lucene.queryParser.core.nodes.QueryNode preProcessNode(org.apache.lucene.queryParser.core.nodes.QueryNode) -> b
    java.util.List setChildrenOrder(java.util.List) -> a
org.apache.lucene.queryParser.standard.processors.MultiTermRewriteMethodProcessor -> a.a.a.e.b.e.k:
    org.apache.lucene.queryParser.core.nodes.QueryNode postProcessNode(org.apache.lucene.queryParser.core.nodes.QueryNode) -> a
    org.apache.lucene.queryParser.core.nodes.QueryNode preProcessNode(org.apache.lucene.queryParser.core.nodes.QueryNode) -> b
    java.util.List setChildrenOrder(java.util.List) -> a
org.apache.lucene.queryParser.standard.processors.NumericQueryNodeProcessor -> a.a.a.e.b.e.l:
    org.apache.lucene.queryParser.core.nodes.QueryNode postProcessNode(org.apache.lucene.queryParser.core.nodes.QueryNode) -> a
    org.apache.lucene.queryParser.core.nodes.QueryNode preProcessNode(org.apache.lucene.queryParser.core.nodes.QueryNode) -> b
    java.util.List setChildrenOrder(java.util.List) -> a
org.apache.lucene.queryParser.standard.processors.NumericQueryNodeProcessor$1 -> a.a.a.e.b.e.m:
    int[] $SwitchMap$org$apache$lucene$document$NumericField$DataType -> a
org.apache.lucene.queryParser.standard.processors.NumericRangeQueryNodeProcessor -> a.a.a.e.b.e.n:
    org.apache.lucene.queryParser.core.nodes.QueryNode postProcessNode(org.apache.lucene.queryParser.core.nodes.QueryNode) -> a
    org.apache.lucene.queryParser.core.nodes.QueryNode preProcessNode(org.apache.lucene.queryParser.core.nodes.QueryNode) -> b
    java.util.List setChildrenOrder(java.util.List) -> a
org.apache.lucene.queryParser.standard.processors.NumericRangeQueryNodeProcessor$1 -> a.a.a.e.b.e.o:
    int[] $SwitchMap$org$apache$lucene$document$NumericField$DataType -> a
org.apache.lucene.queryParser.standard.processors.ParametricRangeQueryNodeProcessor -> a.a.a.e.b.e.p:
    org.apache.lucene.queryParser.core.nodes.QueryNode postProcessNode(org.apache.lucene.queryParser.core.nodes.QueryNode) -> a
    org.apache.lucene.queryParser.core.nodes.QueryNode preProcessNode(org.apache.lucene.queryParser.core.nodes.QueryNode) -> b
    java.util.List setChildrenOrder(java.util.List) -> a
org.apache.lucene.queryParser.standard.processors.PhraseSlopQueryNodeProcessor -> a.a.a.e.b.e.q:
    org.apache.lucene.queryParser.core.nodes.QueryNode postProcessNode(org.apache.lucene.queryParser.core.nodes.QueryNode) -> a
    org.apache.lucene.queryParser.core.nodes.QueryNode preProcessNode(org.apache.lucene.queryParser.core.nodes.QueryNode) -> b
    java.util.List setChildrenOrder(java.util.List) -> a
org.apache.lucene.queryParser.standard.processors.RemoveEmptyNonLeafQueryNodeProcessor -> a.a.a.e.b.e.r:
    java.util.LinkedList childrenBuffer -> a
    org.apache.lucene.queryParser.core.nodes.QueryNode process(org.apache.lucene.queryParser.core.nodes.QueryNode) -> c
    org.apache.lucene.queryParser.core.nodes.QueryNode postProcessNode(org.apache.lucene.queryParser.core.nodes.QueryNode) -> a
    org.apache.lucene.queryParser.core.nodes.QueryNode preProcessNode(org.apache.lucene.queryParser.core.nodes.QueryNode) -> b
    java.util.List setChildrenOrder(java.util.List) -> a
org.apache.lucene.queryParser.standard.processors.StandardQueryNodeProcessorPipeline -> a.a.a.e.b.e.s:
org.apache.lucene.queryParser.standard.processors.WildcardQueryNodeProcessor -> a.a.a.e.b.e.t:
    org.apache.lucene.queryParser.core.nodes.QueryNode postProcessNode(org.apache.lucene.queryParser.core.nodes.QueryNode) -> a
    boolean isWildcard(java.lang.CharSequence) -> a
    boolean isPrefixWildcard(java.lang.CharSequence) -> b
    org.apache.lucene.queryParser.core.nodes.QueryNode preProcessNode(org.apache.lucene.queryParser.core.nodes.QueryNode) -> b
    java.util.List setChildrenOrder(java.util.List) -> a
org.apache.lucene.search.BooleanClause -> a.a.a.f.a:
    org.apache.lucene.search.Query query -> a
    org.apache.lucene.search.BooleanClause$Occur occur -> b
    org.apache.lucene.search.BooleanClause$Occur getOccur() -> a
    void setOccur(org.apache.lucene.search.BooleanClause$Occur) -> a
    org.apache.lucene.search.Query getQuery() -> b
    boolean isProhibited() -> c
    boolean isRequired() -> d
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
org.apache.lucene.search.BooleanClause$1 -> a.a.a.f.b:
org.apache.lucene.search.BooleanClause$Occur -> a.a.a.f.c:
    org.apache.lucene.search.BooleanClause$Occur MUST -> a
    org.apache.lucene.search.BooleanClause$Occur SHOULD -> b
    org.apache.lucene.search.BooleanClause$Occur MUST_NOT -> c
    org.apache.lucene.search.BooleanClause$Occur[] $VALUES -> d
    org.apache.lucene.search.BooleanClause$Occur[] values() -> values
    org.apache.lucene.search.BooleanClause$Occur valueOf(java.lang.String) -> valueOf
org.apache.lucene.search.BooleanClause$Occur$1 -> a.a.a.f.d:
    java.lang.String toString() -> toString
org.apache.lucene.search.BooleanClause$Occur$2 -> a.a.a.f.e:
    java.lang.String toString() -> toString
org.apache.lucene.search.BooleanClause$Occur$3 -> a.a.a.f.f:
    java.lang.String toString() -> toString
org.apache.lucene.search.BooleanQuery -> a.a.a.f.g:
    int maxClauseCount -> b
    java.util.ArrayList clauses -> c
    boolean disableCoord -> d
    int minNrShouldMatch -> a
    int getMaxClauseCount() -> a
    int getMinimumNumberShouldMatch() -> b
    void add(org.apache.lucene.search.Query,org.apache.lucene.search.BooleanClause$Occur) -> a
    void add(org.apache.lucene.search.BooleanClause) -> a
    java.util.List clauses() -> c
    java.util.Iterator iterator() -> iterator
    org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.Searcher) -> a
    org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) -> a
    java.lang.Object clone() -> clone
    java.lang.String toString(java.lang.String) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int access$000() -> d
    java.util.ArrayList access$100(org.apache.lucene.search.BooleanQuery) -> a
org.apache.lucene.search.BooleanQuery$BooleanWeight -> a.a.a.f.h:
    org.apache.lucene.search.Similarity similarity -> a
    java.util.ArrayList weights -> b
    int maxCoord -> c
    boolean disableCoord -> e
    org.apache.lucene.search.BooleanQuery this$0 -> d
    float getValue() -> a
    float sumOfSquaredWeights() -> b
    float coord(int,int) -> a
    void normalize(float) -> a
    org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.IndexReader,boolean,boolean) -> a
org.apache.lucene.search.BooleanQuery$TooManyClauses -> a.a.a.f.i:
org.apache.lucene.search.BooleanScorer -> a.a.a.f.j:
    org.apache.lucene.search.BooleanScorer$SubScorer scorers -> b
    org.apache.lucene.search.BooleanScorer$BucketTable bucketTable -> c
    float[] coordFactors -> d
    int minNrShouldMatch -> e
    int end -> g
    org.apache.lucene.search.BooleanScorer$Bucket current -> h
    boolean $assertionsDisabled -> a
    boolean score(org.apache.lucene.search.Collector,int,int) -> a
    int advance(int) -> a
    int docID() -> a
    int nextDoc() -> b
    float score() -> c
    void score(org.apache.lucene.search.Collector) -> a
    java.lang.String toString() -> toString
org.apache.lucene.search.BooleanScorer$BooleanScorerCollector -> a.a.a.f.k:
    org.apache.lucene.search.BooleanScorer$BucketTable bucketTable -> a
    int mask -> b
    org.apache.lucene.search.Scorer scorer -> c
    void collect(int) -> a
    void setNextReader(org.apache.lucene.index.IndexReader,int) -> a
    void setScorer(org.apache.lucene.search.Scorer) -> a
    boolean acceptsDocsOutOfOrder() -> a
org.apache.lucene.search.BooleanScorer$Bucket -> a.a.a.f.l:
    int doc -> a
    float score -> b
    int bits -> c
    int coord -> d
    org.apache.lucene.search.BooleanScorer$Bucket next -> e
org.apache.lucene.search.BooleanScorer$BucketScorer -> a.a.a.f.m:
    float score -> a
    int doc -> b
    int freq -> c
    int advance(int) -> a
    int docID() -> a
    int nextDoc() -> b
    float score() -> c
org.apache.lucene.search.BooleanScorer$BucketTable -> a.a.a.f.n:
    org.apache.lucene.search.BooleanScorer$Bucket[] buckets -> a
    org.apache.lucene.search.BooleanScorer$Bucket first -> b
    org.apache.lucene.search.Collector newCollector(int) -> a
org.apache.lucene.search.BooleanScorer$SubScorer -> a.a.a.f.o:
    org.apache.lucene.search.Scorer scorer -> a
    boolean prohibited -> b
    org.apache.lucene.search.Collector collector -> c
    org.apache.lucene.search.BooleanScorer$SubScorer next -> d
org.apache.lucene.search.BooleanScorer2 -> a.a.a.f.p:
    java.util.List requiredScorers -> a
    java.util.List optionalScorers -> b
    java.util.List prohibitedScorers -> c
    org.apache.lucene.search.BooleanScorer2$Coordinator coordinator -> d
    org.apache.lucene.search.Scorer countingSumScorer -> e
    int minNrShouldMatch -> g
    int doc -> h
    org.apache.lucene.search.Scorer countingDisjunctionSumScorer(java.util.List,int) -> a
    org.apache.lucene.search.Scorer countingConjunctionSumScorer(boolean,org.apache.lucene.search.Similarity,java.util.List) -> a
    org.apache.lucene.search.Scorer dualConjunctionSumScorer(boolean,org.apache.lucene.search.Similarity,org.apache.lucene.search.Scorer,org.apache.lucene.search.Scorer) -> a
    org.apache.lucene.search.Scorer makeCountingSumScorer(boolean,org.apache.lucene.search.Similarity) -> a
    org.apache.lucene.search.Scorer makeCountingSumScorerNoReq(boolean,org.apache.lucene.search.Similarity) -> b
    org.apache.lucene.search.Scorer makeCountingSumScorerSomeReq(boolean,org.apache.lucene.search.Similarity) -> c
    org.apache.lucene.search.Scorer addProhibitedScorers(org.apache.lucene.search.Scorer) -> a
    void score(org.apache.lucene.search.Collector) -> a
    boolean score(org.apache.lucene.search.Collector,int,int) -> a
    int docID() -> a
    int nextDoc() -> b
    float score() -> c
    int advance(int) -> a
    java.util.List access$000(org.apache.lucene.search.BooleanScorer2) -> a
    java.util.List access$100(org.apache.lucene.search.BooleanScorer2) -> b
    org.apache.lucene.search.BooleanScorer2$Coordinator access$300(org.apache.lucene.search.BooleanScorer2) -> c
org.apache.lucene.search.BooleanScorer2$1 -> a.a.a.f.q:
    int lastScoredDoc -> g
    float lastDocScore -> h
    org.apache.lucene.search.BooleanScorer2 this$0 -> a
    float score() -> c
org.apache.lucene.search.BooleanScorer2$2 -> a.a.a.f.r:
    int lastScoredDoc -> c
    float lastDocScore -> d
    int val$requiredNrMatchers -> a
    org.apache.lucene.search.BooleanScorer2 this$0 -> b
    float score() -> c
org.apache.lucene.search.BooleanScorer2$Coordinator -> a.a.a.f.s:
    float[] coordFactors -> a
    int maxCoord -> b
    int nrMatchers -> c
    org.apache.lucene.search.BooleanScorer2 this$0 -> d
    void init(org.apache.lucene.search.BooleanQuery$BooleanWeight,boolean) -> a
org.apache.lucene.search.BooleanScorer2$SingleMatchScorer -> a.a.a.f.t:
    org.apache.lucene.search.Scorer scorer -> b
    int lastScoredDoc -> c
    float lastDocScore -> d
    org.apache.lucene.search.BooleanScorer2 this$0 -> a
    float score() -> c
    int docID() -> a
    int nextDoc() -> b
    int advance(int) -> a
org.apache.lucene.search.Collector -> a.a.a.f.u:
    void setScorer(org.apache.lucene.search.Scorer) -> a
    void collect(int) -> a
    void setNextReader(org.apache.lucene.index.IndexReader,int) -> a
    boolean acceptsDocsOutOfOrder() -> a
org.apache.lucene.search.ConjunctionScorer -> a.a.a.f.v:
    org.apache.lucene.search.Scorer[] scorers -> a
    int lastDoc -> b
    int doNext() -> d
    int advance(int) -> a
    int docID() -> a
    int nextDoc() -> b
    float score() -> c
org.apache.lucene.search.ConjunctionScorer$1 -> a.a.a.f.w:
    org.apache.lucene.search.ConjunctionScorer this$0 -> a
    int compare(org.apache.lucene.search.Scorer,org.apache.lucene.search.Scorer) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
org.apache.lucene.search.ConstantScoreAutoRewrite -> a.a.a.f.x:
    int DEFAULT_TERM_COUNT_CUTOFF -> a
    double DEFAULT_DOC_COUNT_PERCENT -> b
    int termCountCutoff -> c
    double docCountPercent -> d
    org.apache.lucene.search.BooleanQuery getTopLevelQuery() -> a
    void addClause(org.apache.lucene.search.BooleanQuery,org.apache.lucene.index.Term,float) -> a
    org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader,org.apache.lucene.search.MultiTermQuery) -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void addClause(org.apache.lucene.search.Query,org.apache.lucene.index.Term,float) -> a
    org.apache.lucene.search.Query getTopLevelQuery() -> b
org.apache.lucene.search.ConstantScoreAutoRewrite$CutOffTermCollector -> a.a.a.f.y:
    int docVisitCount -> a
    boolean hasCutOff -> b
    org.apache.lucene.index.IndexReader reader -> c
    int docCountCutoff -> d
    int termCountLimit -> e
    java.util.ArrayList pendingTerms -> f
    boolean collect(org.apache.lucene.index.Term,float) -> a
org.apache.lucene.search.ConstantScoreQuery -> a.a.a.f.z:
    org.apache.lucene.search.Filter filter -> a
    org.apache.lucene.search.Query query -> b
    org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) -> a
    org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.Searcher) -> a
    java.lang.String toString(java.lang.String) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.apache.lucene.search.ConstantScoreQuery$ConstantScorer -> a.a.a.f.aa:
    org.apache.lucene.search.DocIdSetIterator docIdSetIterator -> a
    float theScore -> b
    boolean $assertionsDisabled -> c
    org.apache.lucene.search.ConstantScoreQuery this$0 -> d
    int nextDoc() -> b
    int docID() -> a
    float score() -> c
    int advance(int) -> a
    org.apache.lucene.search.Collector wrapCollector(org.apache.lucene.search.Collector) -> b
    void score(org.apache.lucene.search.Collector) -> a
    boolean score(org.apache.lucene.search.Collector,int,int) -> a
org.apache.lucene.search.ConstantScoreQuery$ConstantScorer$1 -> a.a.a.f.ab:
    org.apache.lucene.search.Collector val$collector -> a
    org.apache.lucene.search.ConstantScoreQuery$ConstantScorer this$1 -> b
    void setScorer(org.apache.lucene.search.Scorer) -> a
    void collect(int) -> a
    void setNextReader(org.apache.lucene.index.IndexReader,int) -> a
    boolean acceptsDocsOutOfOrder() -> a
org.apache.lucene.search.ConstantScoreQuery$ConstantWeight -> a.a.a.f.ac:
    org.apache.lucene.search.Weight innerWeight -> c
    org.apache.lucene.search.Similarity similarity -> d
    float queryNorm -> e
    float queryWeight -> f
    boolean $assertionsDisabled -> a
    org.apache.lucene.search.ConstantScoreQuery this$0 -> b
    float getValue() -> a
    float sumOfSquaredWeights() -> b
    void normalize(float) -> a
    org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.IndexReader,boolean,boolean) -> a
org.apache.lucene.search.DefaultSimilarity -> a.a.a.f.ad:
    boolean discountOverlaps -> a
    float computeNorm(java.lang.String,org.apache.lucene.index.FieldInvertState) -> a
    float queryNorm(float) -> a
    float tf(float) -> b
    float sloppyFreq(int) -> a
    float idf(int,int) -> a
    float coord(int,int) -> b
org.apache.lucene.search.DisjunctionScorer -> a.a.a.f.ae:
    org.apache.lucene.search.Scorer[] subScorers -> b
    int numScorers -> c
    void heapify() -> d
    void heapAdjust(int) -> b
    void heapRemoveRoot() -> e
org.apache.lucene.search.DisjunctionSumScorer -> a.a.a.f.af:
    int minimumNrMatchers -> a
    int doc -> g
    int nrMatchers -> d
    double score -> h
    boolean $assertionsDisabled -> e
    int nextDoc() -> b
    void afterNext() -> g
    void countMatches(int) -> c
    float score() -> c
    int docID() -> a
    int advance(int) -> a
org.apache.lucene.search.DocIdSet -> a.a.a.f.ag:
    org.apache.lucene.search.DocIdSet EMPTY_DOCIDSET -> a
    org.apache.lucene.search.DocIdSetIterator iterator() -> a
org.apache.lucene.search.DocIdSet$1 -> a.a.a.f.ah:
    org.apache.lucene.search.DocIdSetIterator iterator -> b
    org.apache.lucene.search.DocIdSetIterator iterator() -> a
org.apache.lucene.search.DocIdSet$1$1 -> a.a.a.f.ai:
    org.apache.lucene.search.DocIdSet$1 this$0 -> a
    int advance(int) -> a
    int docID() -> a
    int nextDoc() -> b
org.apache.lucene.search.DocIdSetIterator -> a.a.a.f.aj:
    int docID() -> a
    int nextDoc() -> b
    int advance(int) -> a
org.apache.lucene.search.ExactPhraseScorer -> a.a.a.f.ak:
    byte[] norms -> c
    float value -> d
    float[] scoreCache -> e
    int endMinus1 -> g
    int gen -> h
    int[] counts -> i
    int[] gens -> j
    boolean noDocs -> a
    org.apache.lucene.search.ExactPhraseScorer$ChunkState[] chunkStates -> k
    int docID -> l
    int freq -> m
    boolean $assertionsDisabled -> b
    int nextDoc() -> b
    int advance(int) -> a
    java.lang.String toString() -> toString
    int docID() -> a
    float score() -> c
    int phraseFreq() -> d
org.apache.lucene.search.ExactPhraseScorer$ChunkState -> a.a.a.f.al:
    org.apache.lucene.index.TermPositions posEnum -> a
    int offset -> b
    boolean useAdvance -> c
    int posUpto -> d
    int posLimit -> e
    int pos -> f
    int lastPos -> g
org.apache.lucene.search.Explanation -> a.a.a.f.am:
    float value -> a
    java.lang.String description -> b
    java.util.ArrayList details -> c
    float getValue() -> a
    java.lang.String getDescription() -> b
    java.lang.String getSummary() -> c
    org.apache.lucene.search.Explanation[] getDetails() -> d
    java.lang.String toString() -> toString
    java.lang.String toString(int) -> a
org.apache.lucene.search.Explanation$IDFExplanation -> a.a.a.f.an:
    float getIdf() -> a
org.apache.lucene.search.Filter -> a.a.a.f.ao:
    org.apache.lucene.search.DocIdSet getDocIdSet(org.apache.lucene.index.IndexReader) -> a
org.apache.lucene.search.FilteredQuery -> a.a.a.f.ap:
    org.apache.lucene.search.Query query -> a
    org.apache.lucene.search.Filter filter -> b
    boolean $assertionsDisabled -> c
    org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.Searcher) -> a
    org.apache.lucene.search.Scorer getFilteredScorer(org.apache.lucene.index.IndexReader,org.apache.lucene.search.Similarity,org.apache.lucene.search.Weight,org.apache.lucene.search.Weight,org.apache.lucene.search.Filter) -> a
    org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) -> a
    java.lang.String toString(java.lang.String) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.apache.lucene.search.FilteredQuery$1 -> a.a.a.f.aq:
    float value -> d
    org.apache.lucene.search.Weight val$weight -> a
    org.apache.lucene.search.Similarity val$similarity -> b
    org.apache.lucene.search.FilteredQuery this$0 -> c
    float getValue() -> a
    float sumOfSquaredWeights() -> b
    void normalize(float) -> a
    org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.IndexReader,boolean,boolean) -> a
org.apache.lucene.search.FilteredQuery$2 -> a.a.a.f.ar:
    int scorerDoc -> c
    int filterDoc -> d
    org.apache.lucene.search.DocIdSetIterator val$filterIter -> a
    org.apache.lucene.search.Scorer val$scorer -> b
    void score(org.apache.lucene.search.Collector) -> a
    int advanceToNextCommonDoc() -> d
    int nextDoc() -> b
    int advance(int) -> a
    int docID() -> a
    float score() -> c
org.apache.lucene.search.FilteredTermEnum -> a.a.a.f.as:
    org.apache.lucene.index.Term currentTerm -> a
    org.apache.lucene.index.TermEnum actualEnum -> b
    boolean $assertionsDisabled -> c
    boolean termCompare(org.apache.lucene.index.Term) -> a
    float difference() -> d
    boolean endEnum() -> e
    void setEnum(org.apache.lucene.index.TermEnum) -> a
    int docFreq() -> c
    boolean next() -> a
    org.apache.lucene.index.Term term() -> b
    void close() -> close
org.apache.lucene.search.FuzzyQuery -> a.a.a.f.at:
    float minimumSimilarity -> h
    int prefixLength -> i
    boolean termLongEnough -> j
    org.apache.lucene.index.Term term -> a
    org.apache.lucene.search.FilteredTermEnum getEnum(org.apache.lucene.index.IndexReader) -> b
    org.apache.lucene.index.Term getTerm() -> a
    java.lang.String toString(java.lang.String) -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.apache.lucene.search.FuzzyTermEnum -> a.a.a.f.au:
    int[] p -> d
    int[] d -> e
    float similarity -> f
    boolean endEnum -> g
    org.apache.lucene.index.Term searchTerm -> h
    java.lang.String field -> i
    char[] text -> j
    java.lang.String prefix -> k
    float minimumSimilarity -> l
    float scale_factor -> m
    boolean termCompare(org.apache.lucene.index.Term) -> a
    float difference() -> d
    boolean endEnum() -> e
    float similarity(java.lang.String) -> a
    int calculateMaxDistance(int) -> a
    void close() -> close
org.apache.lucene.search.HitQueue -> a.a.a.f.av:
    boolean prePopulate -> a
    org.apache.lucene.search.ScoreDoc getSentinelObject() -> a
    boolean lessThan(org.apache.lucene.search.ScoreDoc,org.apache.lucene.search.ScoreDoc) -> a
    java.lang.Object getSentinelObject() -> b
    boolean lessThan(java.lang.Object,java.lang.Object) -> a
org.apache.lucene.search.IndexSearcher -> a.a.a.f.aw:
    org.apache.lucene.index.IndexReader reader -> a
    boolean closeReader -> e
    org.apache.lucene.index.IndexReader[] subReaders -> b
    int[] docStarts -> c
    java.util.concurrent.ExecutorService executor -> f
    org.apache.lucene.search.IndexSearcher[] subSearchers -> d
    int docBase -> g
    void gatherSubReaders(java.util.List,org.apache.lucene.index.IndexReader) -> a
    org.apache.lucene.index.IndexReader getIndexReader() -> a
    int maxDoc() -> b
    int docFreq(org.apache.lucene.index.Term) -> a
    org.apache.lucene.document.Document doc(int) -> a
    org.apache.lucene.search.Similarity getSimilarity() -> c
    void close() -> close
    void search(org.apache.lucene.search.Query,org.apache.lucene.search.Collector) -> a
    void search(org.apache.lucene.search.Weight,org.apache.lucene.search.Filter,org.apache.lucene.search.Collector) -> a
    org.apache.lucene.search.Query rewrite(org.apache.lucene.search.Query) -> a
    org.apache.lucene.search.Weight createNormalizedWeight(org.apache.lucene.search.Query) -> b
    java.lang.String toString() -> toString
org.apache.lucene.search.IndexSearcher$1 -> a.a.a.f.ax:
    org.apache.lucene.search.IndexSearcher val$searchable -> a
    org.apache.lucene.index.Term val$term -> b
    org.apache.lucene.search.IndexSearcher this$0 -> c
    java.lang.Integer call() -> a
    java.lang.Object call() -> call
org.apache.lucene.search.IndexSearcher$ExecutionHelper -> a.a.a.f.ay:
    java.util.concurrent.CompletionService service -> a
    int numTasks -> b
    boolean hasNext() -> hasNext
    void submit(java.util.concurrent.Callable) -> a
    java.lang.Object next() -> next
    void remove() -> remove
    java.util.Iterator iterator() -> iterator
org.apache.lucene.search.MatchAllDocsQuery -> a.a.a.f.az:
    java.lang.String normsField -> a
    org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.Searcher) -> a
    java.lang.String toString(java.lang.String) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String access$000(org.apache.lucene.search.MatchAllDocsQuery) -> a
org.apache.lucene.search.MatchAllDocsQuery$MatchAllDocsWeight -> a.a.a.f.ba:
    org.apache.lucene.search.Similarity similarity -> b
    float queryWeight -> c
    float queryNorm -> d
    org.apache.lucene.search.MatchAllDocsQuery this$0 -> a
    java.lang.String toString() -> toString
    float getValue() -> a
    float sumOfSquaredWeights() -> b
    void normalize(float) -> a
    org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.IndexReader,boolean,boolean) -> a
org.apache.lucene.search.MatchAllDocsQuery$MatchAllScorer -> a.a.a.f.bb:
    org.apache.lucene.index.TermDocs termDocs -> a
    float score -> b
    byte[] norms -> c
    int doc -> e
    org.apache.lucene.search.MatchAllDocsQuery this$0 -> d
    int docID() -> a
    int nextDoc() -> b
    float score() -> c
    int advance(int) -> a
org.apache.lucene.search.MultiPhraseQuery -> a.a.a.f.bc:
    java.lang.String field -> a
    java.util.ArrayList termArrays -> b
    java.util.ArrayList positions -> c
    int slop -> d
    void setSlop(int) -> a
    void add(org.apache.lucene.index.Term[]) -> a
    void add(org.apache.lucene.index.Term[],int) -> a
    org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) -> a
    org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.Searcher) -> a
    java.lang.String toString(java.lang.String) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int termArraysHashCode() -> a
    boolean termArraysEquals(java.util.List,java.util.List) -> a
    java.util.ArrayList access$000(org.apache.lucene.search.MultiPhraseQuery) -> a
    java.util.ArrayList access$100(org.apache.lucene.search.MultiPhraseQuery) -> b
    int access$200(org.apache.lucene.search.MultiPhraseQuery) -> c
    java.lang.String access$300(org.apache.lucene.search.MultiPhraseQuery) -> d
org.apache.lucene.search.MultiPhraseQuery$MultiPhraseWeight -> a.a.a.f.bd:
    org.apache.lucene.search.Similarity similarity -> b
    float value -> c
    org.apache.lucene.search.Explanation$IDFExplanation idfExp -> d
    float idf -> e
    float queryNorm -> f
    float queryWeight -> g
    org.apache.lucene.search.MultiPhraseQuery this$0 -> a
    float getValue() -> a
    float sumOfSquaredWeights() -> b
    void normalize(float) -> a
    org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.IndexReader,boolean,boolean) -> a
org.apache.lucene.search.MultiTermQuery -> a.a.a.f.be:
    org.apache.lucene.search.MultiTermQuery$RewriteMethod rewriteMethod -> b
    int numberOfTerms -> c
    org.apache.lucene.search.MultiTermQuery$RewriteMethod CONSTANT_SCORE_FILTER_REWRITE -> d
    org.apache.lucene.search.MultiTermQuery$RewriteMethod SCORING_BOOLEAN_QUERY_REWRITE -> e
    org.apache.lucene.search.MultiTermQuery$RewriteMethod CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE -> f
    org.apache.lucene.search.MultiTermQuery$RewriteMethod CONSTANT_SCORE_AUTO_REWRITE_DEFAULT -> g
    org.apache.lucene.search.FilteredTermEnum getEnum(org.apache.lucene.index.IndexReader) -> b
    void incTotalNumberOfTerms(int) -> a
    org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) -> a
    void setRewriteMethod(org.apache.lucene.search.MultiTermQuery$RewriteMethod) -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.apache.lucene.search.MultiTermQuery$1 -> a.a.a.f.bf:
    org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader,org.apache.lucene.search.MultiTermQuery) -> a
org.apache.lucene.search.MultiTermQuery$2 -> a.a.a.f.bg:
org.apache.lucene.search.MultiTermQuery$ConstantScoreAutoRewrite -> a.a.a.f.bh:
org.apache.lucene.search.MultiTermQuery$RewriteMethod -> a.a.a.f.bi:
    org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader,org.apache.lucene.search.MultiTermQuery) -> a
    org.apache.lucene.search.FilteredTermEnum getTermsEnum(org.apache.lucene.index.IndexReader,org.apache.lucene.search.MultiTermQuery) -> b
org.apache.lucene.search.MultiTermQuery$TopTermsScoringBooleanQueryRewrite -> a.a.a.f.bj:
    int getMaxSize() -> a
    org.apache.lucene.search.BooleanQuery getTopLevelQuery() -> c
    void addClause(org.apache.lucene.search.BooleanQuery,org.apache.lucene.index.Term,float) -> a
    void addClause(org.apache.lucene.search.Query,org.apache.lucene.index.Term,float) -> a
    org.apache.lucene.search.Query getTopLevelQuery() -> b
org.apache.lucene.search.MultiTermQueryWrapperFilter -> a.a.a.f.bk:
    org.apache.lucene.search.MultiTermQuery query -> a
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    org.apache.lucene.search.DocIdSet getDocIdSet(org.apache.lucene.index.IndexReader) -> a
org.apache.lucene.search.NumericRangeQuery -> a.a.a.f.bl:
    java.lang.String field -> a
    int precisionStep -> h
    org.apache.lucene.document.NumericField$DataType dataType -> i
    java.lang.Number min -> j
    java.lang.Number max -> k
    boolean minInclusive -> l
    boolean maxInclusive -> m
    long LONG_NEGATIVE_INFINITY -> n
    long LONG_POSITIVE_INFINITY -> o
    int INT_NEGATIVE_INFINITY -> p
    int INT_POSITIVE_INFINITY -> q
    org.apache.lucene.search.NumericRangeQuery newLongRange(java.lang.String,int,java.lang.Long,java.lang.Long,boolean,boolean) -> a
    org.apache.lucene.search.NumericRangeQuery newIntRange(java.lang.String,int,java.lang.Integer,java.lang.Integer,boolean,boolean) -> a
    org.apache.lucene.search.NumericRangeQuery newDoubleRange(java.lang.String,int,java.lang.Double,java.lang.Double,boolean,boolean) -> a
    org.apache.lucene.search.NumericRangeQuery newFloatRange(java.lang.String,int,java.lang.Float,java.lang.Float,boolean,boolean) -> a
    org.apache.lucene.search.FilteredTermEnum getEnum(org.apache.lucene.index.IndexReader) -> b
    java.lang.String toString(java.lang.String) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.apache.lucene.search.NumericRangeQuery$1 -> a.a.a.f.bm:
    int[] $SwitchMap$org$apache$lucene$document$NumericField$DataType -> a
org.apache.lucene.search.NumericRangeQuery$NumericRangeTermEnum -> a.a.a.f.bn:
    org.apache.lucene.index.IndexReader reader -> f
    java.util.LinkedList rangeBounds -> g
    org.apache.lucene.index.Term termTemplate -> h
    java.lang.String currentUpperBound -> i
    boolean $assertionsDisabled -> d
    org.apache.lucene.search.NumericRangeQuery this$0 -> e
    float difference() -> d
    boolean endEnum() -> e
    void setEnum(org.apache.lucene.index.TermEnum) -> a
    boolean termCompare(org.apache.lucene.index.Term) -> a
    boolean next() -> a
    void close() -> close
    java.util.LinkedList access$000(org.apache.lucene.search.NumericRangeQuery$NumericRangeTermEnum) -> a
org.apache.lucene.search.NumericRangeQuery$NumericRangeTermEnum$1 -> a.a.a.f.bo:
    org.apache.lucene.search.NumericRangeQuery val$this$0 -> a
    org.apache.lucene.search.NumericRangeQuery$NumericRangeTermEnum this$1 -> b
    void addRange(java.lang.String,java.lang.String) -> a
org.apache.lucene.search.NumericRangeQuery$NumericRangeTermEnum$2 -> a.a.a.f.bp:
    org.apache.lucene.search.NumericRangeQuery val$this$0 -> a
    org.apache.lucene.search.NumericRangeQuery$NumericRangeTermEnum this$1 -> b
    void addRange(java.lang.String,java.lang.String) -> a
org.apache.lucene.search.PhrasePositions -> a.a.a.f.bq:
    int doc -> a
    int position -> b
    int count -> c
    int offset -> d
    int ord -> e
    org.apache.lucene.index.TermPositions tp -> f
    org.apache.lucene.search.PhrasePositions next -> g
    int rptGroup -> h
    int rptInd -> i
    org.apache.lucene.index.Term[] terms -> j
    boolean skipTo(int) -> a
    void firstPosition() -> a
    boolean nextPosition() -> b
    java.lang.String toString() -> toString
org.apache.lucene.search.PhraseQuery -> a.a.a.f.br:
    java.lang.String field -> a
    java.util.ArrayList terms -> b
    java.util.ArrayList positions -> c
    int maxPosition -> d
    int slop -> e
    void setSlop(int) -> a
    void add(org.apache.lucene.index.Term) -> a
    void add(org.apache.lucene.index.Term,int) -> a
    org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) -> a
    org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.Searcher) -> a
    java.lang.String toString(java.lang.String) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.util.ArrayList access$000(org.apache.lucene.search.PhraseQuery) -> a
    java.util.ArrayList access$100(org.apache.lucene.search.PhraseQuery) -> b
    int access$200(org.apache.lucene.search.PhraseQuery) -> c
    java.lang.String access$300(org.apache.lucene.search.PhraseQuery) -> d
org.apache.lucene.search.PhraseQuery$PhraseWeight -> a.a.a.f.bs:
    org.apache.lucene.search.Similarity similarity -> b
    float value -> c
    float idf -> d
    float queryNorm -> e
    float queryWeight -> f
    org.apache.lucene.search.Explanation$IDFExplanation idfExp -> g
    org.apache.lucene.search.PhraseQuery this$0 -> a
    java.lang.String toString() -> toString
    float getValue() -> a
    float sumOfSquaredWeights() -> b
    void normalize(float) -> a
    org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.IndexReader,boolean,boolean) -> a
org.apache.lucene.search.PhraseQuery$PostingsAndFreq -> a.a.a.f.bt:
    org.apache.lucene.index.TermPositions postings -> a
    int docFreq -> b
    int position -> c
    org.apache.lucene.index.Term[] terms -> d
    int nTerms -> e
    int compareTo(org.apache.lucene.search.PhraseQuery$PostingsAndFreq) -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int compareTo(java.lang.Object) -> compareTo
org.apache.lucene.search.PhraseQueue -> a.a.a.f.bu:
    boolean lessThan(org.apache.lucene.search.PhrasePositions,org.apache.lucene.search.PhrasePositions) -> a
    boolean lessThan(java.lang.Object,java.lang.Object) -> a
org.apache.lucene.search.PhraseScorer -> a.a.a.f.bv:
    byte[] norms -> a
    float value -> b
    org.apache.lucene.search.PhrasePositions min -> c
    org.apache.lucene.search.PhrasePositions max -> d
    float freq -> e
    int docID() -> a
    int nextDoc() -> b
    boolean advanceMin(int) -> b
    float score() -> c
    int advance(int) -> a
    float phraseFreq() -> d
    java.lang.String toString() -> toString
org.apache.lucene.search.PrefixQuery -> a.a.a.f.bw:
    org.apache.lucene.index.Term prefix -> a
    org.apache.lucene.search.FilteredTermEnum getEnum(org.apache.lucene.index.IndexReader) -> b
    java.lang.String toString(java.lang.String) -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.apache.lucene.search.PrefixTermEnum -> a.a.a.f.bx:
    org.apache.lucene.index.Term prefix -> d
    boolean endEnum -> e
    float difference() -> d
    boolean endEnum() -> e
    boolean termCompare(org.apache.lucene.index.Term) -> a
org.apache.lucene.search.Query -> a.a.a.f.by:
    float boost -> a
    void setBoost(float) -> a
    float getBoost() -> e
    java.lang.String toString(java.lang.String) -> a
    java.lang.String toString() -> toString
    org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.Searcher) -> a
    org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) -> a
    org.apache.lucene.search.Similarity getSimilarity(org.apache.lucene.search.Searcher) -> b
    java.lang.Object clone() -> clone
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.apache.lucene.search.QueryWrapperFilter -> a.a.a.f.bz:
    org.apache.lucene.search.Query query -> a
    org.apache.lucene.search.DocIdSet getDocIdSet(org.apache.lucene.index.IndexReader) -> a
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.apache.lucene.search.QueryWrapperFilter$1 -> a.a.a.f.ca:
    org.apache.lucene.search.Weight val$weight -> b
    org.apache.lucene.index.IndexReader val$reader -> c
    org.apache.lucene.search.QueryWrapperFilter this$0 -> d
    org.apache.lucene.search.DocIdSetIterator iterator() -> a
org.apache.lucene.search.ReqExclScorer -> a.a.a.f.cb:
    org.apache.lucene.search.Scorer reqScorer -> a
    org.apache.lucene.search.DocIdSetIterator exclDisi -> b
    int doc -> c
    int nextDoc() -> b
    int toNonExcluded() -> d
    int docID() -> a
    float score() -> c
    int advance(int) -> a
org.apache.lucene.search.ReqOptSumScorer -> a.a.a.f.cc:
    org.apache.lucene.search.Scorer reqScorer -> a
    org.apache.lucene.search.Scorer optScorer -> b
    int nextDoc() -> b
    int advance(int) -> a
    int docID() -> a
    float score() -> c
org.apache.lucene.search.ScoreDoc -> a.a.a.f.cd:
    float score -> a
    int doc -> b
    int shardIndex -> c
    java.lang.String toString() -> toString
org.apache.lucene.search.Scorer -> a.a.a.f.ce:
    org.apache.lucene.search.Similarity similarity -> a
    org.apache.lucene.search.Weight weight -> f
    org.apache.lucene.search.Similarity getSimilarity() -> f
    void score(org.apache.lucene.search.Collector) -> a
    boolean score(org.apache.lucene.search.Collector,int,int) -> a
    float score() -> c
org.apache.lucene.search.ScoringRewrite -> a.a.a.f.cf:
    org.apache.lucene.search.ScoringRewrite SCORING_BOOLEAN_QUERY_REWRITE -> a
    org.apache.lucene.search.MultiTermQuery$RewriteMethod CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE -> b
    org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader,org.apache.lucene.search.MultiTermQuery) -> a
org.apache.lucene.search.ScoringRewrite$1 -> a.a.a.f.cg:
    org.apache.lucene.search.BooleanQuery getTopLevelQuery() -> a
    void addClause(org.apache.lucene.search.BooleanQuery,org.apache.lucene.index.Term,float) -> a
    void addClause(org.apache.lucene.search.Query,org.apache.lucene.index.Term,float) -> a
    org.apache.lucene.search.Query getTopLevelQuery() -> b
org.apache.lucene.search.ScoringRewrite$2 -> a.a.a.f.ch:
    org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader,org.apache.lucene.search.MultiTermQuery) -> a
org.apache.lucene.search.ScoringRewrite$3 -> a.a.a.f.ci:
    org.apache.lucene.search.Query val$result -> a
    org.apache.lucene.search.MultiTermQuery val$query -> b
    int[] val$size -> c
    org.apache.lucene.search.ScoringRewrite this$0 -> d
    boolean collect(org.apache.lucene.index.Term,float) -> a
org.apache.lucene.search.Searchable -> a.a.a.f.cj:
org.apache.lucene.search.Searcher -> a.a.a.f.ck:
    org.apache.lucene.search.Similarity similarity -> a
    void search(org.apache.lucene.search.Query,org.apache.lucene.search.Collector) -> a
    org.apache.lucene.search.Similarity getSimilarity() -> c
    org.apache.lucene.search.Weight createNormalizedWeight(org.apache.lucene.search.Query) -> b
    void search(org.apache.lucene.search.Weight,org.apache.lucene.search.Filter,org.apache.lucene.search.Collector) -> a
    int docFreq(org.apache.lucene.index.Term) -> a
    int maxDoc() -> b
    org.apache.lucene.search.Query rewrite(org.apache.lucene.search.Query) -> a
org.apache.lucene.search.Similarity -> a.a.a.f.cl:
    org.apache.lucene.util.VirtualMethod withoutDocFreqMethod -> a
    org.apache.lucene.util.VirtualMethod withDocFreqMethod -> b
    boolean hasIDFExplainWithDocFreqAPI -> c
    org.apache.lucene.search.Similarity defaultImpl -> d
    float[] NORM_TABLE -> e
    org.apache.lucene.search.Similarity getDefault() -> a
    float decodeNormValue(byte) -> a
    float computeNorm(java.lang.String,org.apache.lucene.index.FieldInvertState) -> a
    float queryNorm(float) -> a
    byte encodeNormValue(float) -> c
    float tf(int) -> b
    float sloppyFreq(int) -> a
    float tf(float) -> b
    org.apache.lucene.search.Explanation$IDFExplanation idfExplain(org.apache.lucene.index.Term,org.apache.lucene.search.Searcher,int) -> a
    org.apache.lucene.search.Explanation$IDFExplanation idfExplain(org.apache.lucene.index.Term,org.apache.lucene.search.Searcher) -> a
    org.apache.lucene.search.Explanation$IDFExplanation idfExplain(java.util.Collection,org.apache.lucene.search.Searcher) -> a
    float idf(int,int) -> a
    float coord(int,int) -> b
org.apache.lucene.search.Similarity$1 -> a.a.a.f.cm:
    int val$df -> a
    int val$max -> b
    float val$idf -> c
    org.apache.lucene.search.Similarity this$0 -> d
    float getIdf() -> a
org.apache.lucene.search.Similarity$2 -> a.a.a.f.cn:
    float val$fIdf -> a
    java.lang.StringBuilder val$exp -> b
    org.apache.lucene.search.Similarity this$0 -> c
    float getIdf() -> a
org.apache.lucene.search.SingleTermEnum -> a.a.a.f.co:
    org.apache.lucene.index.Term singleTerm -> d
    boolean endEnum -> e
    float difference() -> d
    boolean endEnum() -> e
    boolean termCompare(org.apache.lucene.index.Term) -> a
org.apache.lucene.search.SloppyPhraseScorer -> a.a.a.f.cp:
    int slop -> g
    int numPostings -> h
    org.apache.lucene.search.PhraseQueue pq -> i
    int end -> j
    boolean hasRpts -> k
    boolean checkedRpts -> l
    boolean hasMultiTermRpts -> m
    org.apache.lucene.search.PhrasePositions[][] rptGroups -> n
    org.apache.lucene.search.PhrasePositions[] rptStack -> o
    boolean $assertionsDisabled -> e
    float phraseFreq() -> d
    boolean advancePP(org.apache.lucene.search.PhrasePositions) -> a
    boolean advanceRpts(org.apache.lucene.search.PhrasePositions) -> b
    org.apache.lucene.search.PhrasePositions lesser(org.apache.lucene.search.PhrasePositions,org.apache.lucene.search.PhrasePositions) -> a
    int collide(org.apache.lucene.search.PhrasePositions) -> c
    boolean initPhrasePositions() -> e
    void initSimple() -> g
    boolean initComplex() -> h
    void placeFirstPositions() -> i
    void fillQueue() -> j
    boolean advanceRepeatGroups() -> k
    boolean initFirstTime() -> l
    void sortRptGroups(java.util.ArrayList) -> a
    java.util.ArrayList gatherRptGroups(java.util.LinkedHashMap) -> a
    int tpPos(org.apache.lucene.search.PhrasePositions) -> d
    java.util.LinkedHashMap repeatingTerms() -> m
    org.apache.lucene.search.PhrasePositions[] repeatingPPs(java.util.HashMap) -> a
    java.util.ArrayList ppTermsBitSets(org.apache.lucene.search.PhrasePositions[],java.util.HashMap) -> a
    void unionTermGroups(java.util.ArrayList) -> b
    java.util.HashMap termGroups(java.util.LinkedHashMap,java.util.ArrayList) -> a
org.apache.lucene.search.SloppyPhraseScorer$1 -> a.a.a.f.cq:
    org.apache.lucene.search.SloppyPhraseScorer this$0 -> a
    int compare(org.apache.lucene.search.PhrasePositions,org.apache.lucene.search.PhrasePositions) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
org.apache.lucene.search.TermCollectingRewrite -> a.a.a.f.cr:
    org.apache.lucene.search.Query getTopLevelQuery() -> b
    void addClause(org.apache.lucene.search.Query,org.apache.lucene.index.Term,float) -> a
    void collectTerms(org.apache.lucene.index.IndexReader,org.apache.lucene.search.MultiTermQuery,org.apache.lucene.search.TermCollectingRewrite$TermCollector) -> a
org.apache.lucene.search.TermCollectingRewrite$TermCollector -> a.a.a.f.cs:
    boolean collect(org.apache.lucene.index.Term,float) -> a
org.apache.lucene.search.TermQuery -> a.a.a.f.ct:
    org.apache.lucene.index.Term term -> a
    org.apache.lucene.index.Term getTerm() -> a
    org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.Searcher) -> a
    java.lang.String toString(java.lang.String) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    org.apache.lucene.index.Term access$000(org.apache.lucene.search.TermQuery) -> a
org.apache.lucene.search.TermQuery$TermWeight -> a.a.a.f.cu:
    org.apache.lucene.search.Similarity similarity -> b
    float value -> c
    float idf -> d
    float queryNorm -> e
    float queryWeight -> f
    org.apache.lucene.search.Explanation$IDFExplanation idfExp -> g
    java.util.Set hash -> h
    org.apache.lucene.search.TermQuery this$0 -> a
    java.lang.String toString() -> toString
    float getValue() -> a
    float sumOfSquaredWeights() -> b
    void normalize(float) -> a
    org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.IndexReader,boolean,boolean) -> a
    java.util.Set access$100(org.apache.lucene.search.TermQuery$TermWeight) -> a
org.apache.lucene.search.TermQuery$TermWeight$1 -> a.a.a.f.cv:
    org.apache.lucene.search.TermQuery val$this$0 -> a
    int[] val$dfSum -> b
    org.apache.lucene.search.TermQuery$TermWeight this$1 -> c
    void add(int,org.apache.lucene.index.IndexReader) -> a
org.apache.lucene.search.TermRangeQuery -> a.a.a.f.cw:
    java.lang.String lowerTerm -> a
    java.lang.String upperTerm -> h
    java.text.Collator collator -> i
    java.lang.String field -> j
    boolean includeLower -> k
    boolean includeUpper -> l
    java.lang.String getField() -> a
    org.apache.lucene.search.FilteredTermEnum getEnum(org.apache.lucene.index.IndexReader) -> b
    java.lang.String toString(java.lang.String) -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.apache.lucene.search.TermRangeTermEnum -> a.a.a.f.cx:
    java.text.Collator collator -> d
    boolean endEnum -> e
    java.lang.String field -> f
    java.lang.String upperTermText -> g
    java.lang.String lowerTermText -> h
    boolean includeLower -> i
    boolean includeUpper -> j
    float difference() -> d
    boolean endEnum() -> e
    boolean termCompare(org.apache.lucene.index.Term) -> a
org.apache.lucene.search.TermScorer -> a.a.a.f.cy:
    org.apache.lucene.index.TermDocs termDocs -> b
    byte[] norms -> c
    float weightValue -> d
    int doc -> e
    int freq -> g
    int[] docs -> h
    int[] freqs -> i
    int pointer -> j
    int pointerMax -> k
    float[] scoreCache -> l
    boolean $assertionsDisabled -> a
    void score(org.apache.lucene.search.Collector) -> a
    boolean score(org.apache.lucene.search.Collector,int,int) -> a
    int docID() -> a
    int nextDoc() -> b
    float score() -> c
    int advance(int) -> a
    java.lang.String toString() -> toString
org.apache.lucene.search.TopDocs -> a.a.a.f.cz:
    int totalHits -> a
    org.apache.lucene.search.ScoreDoc[] scoreDocs -> b
    float maxScore -> d
    boolean $assertionsDisabled -> c
org.apache.lucene.search.TopDocsCollector -> a.a.a.f.da:
    org.apache.lucene.search.TopDocs EMPTY_TOPDOCS -> a
    org.apache.lucene.util.PriorityQueue pq -> b
    int totalHits -> c
    void populateResults(org.apache.lucene.search.ScoreDoc[],int) -> a
    org.apache.lucene.search.TopDocs newTopDocs(org.apache.lucene.search.ScoreDoc[],int) -> b
    int topDocsSize() -> b
    org.apache.lucene.search.TopDocs topDocs() -> c
    org.apache.lucene.search.TopDocs topDocs(int,int) -> a
org.apache.lucene.search.TopScoreDocCollector -> a.a.a.f.db:
    org.apache.lucene.search.ScoreDoc pqTop -> d
    int docBase -> e
    org.apache.lucene.search.Scorer scorer -> f
    org.apache.lucene.search.TopScoreDocCollector create(int,boolean) -> a
    org.apache.lucene.search.TopScoreDocCollector create(int,org.apache.lucene.search.ScoreDoc,boolean) -> a
    org.apache.lucene.search.TopDocs newTopDocs(org.apache.lucene.search.ScoreDoc[],int) -> b
    void setNextReader(org.apache.lucene.index.IndexReader,int) -> a
    void setScorer(org.apache.lucene.search.Scorer) -> a
org.apache.lucene.search.TopScoreDocCollector$1 -> a.a.a.f.dc:
org.apache.lucene.search.TopScoreDocCollector$InOrderPagingScoreDocCollector -> a.a.a.f.dd:
    org.apache.lucene.search.ScoreDoc after -> h
    int afterDoc -> i
    int collectedHits -> j
    boolean $assertionsDisabled -> g
    void collect(int) -> a
    boolean acceptsDocsOutOfOrder() -> a
    void setNextReader(org.apache.lucene.index.IndexReader,int) -> a
    int topDocsSize() -> b
    org.apache.lucene.search.TopDocs newTopDocs(org.apache.lucene.search.ScoreDoc[],int) -> b
org.apache.lucene.search.TopScoreDocCollector$InOrderTopScoreDocCollector -> a.a.a.f.de:
    boolean $assertionsDisabled -> g
    void collect(int) -> a
    boolean acceptsDocsOutOfOrder() -> a
org.apache.lucene.search.TopScoreDocCollector$OutOfOrderPagingScoreDocCollector -> a.a.a.f.df:
    org.apache.lucene.search.ScoreDoc after -> h
    int afterDoc -> i
    int collectedHits -> j
    boolean $assertionsDisabled -> g
    void collect(int) -> a
    boolean acceptsDocsOutOfOrder() -> a
    void setNextReader(org.apache.lucene.index.IndexReader,int) -> a
    int topDocsSize() -> b
    org.apache.lucene.search.TopDocs newTopDocs(org.apache.lucene.search.ScoreDoc[],int) -> b
org.apache.lucene.search.TopScoreDocCollector$OutOfOrderTopScoreDocCollector -> a.a.a.f.dg:
    boolean $assertionsDisabled -> g
    void collect(int) -> a
    boolean acceptsDocsOutOfOrder() -> a
org.apache.lucene.search.TopTermsRewrite -> a.a.a.f.dh:
    int size -> a
    int getMaxSize() -> a
    org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader,org.apache.lucene.search.MultiTermQuery) -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.apache.lucene.search.TopTermsRewrite$1 -> a.a.a.f.di:
    org.apache.lucene.search.TopTermsRewrite$ScoreTerm st -> d
    java.util.PriorityQueue val$stQueue -> a
    int val$maxSize -> b
    org.apache.lucene.search.TopTermsRewrite this$0 -> c
    boolean collect(org.apache.lucene.index.Term,float) -> a
org.apache.lucene.search.TopTermsRewrite$ScoreTerm -> a.a.a.f.dj:
    org.apache.lucene.index.Term term -> a
    float boost -> b
    int compareTo(org.apache.lucene.search.TopTermsRewrite$ScoreTerm) -> a
    int compareTo(java.lang.Object) -> compareTo
org.apache.lucene.search.Weight -> a.a.a.f.dk:
    float getValue() -> a
    void normalize(float) -> a
    org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.IndexReader,boolean,boolean) -> a
    float sumOfSquaredWeights() -> b
org.apache.lucene.search.WildcardQuery -> a.a.a.f.dl:
    boolean termContainsWildcard -> h
    boolean termIsPrefix -> i
    org.apache.lucene.index.Term term -> a
    org.apache.lucene.search.FilteredTermEnum getEnum(org.apache.lucene.index.IndexReader) -> b
    org.apache.lucene.index.Term getTerm() -> a
    java.lang.String toString(java.lang.String) -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.apache.lucene.search.WildcardTermEnum -> a.a.a.f.dm:
    org.apache.lucene.index.Term searchTerm -> d
    java.lang.String field -> e
    java.lang.String text -> f
    java.lang.String pre -> g
    int preLen -> h
    boolean endEnum -> i
    boolean termCompare(org.apache.lucene.index.Term) -> a
    float difference() -> d
    boolean endEnum() -> e
    boolean wildcardEquals(java.lang.String,int,java.lang.String,int) -> a
org.apache.lucene.store.AlreadyClosedException -> a.a.a.g.a:
org.apache.lucene.store.BufferedIndexInput -> a.a.a.g.b:
    int bufferSize -> a
    byte[] buffer -> d
    long bufferStart -> b
    int bufferLength -> c
    int bufferPosition -> f
    boolean $assertionsDisabled -> e
    byte readByte() -> b
    void setBufferSize(int) -> a
    void newBuffer(byte[]) -> a
    void checkBufferSize(int) -> c
    void readBytes(byte[],int,int) -> a
    void readBytes(byte[],int,int,boolean) -> a
    int readInt() -> d_
    long readLong() -> e_
    int readVInt() -> f
    long readVLong() -> g
    void refill() -> h
    void readInternal(byte[],int,int) -> b
    long getFilePointer() -> d
    void seek(long) -> a
    void seekInternal(long) -> b
    java.lang.Object clone() -> clone
org.apache.lucene.store.BufferedIndexOutput -> a.a.a.g.c:
    byte[] buffer -> a
    long bufferStart -> b
    int bufferPosition -> d
    void writeByte(byte) -> a
    void writeBytes(byte[],int,int) -> a
    void flush() -> a
    void flushBuffer(byte[],int) -> b
    void flushBuffer(byte[],int,int) -> b
    void close() -> close
    long getFilePointer() -> b
    void seek(long) -> a
org.apache.lucene.store.ChecksumIndexInput -> a.a.a.g.d:
    org.apache.lucene.store.IndexInput main -> a
    java.util.zip.Checksum digest -> b
    byte readByte() -> b
    void readBytes(byte[],int,int) -> a
    long getChecksum() -> h
    void close() -> close
    long getFilePointer() -> d
    void seek(long) -> a
    long length() -> e
org.apache.lucene.store.ChecksumIndexOutput -> a.a.a.g.e:
    org.apache.lucene.store.IndexOutput main -> a
    java.util.zip.Checksum digest -> b
    void writeByte(byte) -> a
    void writeBytes(byte[],int,int) -> a
    long getChecksum() -> c
    void flush() -> a
    void close() -> close
    long getFilePointer() -> b
    void seek(long) -> a
    void prepareCommit() -> d
    void finishCommit() -> e
    long length() -> f
org.apache.lucene.store.DataInput -> a.a.a.g.f:
    boolean preUTF8Strings -> a
    void setModifiedUTF8StringsMode() -> i
    byte readByte() -> b
    void readBytes(byte[],int,int) -> a
    void readBytes(byte[],int,int,boolean) -> a
    int readInt() -> d_
    int readVInt() -> f
    long readLong() -> e_
    long readVLong() -> g
    java.lang.String readString() -> j
    java.lang.String readModifiedUTF8String() -> d
    void readChars(char[],int,int) -> a
    java.lang.Object clone() -> clone
    java.util.Map readStringStringMap() -> k
org.apache.lucene.store.DataOutput -> a.a.a.g.g:
    int COPY_BUFFER_SIZE -> a
    byte[] copyBuffer -> b
    boolean $assertionsDisabled -> c
    void writeByte(byte) -> a
    void writeBytes(byte[],int) -> a
    void writeBytes(byte[],int,int) -> a
    void writeInt(int) -> a
    void writeVInt(int) -> b
    void writeLong(long) -> b
    void writeVLong(long) -> c
    void writeString(java.lang.String) -> a
    void copyBytes(org.apache.lucene.store.DataInput,long) -> a
    void writeStringStringMap(java.util.Map) -> a
org.apache.lucene.store.Directory -> a.a.a.g.h:
    boolean isOpen -> b
    org.apache.lucene.store.LockFactory lockFactory -> c
    boolean $assertionsDisabled -> d
    java.lang.String[] listAll() -> a
    boolean fileExists(java.lang.String) -> b
    void deleteFile(java.lang.String) -> c
    long fileLength(java.lang.String) -> d
    org.apache.lucene.store.IndexOutput createOutput(java.lang.String) -> e
    void sync(java.lang.String) -> g
    void sync(java.util.Collection) -> a
    org.apache.lucene.store.IndexInput openInput(java.lang.String) -> a
    org.apache.lucene.store.IndexInput openInput(java.lang.String,int) -> a
    org.apache.lucene.store.Lock makeLock(java.lang.String) -> f
    void close() -> close
    void setLockFactory(org.apache.lucene.store.LockFactory) -> a
    org.apache.lucene.store.LockFactory getLockFactory() -> b
    java.lang.String getLockID() -> c
    java.lang.String toString() -> toString
    void ensureOpen() -> d
org.apache.lucene.store.FSDirectory -> a.a.a.g.i:
    int DEFAULT_READ_CHUNK_SIZE -> a
    java.io.File directory -> e
    java.util.Set staleFiles -> f
    int chunkSize -> g
    java.io.File getCanonicalPath(java.io.File) -> c
    org.apache.lucene.store.FSDirectory open(java.io.File) -> a
    org.apache.lucene.store.FSDirectory open(java.io.File,org.apache.lucene.store.LockFactory) -> a
    void setLockFactory(org.apache.lucene.store.LockFactory) -> a
    java.lang.String[] listAll(java.io.File) -> b
    java.lang.String[] listAll() -> a
    boolean fileExists(java.lang.String) -> b
    long fileLength(java.lang.String) -> d
    void deleteFile(java.lang.String) -> c
    org.apache.lucene.store.IndexOutput createOutput(java.lang.String) -> e
    void ensureCanWrite(java.lang.String) -> h
    void onIndexOutputClosed(org.apache.lucene.store.FSDirectory$FSIndexOutput) -> a
    void sync(java.lang.String) -> g
    void sync(java.util.Collection) -> a
    org.apache.lucene.store.IndexInput openInput(java.lang.String) -> a
    java.lang.String getLockID() -> c
    void close() -> close
    java.io.File getDirectory() -> e
    java.lang.String toString() -> toString
    int getReadChunkSize() -> f
    void fsync(java.lang.String) -> i
org.apache.lucene.store.FSDirectory$1 -> a.a.a.g.j:
    boolean accept(java.io.File,java.lang.String) -> accept
org.apache.lucene.store.FSDirectory$FSIndexOutput -> a.a.a.g.k:
    org.apache.lucene.store.FSDirectory parent -> a
    java.lang.String name -> b
    java.io.RandomAccessFile file -> d
    boolean isOpen -> e
    void flushBuffer(byte[],int,int) -> b
    void close() -> close
    void seek(long) -> a
    long length() -> f
    void setLength(long) -> d
    java.lang.String access$000(org.apache.lucene.store.FSDirectory$FSIndexOutput) -> a
org.apache.lucene.store.FSLockFactory -> a.a.a.g.l:
    java.io.File lockDir -> a
    void setLockDir(java.io.File) -> a
    java.io.File getLockDir() -> a
org.apache.lucene.store.IndexInput -> a.a.a.g.m:
    java.lang.String resourceDescription -> a
    boolean $assertionsDisabled -> j
    void skipChars(int) -> b
    void close() -> close
    long getFilePointer() -> d
    void seek(long) -> a
    long length() -> e
    java.lang.String toString() -> toString
org.apache.lucene.store.IndexOutput -> a.a.a.g.n:
    void flush() -> a
    void close() -> close
    long getFilePointer() -> b
    void seek(long) -> a
    long length() -> f
    void setLength(long) -> d
org.apache.lucene.store.Lock -> a.a.a.g.o:
    long LOCK_POLL_INTERVAL -> a
    java.lang.Throwable failureReason -> b
    boolean obtain() -> a
    boolean obtain(long) -> a
    void release() -> b
org.apache.lucene.store.LockFactory -> a.a.a.g.p:
    java.lang.String lockPrefix -> b
    void setLockPrefix(java.lang.String) -> a
    org.apache.lucene.store.Lock makeLock(java.lang.String) -> b
org.apache.lucene.store.LockObtainFailedException -> a.a.a.g.q:
org.apache.lucene.store.LockReleaseFailedException -> a.a.a.g.r:
org.apache.lucene.store.MMapDirectory -> a.a.a.g.s:
    boolean useUnmapHack -> j
    int DEFAULT_MAX_BUFF -> g
    int chunkSizePower -> k
    boolean UNMAP_SUPPORTED -> h
    boolean $assertionsDisabled -> i
    void cleanMapping(java.nio.ByteBuffer) -> a
    void setMaxChunkSize(int) -> a
    org.apache.lucene.store.IndexInput openInput(java.lang.String,int) -> a
org.apache.lucene.store.MMapDirectory$1 -> a.a.a.g.t:
    java.nio.ByteBuffer val$buffer -> a
    org.apache.lucene.store.MMapDirectory this$0 -> b
    java.lang.Object run() -> run
org.apache.lucene.store.MMapDirectory$MMapIndexInput -> a.a.a.g.u:
    java.nio.ByteBuffer[] buffers -> c
    long length -> d
    long chunkSizeMask -> e
    long chunkSize -> f
    int chunkSizePower -> g
    int curBufIndex -> h
    java.nio.ByteBuffer curBuf -> i
    boolean isClone -> k
    org.apache.lucene.util.WeakIdentityMap clones -> l
    boolean $assertionsDisabled -> a
    org.apache.lucene.store.MMapDirectory this$0 -> b
    byte readByte() -> b
    void readBytes(byte[],int,int) -> a
    int readInt() -> d_
    long readLong() -> e_
    long getFilePointer() -> d
    void seek(long) -> a
    long length() -> e
    java.lang.Object clone() -> clone
    void unsetBuffers() -> h
    void close() -> close
org.apache.lucene.store.NIOFSDirectory -> a.a.a.g.v:
    org.apache.lucene.store.IndexInput openInput(java.lang.String,int) -> a
org.apache.lucene.store.NIOFSDirectory$NIOFSIndexInput -> a.a.a.g.w:
    java.nio.ByteBuffer byteBuf -> h
    byte[] otherBuffer -> i
    java.nio.ByteBuffer otherByteBuf -> k
    java.nio.channels.FileChannel channel -> a
    boolean $assertionsDisabled -> b
    void newBuffer(byte[]) -> a
    void close() -> close
    void readInternal(byte[],int,int) -> b
org.apache.lucene.store.NativeFSLock -> a.a.a.g.x:
    java.io.RandomAccessFile f -> c
    java.nio.channels.FileChannel channel -> d
    java.nio.channels.FileLock lock -> e
    java.io.File path -> f
    java.io.File lockDir -> g
    java.util.HashSet LOCK_HELD -> h
    boolean lockExists() -> c
    boolean obtain() -> a
    void release() -> b
    java.lang.String toString() -> toString
org.apache.lucene.store.NativeFSLockFactory -> a.a.a.g.y:
    org.apache.lucene.store.Lock makeLock(java.lang.String) -> b
org.apache.lucene.store.NoSuchDirectoryException -> a.a.a.g.z:
org.apache.lucene.store.RAMDirectory -> a.a.a.g.aa:
    java.util.Map fileMap -> a
    java.util.concurrent.atomic.AtomicLong sizeInBytes -> e
    java.lang.String[] listAll() -> a
    boolean fileExists(java.lang.String) -> b
    long fileLength(java.lang.String) -> d
    void deleteFile(java.lang.String) -> c
    org.apache.lucene.store.IndexOutput createOutput(java.lang.String) -> e
    org.apache.lucene.store.RAMFile newRAMFile() -> e
    org.apache.lucene.store.IndexInput openInput(java.lang.String) -> a
    void close() -> close
org.apache.lucene.store.RAMFile -> a.a.a.g.ab:
    java.util.ArrayList buffers -> c
    long length -> d
    org.apache.lucene.store.RAMDirectory directory -> e
    long sizeInBytes -> f
    long lastModified -> a
    long getLength() -> b
    void setLength(long) -> a
    void setLastModified(long) -> b
    byte[] addBuffer(int) -> b
    byte[] getBuffer(int) -> c
    int numBuffers() -> c
    byte[] newBuffer(int) -> a
    long getSizeInBytes() -> d
org.apache.lucene.store.RAMInputStream -> a.a.a.g.ac:
    org.apache.lucene.store.RAMFile file -> b
    long length -> c
    byte[] currentBuffer -> d
    int currentBufferIndex -> e
    int bufferPosition -> f
    long bufferStart -> g
    int bufferLength -> h
    boolean $assertionsDisabled -> a
    void close() -> close
    long length() -> e
    byte readByte() -> b
    void readBytes(byte[],int,int) -> a
    void switchCurrentBuffer(boolean) -> a
    long getFilePointer() -> d
    void seek(long) -> a
org.apache.lucene.store.RAMOutputStream -> a.a.a.g.ad:
    org.apache.lucene.store.RAMFile file -> b
    byte[] currentBuffer -> d
    int currentBufferIndex -> e
    int bufferPosition -> f
    long bufferStart -> g
    int bufferLength -> h
    boolean $assertionsDisabled -> a
    void writeTo(org.apache.lucene.store.IndexOutput) -> a
    void reset() -> c
    void close() -> close
    void seek(long) -> a
    long length() -> f
    void writeByte(byte) -> a
    void writeBytes(byte[],int,int) -> a
    void switchCurrentBuffer() -> d
    void setFileLength() -> e
    void flush() -> a
    long getFilePointer() -> b
    void copyBytes(org.apache.lucene.store.DataInput,long) -> a
org.apache.lucene.store.SimpleFSDirectory -> a.a.a.g.ae:
    org.apache.lucene.store.IndexInput openInput(java.lang.String,int) -> a
org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexInput -> a.a.a.g.af:
    org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexInput$Descriptor file -> c
    boolean isClone -> f
    int chunkSize -> g
    void readInternal(byte[],int,int) -> b
    void close() -> close
    void seekInternal(long) -> b
    long length() -> e
    java.lang.Object clone() -> clone
org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexInput$Descriptor -> a.a.a.g.ag:
    boolean isOpen -> a
    long position -> b
    long length -> c
    void close() -> close
org.apache.lucene.util.ArrayUtil -> a.a.a.h.a:
    boolean $assertionsDisabled -> a
    int oversize(int,int) -> a
    int getShrinkSize(int,int,int) -> a
    int[] grow(int[],int) -> a
    int[] grow(int[]) -> a
    int[] shrink(int[],int) -> b
    long[] grow(long[],int) -> a
    long[] grow(long[]) -> a
    byte[] grow(byte[],int) -> a
    byte[] shrink(byte[],int) -> b
    char[] grow(char[],int) -> a
    int hashCode(char[],int,int) -> a
    int hashCode(byte[],int,int) -> a
    org.apache.lucene.util.SorterTemplate getSorter(java.lang.Object[],java.util.Comparator) -> b
    org.apache.lucene.util.SorterTemplate getSorter(java.lang.Comparable[]) -> b
    void quickSort(java.lang.Object[],int,int,java.util.Comparator) -> a
    void mergeSort(java.lang.Object[],int,int,java.util.Comparator) -> b
    void mergeSort(java.lang.Object[],java.util.Comparator) -> a
    void mergeSort(java.lang.Comparable[],int,int) -> a
    void mergeSort(java.lang.Comparable[]) -> a
org.apache.lucene.util.ArrayUtil$1 -> a.a.a.h.b:
    java.lang.Object pivot -> c
    java.lang.Object[] val$a -> a
    java.util.Comparator val$comp -> b
    void swap(int,int) -> a
    int compare(int,int) -> b
    void setPivot(int) -> a
    int comparePivot(int) -> b
org.apache.lucene.util.ArrayUtil$2 -> a.a.a.h.c:
    java.lang.Comparable pivot -> b
    java.lang.Comparable[] val$a -> a
    void swap(int,int) -> a
    int compare(int,int) -> b
    void setPivot(int) -> a
    int comparePivot(int) -> b
org.apache.lucene.util.Attribute -> a.a.a.h.d:
org.apache.lucene.util.AttributeImpl -> a.a.a.h.e:
    org.apache.lucene.util.VirtualMethod toStringMethod -> a
    boolean enableBackwards -> b
    boolean $assertionsDisabled -> c
    void clear() -> c
    java.lang.String toString() -> toString
    java.lang.String reflectAsString(boolean) -> a
    boolean assertExternalClass(java.lang.Class) -> a
    void reflectWith(org.apache.lucene.util.AttributeReflector) -> a
    void copyTo(org.apache.lucene.util.AttributeImpl) -> a
    java.lang.Object clone() -> clone
org.apache.lucene.util.AttributeImpl$1 -> a.a.a.h.f:
    java.lang.StringBuilder val$buffer -> a
    boolean val$prependAttClass -> b
    org.apache.lucene.util.AttributeImpl this$0 -> c
    void reflect(java.lang.Class,java.lang.String,java.lang.Object) -> a
org.apache.lucene.util.AttributeReflector -> a.a.a.h.g:
    void reflect(java.lang.Class,java.lang.String,java.lang.Object) -> a
org.apache.lucene.util.AttributeSource -> a.a.a.h.h:
    java.util.Map attributes -> a
    java.util.Map attributeImpls -> b
    org.apache.lucene.util.AttributeSource$State[] currentState -> c
    org.apache.lucene.util.AttributeSource$AttributeFactory factory -> d
    org.apache.lucene.util.WeakIdentityMap knownImplClasses -> e
    boolean $assertionsDisabled -> i
    java.util.LinkedList getAttributeInterfaces(java.lang.Class) -> b
    void addAttributeImpl(org.apache.lucene.util.AttributeImpl) -> a
    org.apache.lucene.util.Attribute addAttribute(java.lang.Class) -> a
    boolean hasAttributes() -> e
    boolean hasAttribute(java.lang.Class) -> c
    org.apache.lucene.util.Attribute getAttribute(java.lang.Class) -> d
    org.apache.lucene.util.AttributeSource$State getCurrentState() -> a
    void clearAttributes() -> f
    org.apache.lucene.util.AttributeSource$State captureState() -> g
    void restoreState(org.apache.lucene.util.AttributeSource$State) -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
org.apache.lucene.util.AttributeSource$1 -> a.a.a.h.i:
    org.apache.lucene.util.AttributeSource$State state -> a
    void remove() -> remove
    org.apache.lucene.util.AttributeImpl next() -> a
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
org.apache.lucene.util.AttributeSource$AttributeFactory -> a.a.a.h.j:
    org.apache.lucene.util.AttributeSource$AttributeFactory DEFAULT_ATTRIBUTE_FACTORY -> a
    org.apache.lucene.util.AttributeImpl createAttributeInstance(java.lang.Class) -> a
org.apache.lucene.util.AttributeSource$AttributeFactory$DefaultAttributeFactory -> a.a.a.h.k:
    org.apache.lucene.util.WeakIdentityMap attClassImplMap -> b
    org.apache.lucene.util.AttributeImpl createAttributeInstance(java.lang.Class) -> a
    java.lang.Class getClassForInterface(java.lang.Class) -> b
org.apache.lucene.util.AttributeSource$State -> a.a.a.h.l:
    org.apache.lucene.util.AttributeImpl attribute -> a
    org.apache.lucene.util.AttributeSource$State next -> b
    java.lang.Object clone() -> clone
org.apache.lucene.util.BitUtil -> a.a.a.h.m:
    byte[] ntzTable -> a
    byte[] nlzTable -> b
    int pop(long) -> a
    long pop_array(long[],int,int) -> a
    int nlz(long) -> b
    int nextHighestPowerOfTwo(int) -> a
org.apache.lucene.util.BitVector -> a.a.a.h.n:
    byte[] bits -> b
    int size -> c
    int count -> d
    byte[] BYTE_COUNTS -> e
    java.lang.String CODEC -> f
    boolean $assertionsDisabled -> a
    int getNumBytes(int) -> d
    java.lang.Object clone() -> clone
    void set(int) -> a
    boolean getAndSet(int) -> b
    boolean get(int) -> c
    int size() -> a
    int count() -> b
    int getRecomputedCount() -> c
    void write(org.apache.lucene.store.Directory,java.lang.String) -> a
    void writeBits(org.apache.lucene.store.IndexOutput) -> a
    void writeDgaps(org.apache.lucene.store.IndexOutput) -> b
    boolean isSparse() -> d
    void readBits(org.apache.lucene.store.IndexInput) -> a
    void readDgaps(org.apache.lucene.store.IndexInput) -> b
org.apache.lucene.util.BytesRef -> a.a.a.h.o:
    byte[] EMPTY_BYTES -> a
    byte[] bytes -> b
    int offset -> c
    int length -> d
    java.util.Comparator utf8SortedAsUnicodeSortOrder -> f
    java.util.Comparator utf8SortedAsUTF16SortOrder -> g
    boolean $assertionsDisabled -> e
    void copyChars(java.lang.CharSequence) -> a
    boolean bytesEquals(org.apache.lucene.util.BytesRef) -> a
    org.apache.lucene.util.BytesRef clone() -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String utf8ToString() -> b
    java.lang.String toString() -> toString
    void copyBytes(org.apache.lucene.util.BytesRef) -> b
    void grow(int) -> a
    int compareTo(org.apache.lucene.util.BytesRef) -> c
    java.util.Comparator getUTF8SortedAsUTF16Comparator() -> c
    java.lang.Object clone() -> clone
    int compareTo(java.lang.Object) -> compareTo
org.apache.lucene.util.BytesRef$1 -> a.a.a.h.p:
org.apache.lucene.util.BytesRef$UTF8SortedAsUTF16Comparator -> a.a.a.h.q:
    int compare(org.apache.lucene.util.BytesRef,org.apache.lucene.util.BytesRef) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
org.apache.lucene.util.BytesRef$UTF8SortedAsUnicodeComparator -> a.a.a.h.r:
    int compare(org.apache.lucene.util.BytesRef,org.apache.lucene.util.BytesRef) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
org.apache.lucene.util.CharacterUtils -> a.a.a.h.s:
    org.apache.lucene.util.CharacterUtils$Java4CharacterUtils JAVA_4 -> a
    org.apache.lucene.util.CharacterUtils$Java5CharacterUtils JAVA_5 -> b
    org.apache.lucene.util.CharacterUtils getInstance(org.apache.lucene.util.Version) -> a
    int codePointAt(char[],int) -> a
    int codePointAt(java.lang.CharSequence,int) -> a
    int codePointAt(char[],int,int) -> a
org.apache.lucene.util.CharacterUtils$Java4CharacterUtils -> a.a.a.h.t:
    int codePointAt(char[],int) -> a
    int codePointAt(java.lang.CharSequence,int) -> a
    int codePointAt(char[],int,int) -> a
org.apache.lucene.util.CharacterUtils$Java5CharacterUtils -> a.a.a.h.u:
    boolean $assertionsDisabled -> a
    int codePointAt(char[],int) -> a
    int codePointAt(java.lang.CharSequence,int) -> a
    int codePointAt(char[],int,int) -> a
org.apache.lucene.util.CloseableThreadLocal -> a.a.a.h.v:
    java.lang.ThreadLocal t -> a
    java.util.Map hardRefs -> b
    int PURGE_MULTIPLIER -> c
    java.util.concurrent.atomic.AtomicInteger countUntilPurge -> d
    java.lang.Object initialValue() -> b
    java.lang.Object get() -> c
    void set(java.lang.Object) -> a
    void maybePurge() -> a
    void purge() -> d
    void close() -> close
org.apache.lucene.util.CodecUtil -> a.a.a.h.w:
    org.apache.lucene.store.DataOutput writeHeader(org.apache.lucene.store.DataOutput,java.lang.String,int) -> a
    int checkHeader(org.apache.lucene.store.DataInput,java.lang.String,int,int) -> a
org.apache.lucene.util.CollectionUtil -> a.a.a.h.x:
    org.apache.lucene.util.SorterTemplate getSorter(java.util.List,java.util.Comparator) -> b
    org.apache.lucene.util.SorterTemplate getSorter(java.util.List) -> c
    void quickSort(java.util.List) -> a
    void mergeSort(java.util.List,java.util.Comparator) -> a
    void mergeSort(java.util.List) -> b
org.apache.lucene.util.CollectionUtil$1 -> a.a.a.h.y:
    java.lang.Object pivot -> c
    java.util.List val$list -> a
    java.util.Comparator val$comp -> b
    void swap(int,int) -> a
    int compare(int,int) -> b
    void setPivot(int) -> a
    int comparePivot(int) -> b
org.apache.lucene.util.CollectionUtil$2 -> a.a.a.h.z:
    java.lang.Comparable pivot -> b
    java.util.List val$list -> a
    void swap(int,int) -> a
    int compare(int,int) -> b
    void setPivot(int) -> a
    int comparePivot(int) -> b
org.apache.lucene.util.Constants -> a.a.a.h.aa:
    java.lang.String JVM_VENDOR -> a
    java.lang.String JVM_VERSION -> b
    java.lang.String JVM_NAME -> c
    java.lang.String JAVA_VERSION -> d
    boolean JAVA_1_1 -> e
    boolean JAVA_1_2 -> f
    boolean JAVA_1_3 -> g
    java.lang.String OS_NAME -> h
    boolean LINUX -> i
    boolean WINDOWS -> j
    boolean SUN_OS -> k
    boolean MAC_OS_X -> l
    java.lang.String OS_ARCH -> m
    java.lang.String OS_VERSION -> n
    java.lang.String JAVA_VENDOR -> o
    boolean JRE_IS_MINIMUM_JAVA6 -> p
    boolean JRE_IS_MINIMUM_JAVA7 -> q
    boolean JRE_IS_64BIT -> r
    java.lang.String LUCENE_MAIN_VERSION -> s
    java.lang.String LUCENE_VERSION -> t
    java.lang.String ident(java.lang.String) -> a
org.apache.lucene.util.DoubleBarrelLRUCache -> a.a.a.h.ab:
    java.util.Map cache1 -> a
    java.util.Map cache2 -> b
    java.util.concurrent.atomic.AtomicInteger countdown -> c
    boolean swapped -> d
    int maxSize -> e
    java.lang.Object get(org.apache.lucene.util.DoubleBarrelLRUCache$CloneableKey) -> a
    void put(org.apache.lucene.util.DoubleBarrelLRUCache$CloneableKey,java.lang.Object) -> a
org.apache.lucene.util.DoubleBarrelLRUCache$CloneableKey -> a.a.a.h.ac:
    java.lang.Object clone() -> clone
org.apache.lucene.util.FixedBitSet -> a.a.a.h.ad:
    long[] bits -> c
    int numBits -> d
    boolean $assertionsDisabled -> b
    int bits2words(int) -> a
    org.apache.lucene.search.DocIdSetIterator iterator() -> a
    int length() -> b
    void set(int) -> b
    java.lang.Object clone() -> clone
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.apache.lucene.util.IOUtils -> a.a.a.h.ae:
    java.nio.charset.Charset CHARSET_UTF_8 -> a
    java.lang.reflect.Method SUPPRESS_METHOD -> b
    void closeWhileHandlingException(java.lang.Exception,java.io.Closeable[]) -> a
    void close(java.io.Closeable[]) -> a
    void closeWhileHandlingException(java.io.Closeable[]) -> b
    void addSuppressed(java.lang.Throwable,java.lang.Throwable) -> a
org.apache.lucene.util.NumericUtils -> a.a.a.h.af:
    int longToPrefixCoded(long,int,char[]) -> a
    java.lang.String longToPrefixCoded(long,int) -> a
    int intToPrefixCoded(int,int,char[]) -> a
    java.lang.String intToPrefixCoded(int,int) -> a
    long doubleToSortableLong(double) -> a
    int floatToSortableInt(float) -> a
    void splitLongRange(org.apache.lucene.util.NumericUtils$LongRangeBuilder,int,long,long) -> a
    void splitIntRange(org.apache.lucene.util.NumericUtils$IntRangeBuilder,int,int,int) -> a
    void splitRange(java.lang.Object,int,int,long,long) -> a
    void addRange(java.lang.Object,int,long,long,int) -> a
org.apache.lucene.util.NumericUtils$IntRangeBuilder -> a.a.a.h.ag:
    void addRange(java.lang.String,java.lang.String) -> a
    void addRange(int,int,int) -> a
org.apache.lucene.util.NumericUtils$LongRangeBuilder -> a.a.a.h.ah:
    void addRange(java.lang.String,java.lang.String) -> a
    void addRange(long,long,int) -> a
org.apache.lucene.util.OpenBitSet -> a.a.a.h.ai:
    long[] bits -> b
    int wlen -> c
    long numBits -> e
    boolean $assertionsDisabled -> d
    org.apache.lucene.search.DocIdSetIterator iterator() -> a
    boolean get(int) -> a
    void set(long) -> a
    int expandingWordNum(long) -> b
    void clear(long) -> c
    long cardinality() -> b
    java.lang.Object clone() -> clone
    void union(org.apache.lucene.util.OpenBitSet) -> a
    boolean intersects(org.apache.lucene.util.OpenBitSet) -> b
    void ensureCapacityWords(int) -> b
    void ensureCapacity(long) -> d
    int bits2words(long) -> e
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.apache.lucene.util.OpenBitSetIterator -> a.a.a.h.aj:
    int[] bitlist -> a
    long[] arr -> b
    int words -> c
    int i -> d
    long word -> e
    int wordShift -> f
    int indexArray -> g
    int curDocId -> h
    void shift() -> c
    int nextDoc() -> b
    int advance(int) -> a
    int docID() -> a
org.apache.lucene.util.PagedBytes -> a.a.a.h.ak:
    java.util.List blocks -> b
    java.util.List blockEnd -> c
    int blockSize -> d
    int blockBits -> e
    int blockMask -> f
    boolean didSkipBytes -> g
    boolean frozen -> h
    int upto -> i
    byte[] currentBlock -> j
    byte[] EMPTY_BYTES -> k
    boolean $assertionsDisabled -> a
    org.apache.lucene.util.PagedBytes$Reader freeze(boolean) -> a
    org.apache.lucene.util.PagedBytes$PagedBytesDataInput getDataInput() -> a
    org.apache.lucene.util.PagedBytes$PagedBytesDataOutput getDataOutput() -> b
    java.util.List access$000(org.apache.lucene.util.PagedBytes) -> a
    java.util.List access$100(org.apache.lucene.util.PagedBytes) -> b
    int access$200(org.apache.lucene.util.PagedBytes) -> c
    int access$300(org.apache.lucene.util.PagedBytes) -> d
    int access$400(org.apache.lucene.util.PagedBytes) -> e
    int access$500(org.apache.lucene.util.PagedBytes) -> f
    byte[] access$600(org.apache.lucene.util.PagedBytes) -> g
    byte[] access$602(org.apache.lucene.util.PagedBytes,byte[]) -> a
    int access$502(org.apache.lucene.util.PagedBytes,int) -> a
    int access$508(org.apache.lucene.util.PagedBytes) -> h
    int access$512(org.apache.lucene.util.PagedBytes,int) -> b
org.apache.lucene.util.PagedBytes$PagedBytesDataInput -> a.a.a.h.al:
    int currentBlockIndex -> c
    int currentBlockUpto -> d
    byte[] currentBlock -> e
    boolean $assertionsDisabled -> a
    org.apache.lucene.util.PagedBytes this$0 -> b
    java.lang.Object clone() -> clone
    long getPosition() -> d
    void setPosition(long) -> a
    byte readByte() -> b
    void readBytes(byte[],int,int) -> a
    void nextBlock() -> e
org.apache.lucene.util.PagedBytes$PagedBytesDataOutput -> a.a.a.h.am:
    boolean $assertionsDisabled -> a
    org.apache.lucene.util.PagedBytes this$0 -> b
    void writeByte(byte) -> a
    void writeBytes(byte[],int,int) -> a
    long getPosition() -> a
org.apache.lucene.util.PagedBytes$Reader -> a.a.a.h.an:
    byte[][] blocks -> b
    int[] blockEnds -> c
    int blockBits -> d
    int blockMask -> e
    int blockSize -> f
    boolean $assertionsDisabled -> a
org.apache.lucene.util.PriorityQueue -> a.a.a.h.ao:
    int size -> a
    int maxSize -> b
    java.lang.Object[] heap -> c
    boolean lessThan(java.lang.Object,java.lang.Object) -> a
    java.lang.Object getSentinelObject() -> b
    void initialize(int) -> a
    java.lang.Object add(java.lang.Object) -> a
    java.lang.Object top() -> c
    java.lang.Object pop() -> d
    java.lang.Object updateTop() -> e
    int size() -> f
    void clear() -> g
    void upHeap() -> a
    void downHeap() -> h
org.apache.lucene.util.RamUsageEstimator -> a.a.a.h.ap:
    java.lang.String JVM_INFO_STRING -> a
    int NUM_BYTES_OBJECT_REF -> b
    int NUM_BYTES_OBJECT_HEADER -> c
    int NUM_BYTES_ARRAY_HEADER -> d
    int NUM_BYTES_OBJECT_ALIGNMENT -> e
    java.util.Map primitiveSizes -> f
    java.lang.Object theUnsafe -> g
    java.lang.reflect.Method objectFieldOffsetMethod -> h
    java.util.EnumSet supportedFeatures -> i
org.apache.lucene.util.RamUsageEstimator$DummyOneFieldObject -> a.a.a.h.aq:
    byte base -> a
org.apache.lucene.util.RamUsageEstimator$DummyTwoLongObject -> a.a.a.h.ar:
    long dummy1 -> a
    long dummy2 -> b
org.apache.lucene.util.RamUsageEstimator$JvmFeature -> a.a.a.h.as:
    org.apache.lucene.util.RamUsageEstimator$JvmFeature OBJECT_REFERENCE_SIZE -> a
    org.apache.lucene.util.RamUsageEstimator$JvmFeature ARRAY_HEADER_SIZE -> b
    org.apache.lucene.util.RamUsageEstimator$JvmFeature FIELD_OFFSETS -> c
    org.apache.lucene.util.RamUsageEstimator$JvmFeature OBJECT_ALIGNMENT -> d
    java.lang.String description -> e
    org.apache.lucene.util.RamUsageEstimator$JvmFeature[] $VALUES -> f
    org.apache.lucene.util.RamUsageEstimator$JvmFeature[] values() -> values
    org.apache.lucene.util.RamUsageEstimator$JvmFeature valueOf(java.lang.String) -> valueOf
    java.lang.String toString() -> toString
org.apache.lucene.util.ReaderUtil -> a.a.a.h.at:
    void gatherSubReaders(java.util.List,org.apache.lucene.index.IndexReader) -> a
org.apache.lucene.util.ReaderUtil$Gather -> a.a.a.h.au:
    org.apache.lucene.index.IndexReader topReader -> a
    boolean $assertionsDisabled -> d
    int run() -> a
    int run(int,org.apache.lucene.index.IndexReader) -> b
    void add(int,org.apache.lucene.index.IndexReader) -> a
org.apache.lucene.util.SetOnce -> a.a.a.h.av:
    java.lang.Object obj -> a
    java.util.concurrent.atomic.AtomicBoolean set -> b
    void set(java.lang.Object) -> a
    java.lang.Object get() -> a
org.apache.lucene.util.SetOnce$AlreadySetException -> a.a.a.h.aw:
org.apache.lucene.util.SimpleStringInterner -> a.a.a.h.ax:
    org.apache.lucene.util.SimpleStringInterner$Entry[] cache -> a
    int maxChainLength -> b
    java.lang.String intern(java.lang.String) -> a
org.apache.lucene.util.SimpleStringInterner$1 -> a.a.a.h.ay:
org.apache.lucene.util.SimpleStringInterner$Entry -> a.a.a.h.az:
    java.lang.String str -> a
    int hash -> b
    org.apache.lucene.util.SimpleStringInterner$Entry next -> c
    org.apache.lucene.util.SimpleStringInterner$Entry access$000(org.apache.lucene.util.SimpleStringInterner$Entry) -> a
    int access$100(org.apache.lucene.util.SimpleStringInterner$Entry) -> b
    java.lang.String access$200(org.apache.lucene.util.SimpleStringInterner$Entry) -> c
    org.apache.lucene.util.SimpleStringInterner$Entry access$002(org.apache.lucene.util.SimpleStringInterner$Entry,org.apache.lucene.util.SimpleStringInterner$Entry) -> a
org.apache.lucene.util.SmallFloat -> a.a.a.h.ba:
    byte floatToByte315(float) -> a
    float byte315ToFloat(byte) -> a
org.apache.lucene.util.SorterTemplate -> a.a.a.h.bb:
    void swap(int,int) -> a
    int compare(int,int) -> b
    void setPivot(int) -> a
    int comparePivot(int) -> b
    void insertionSort(int,int) -> c
    void quickSort(int,int) -> d
    void quickSort(int,int,int) -> a
    void mergeSort(int,int) -> e
    void merge(int,int,int,int,int) -> a
    void rotate(int,int,int) -> b
    int lower(int,int,int) -> c
    int upper(int,int,int) -> d
org.apache.lucene.util.StringHelper -> a.a.a.h.bc:
    org.apache.lucene.util.StringInterner interner -> a
    java.util.Comparator versionComparator -> b
    java.lang.String intern(java.lang.String) -> a
    int bytesDifference(byte[],int,byte[],int) -> a
    java.util.Comparator getVersionComparator() -> a
org.apache.lucene.util.StringHelper$1 -> a.a.a.h.bd:
    int compare(java.lang.String,java.lang.String) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
org.apache.lucene.util.StringInterner -> a.a.a.h.be:
    java.lang.String intern(java.lang.String) -> a
org.apache.lucene.util.ThreadInterruptedException -> a.a.a.h.bf:
org.apache.lucene.util.ToStringUtils -> a.a.a.h.bg:
    java.lang.String boost(float) -> a
org.apache.lucene.util.UnicodeUtil -> a.a.a.h.bh:
    boolean $assertionsDisabled -> a
    void UTF16toUTF8(char[],int,org.apache.lucene.util.UnicodeUtil$UTF8Result) -> a
    void UTF16toUTF8(char[],int,int,org.apache.lucene.util.UnicodeUtil$UTF8Result) -> a
    void UTF16toUTF8(java.lang.String,int,int,org.apache.lucene.util.UnicodeUtil$UTF8Result) -> a
    void UTF16toUTF8(java.lang.CharSequence,int,int,org.apache.lucene.util.BytesRef) -> a
    void UTF8toUTF16(byte[],int,int,org.apache.lucene.util.UnicodeUtil$UTF16Result) -> a
org.apache.lucene.util.UnicodeUtil$UTF16Result -> a.a.a.h.bi:
    char[] result -> a
    int[] offsets -> b
    int length -> c
    void setLength(int) -> a
    void copyText(org.apache.lucene.util.UnicodeUtil$UTF16Result) -> a
org.apache.lucene.util.UnicodeUtil$UTF8Result -> a.a.a.h.bj:
    byte[] result -> a
    int length -> b
    void setLength(int) -> a
org.apache.lucene.util.Version -> a.a.a.h.bk:
    org.apache.lucene.util.Version LUCENE_20 -> a
    org.apache.lucene.util.Version LUCENE_21 -> b
    org.apache.lucene.util.Version LUCENE_22 -> c
    org.apache.lucene.util.Version LUCENE_23 -> d
    org.apache.lucene.util.Version LUCENE_24 -> e
    org.apache.lucene.util.Version LUCENE_29 -> f
    org.apache.lucene.util.Version LUCENE_30 -> g
    org.apache.lucene.util.Version LUCENE_31 -> h
    org.apache.lucene.util.Version LUCENE_32 -> i
    org.apache.lucene.util.Version LUCENE_33 -> j
    org.apache.lucene.util.Version LUCENE_34 -> k
    org.apache.lucene.util.Version LUCENE_35 -> l
    org.apache.lucene.util.Version LUCENE_36 -> m
    org.apache.lucene.util.Version LUCENE_CURRENT -> n
    org.apache.lucene.util.Version[] $VALUES -> o
    org.apache.lucene.util.Version[] values() -> values
    org.apache.lucene.util.Version valueOf(java.lang.String) -> valueOf
    boolean onOrAfter(org.apache.lucene.util.Version) -> a
org.apache.lucene.util.VirtualMethod -> a.a.a.h.bl:
    java.util.Set singletonSet -> a
    java.lang.Class baseClass -> b
    java.lang.String method -> c
    java.lang.Class[] parameters -> d
    org.apache.lucene.util.WeakIdentityMap cache -> e
    int getImplementationDistance(java.lang.Class) -> a
    boolean isOverriddenAsOf(java.lang.Class) -> b
    int reflectImplementationDistance(java.lang.Class) -> c
    int compareImplementationDistance(java.lang.Class,org.apache.lucene.util.VirtualMethod,org.apache.lucene.util.VirtualMethod) -> a
org.apache.lucene.util.WeakIdentityMap -> a.a.a.h.bm:
    java.lang.ref.ReferenceQueue queue -> b
    java.util.Map backingStore -> c
    java.lang.Object NULL -> a
    org.apache.lucene.util.WeakIdentityMap newConcurrentHashMap() -> a
    void clear() -> b
    java.lang.Object get(java.lang.Object) -> a
    java.lang.Object put(java.lang.Object,java.lang.Object) -> a
    java.util.Iterator keyIterator() -> c
    void reap() -> d
org.apache.lucene.util.WeakIdentityMap$1 -> a.a.a.h.bn:
    java.lang.Object next -> d
    boolean nextIsSet -> e
    boolean $assertionsDisabled -> a
    java.util.Iterator val$iterator -> b
    org.apache.lucene.util.WeakIdentityMap this$0 -> c
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
    boolean setNext() -> a
org.apache.lucene.util.WeakIdentityMap$IdentityWeakReference -> a.a.a.h.bo:
    int hash -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.apache.lucene.util.packed.Direct16 -> a.a.a.h.a.a:
    short[] values -> e
    boolean $assertionsDisabled -> a
    long get(int) -> a
    void set(int,long) -> a
org.apache.lucene.util.packed.Direct32 -> a.a.a.h.a.b:
    int[] values -> e
    boolean $assertionsDisabled -> a
    long get(int) -> a
    void set(int,long) -> a
org.apache.lucene.util.packed.Direct64 -> a.a.a.h.a.c:
    long[] values -> e
    boolean $assertionsDisabled -> a
    long get(int) -> a
    void set(int,long) -> a
org.apache.lucene.util.packed.Direct8 -> a.a.a.h.a.d:
    byte[] values -> e
    boolean $assertionsDisabled -> a
    long get(int) -> a
    void set(int,long) -> a
org.apache.lucene.util.packed.GrowableWriter -> a.a.a.h.a.e:
    long currentMaxValue -> a
    org.apache.lucene.util.packed.PackedInts$Mutable current -> b
    boolean roundFixedSize -> c
    int getSize(int) -> b
    long get(int) -> a
    int size() -> a
    int getBitsPerValue() -> b
    org.apache.lucene.util.packed.PackedInts$Mutable getMutable() -> c
    void set(int,long) -> a
org.apache.lucene.util.packed.Packed32 -> a.a.a.h.a.f:
    int[][] SHIFTS -> e
    int[][] MASKS -> f
    int[][] WRITE_MASKS -> g
    int[] blocks -> h
    int maxPos -> i
    int[] shifts -> j
    int[] readMasks -> k
    int[] writeMasks -> l
    boolean $assertionsDisabled -> a
    void updateCached() -> c
    long get(int) -> a
    void set(int,long) -> a
    java.lang.String toString() -> toString
org.apache.lucene.util.packed.Packed64 -> a.a.a.h.a.g:
    int[][] SHIFTS -> e
    long[][] MASKS -> f
    long[][] WRITE_MASKS -> g
    long[] blocks -> h
    int maxPos -> i
    int[] shifts -> j
    long[] readMasks -> k
    long[] writeMasks -> l
    boolean $assertionsDisabled -> a
    void updateCached() -> c
    long get(int) -> a
    void set(int,long) -> a
    java.lang.String toString() -> toString
org.apache.lucene.util.packed.PackedInts -> a.a.a.h.a.h:
    boolean $assertionsDisabled -> a
    org.apache.lucene.util.packed.PackedInts$Mutable getMutable(int,int) -> a
    long maxValue(int) -> a
    int getNextFixedSize(int) -> b
org.apache.lucene.util.packed.PackedInts$Mutable -> a.a.a.h.a.i:
    void set(int,long) -> a
org.apache.lucene.util.packed.PackedInts$Reader -> a.a.a.h.a.j:
    long get(int) -> a
    int getBitsPerValue() -> b
    int size() -> a
org.apache.lucene.util.packed.PackedInts$ReaderImpl -> a.a.a.h.a.k:
    int bitsPerValue -> b
    int valueCount -> c
    boolean $assertionsDisabled -> d
    int getBitsPerValue() -> b
    int size() -> a
